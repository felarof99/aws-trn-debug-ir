#loc1 = loc("key")
#loc2 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":112:0)
#loc3 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/equinox/_module.py":372:0)
#loc4 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/equinox/_better_abstract.py":227:0)
#loc5 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/equinox/_module.py":565:0)
#loc6 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":569:0)
#loc7 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":629:0)
#loc8 = loc("__init__"(#loc2))
#loc9 = loc("__init__"(#loc3))
#loc10 = loc("__call__"(#loc4))
#loc11 = loc("__call__"(#loc5))
#loc12 = loc("__init__"(#loc6))
#loc13 = loc("__init__"(#loc7))
#loc14 = loc(callsite(#loc13 at #loc9))
#loc15 = loc(callsite(#loc11 at #loc14))
#loc16 = loc(callsite(#loc10 at #loc15))
#loc17 = loc(callsite(#loc9 at #loc16))
#loc18 = loc(callsite(#loc12 at #loc17))
#loc19 = loc(callsite(#loc11 at #loc18))
#loc20 = loc(callsite(#loc10 at #loc19))
#loc21 = loc(callsite(#loc9 at #loc20))
#loc22 = loc(callsite(#loc8 at #loc21))
#loc23 = loc("jit(_normal)/jit(main)/pjit"(#loc22))
#loc24 = loc("jit(_normal)/jit(main)/jit(_normal_real)/pjit"(#loc22))
module @jit__normal attributes {mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} {
  func.func public @main(%arg0: tensor<4xui32> loc("key")) -> (tensor<128256x2048xf32> {jax.result_info = ""}) {
    %0 = stablehlo.custom_call @Sharding(%arg0) {backend_config = "", mhlo.sharding = "{replicated}"} : (tensor<4xui32>) -> tensor<4xui32> loc(#loc)
    %1 = call @_normal_real(%0) : (tensor<4xui32>) -> tensor<128256x2048xf32> loc(#loc23)
    return %1 : tensor<128256x2048xf32> loc(#loc)
  } loc(#loc)
  func.func private @_normal_real(%arg0: tensor<4xui32> loc("jit(_normal)/jit(main)/pjit"(#loc22))) -> tensor<128256x2048xf32> {
    %cst = stablehlo.constant dense<-0.99999994> : tensor<f32> loc(#loc23)
    %cst_0 = stablehlo.constant dense<1.000000e+00> : tensor<f32> loc(#loc23)
    %0 = call @_uniform(%arg0, %cst, %cst_0) : (tensor<4xui32>, tensor<f32>, tensor<f32>) -> tensor<128256x2048xf32> loc(#loc24)
    %1 = chlo.erf_inv %0 : tensor<128256x2048xf32> -> tensor<128256x2048xf32> loc(#loc25)
    %cst_1 = stablehlo.constant dense<1.41421354> : tensor<f32> loc(#loc23)
    %2 = stablehlo.broadcast_in_dim %cst_1, dims = [] : (tensor<f32>) -> tensor<128256x2048xf32> loc(#loc26)
    %3 = stablehlo.multiply %2, %1 : tensor<128256x2048xf32> loc(#loc26)
    return %3 : tensor<128256x2048xf32> loc(#loc23)
  } loc(#loc23)
  func.func private @_uniform(%arg0: tensor<4xui32> loc("jit(_normal)/jit(main)/jit(_normal_real)/pjit"(#loc22)), %arg1: tensor<f32> loc("jit(_normal)/jit(main)/jit(_normal_real)/pjit"(#loc22)), %arg2: tensor<f32> loc("jit(_normal)/jit(main)/jit(_normal_real)/pjit"(#loc22))) -> tensor<128256x2048xf32> {
    %0 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<f32>) -> tensor<1x1xf32> loc(#loc27)
    %1 = stablehlo.broadcast_in_dim %arg2, dims = [] : (tensor<f32>) -> tensor<1x1xf32> loc(#loc27)
    %2 = stablehlo.reshape %arg0 : (tensor<4xui32>) -> tensor<2x2xui32> loc(#loc28)
    %3 = stablehlo.bitcast_convert %2 : (tensor<2x2xui32>) -> tensor<2xui64> loc(#loc28)
    %output_state, %output = stablehlo.rng_bit_generator %3, algorithm =  DEFAULT : (tensor<2xui64>) -> (tensor<2xui64>, tensor<128256x2048xui32>) loc(#loc28)
    %4 = stablehlo.bitcast_convert %output_state : (tensor<2xui64>) -> tensor<2x2xui32> loc(#loc28)
    %5 = stablehlo.reshape %4 : (tensor<2x2xui32>) -> tensor<4xui32> loc(#loc28)
    %c = stablehlo.constant dense<9> : tensor<ui32> loc(#loc24)
    %6 = stablehlo.broadcast_in_dim %c, dims = [] : (tensor<ui32>) -> tensor<128256x2048xui32> loc(#loc29)
    %7 = stablehlo.shift_right_logical %output, %6 : tensor<128256x2048xui32> loc(#loc29)
    %c_0 = stablehlo.constant dense<1065353216> : tensor<ui32> loc(#loc24)
    %8 = stablehlo.broadcast_in_dim %c_0, dims = [] : (tensor<ui32>) -> tensor<128256x2048xui32> loc(#loc30)
    %9 = stablehlo.or %7, %8 : tensor<128256x2048xui32> loc(#loc30)
    %10 = stablehlo.bitcast_convert %9 : (tensor<128256x2048xui32>) -> tensor<128256x2048xf32> loc(#loc31)
    %cst = stablehlo.constant dense<1.000000e+00> : tensor<f32> loc(#loc24)
    %11 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<128256x2048xf32> loc(#loc32)
    %12 = stablehlo.subtract %10, %11 : tensor<128256x2048xf32> loc(#loc32)
    %13 = stablehlo.subtract %1, %0 : tensor<1x1xf32> loc(#loc32)
    %14 = stablehlo.broadcast_in_dim %13, dims = [0, 1] : (tensor<1x1xf32>) -> tensor<128256x2048xf32> loc(#loc33)
    %15 = stablehlo.multiply %12, %14 : tensor<128256x2048xf32> loc(#loc33)
    %16 = stablehlo.broadcast_in_dim %0, dims = [0, 1] : (tensor<1x1xf32>) -> tensor<128256x2048xf32> loc(#loc34)
    %17 = stablehlo.add %15, %16 : tensor<128256x2048xf32> loc(#loc34)
    %18 = stablehlo.broadcast_in_dim %0, dims = [0, 1] : (tensor<1x1xf32>) -> tensor<128256x2048xf32> loc(#loc35)
    %19 = stablehlo.maximum %18, %17 : tensor<128256x2048xf32> loc(#loc35)
    return %19 : tensor<128256x2048xf32> loc(#loc24)
  } loc(#loc24)
} loc(#loc)
#loc = loc(unknown)
#loc25 = loc("jit(_normal)/jit(main)/jit(_normal_real)/erf_inv"(#loc22))
#loc26 = loc("jit(_normal)/jit(main)/jit(_normal_real)/mul"(#loc22))
#loc27 = loc("jit(_normal)/jit(main)/jit(_normal_real)/jit(_uniform)/broadcast_in_dim"(#loc22))
#loc28 = loc("jit(_normal)/jit(main)/jit(_normal_real)/jit(_uniform)/rng_bit_generator"(#loc22))
#loc29 = loc("jit(_normal)/jit(main)/jit(_normal_real)/jit(_uniform)/shift_right_logical"(#loc22))
#loc30 = loc("jit(_normal)/jit(main)/jit(_normal_real)/jit(_uniform)/or"(#loc22))
#loc31 = loc("jit(_normal)/jit(main)/jit(_normal_real)/jit(_uniform)/bitcast_convert_type"(#loc22))
#loc32 = loc("jit(_normal)/jit(main)/jit(_normal_real)/jit(_uniform)/sub"(#loc22))
#loc33 = loc("jit(_normal)/jit(main)/jit(_normal_real)/jit(_uniform)/mul"(#loc22))
#loc34 = loc("jit(_normal)/jit(main)/jit(_normal_real)/jit(_uniform)/add"(#loc22))
#loc35 = loc("jit(_normal)/jit(main)/jit(_normal_real)/jit(_uniform)/max"(#loc22))
