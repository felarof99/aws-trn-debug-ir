#loc1 = loc("model_params.model.embed_tokens.weight")
#loc2 = loc("model_params.model.layers.self_attn.q_proj.weight")
#loc3 = loc("model_params.model.layers.self_attn.q_proj.lora_A")
#loc4 = loc("model_params.model.layers.self_attn.k_proj.lora_A")
#loc5 = loc("model_params.model.layers.self_attn.k_proj.lora_B")
#loc6 = loc("model_params.model.layers.self_attn.v_proj.weight")
#loc7 = loc("model_params.model.layers.self_attn.v_proj.lora_A")
#loc8 = loc("model_params.model.layers.self_attn.v_proj.lora_B")
#loc9 = loc("model_params.model.layers.self_attn.o_proj.weight")
#loc10 = loc("model_params.model.layers.self_attn.o_proj.lora_A")
#loc11 = loc("model_params.model.layers.self_attn.o_proj.lora_B")
#loc12 = loc("model_params.model.layers.self_attn.rotary_emb.inv_freq")
#loc13 = loc("model_params.model.layers.mlp.gate_proj.weight")
#loc14 = loc("model_params.model.layers.mlp.gate_proj.lora_A")
#loc15 = loc("model_params.model.layers.mlp.gate_proj.lora_B")
#loc16 = loc("model_params.model.layers.mlp.up_proj.weight")
#loc17 = loc("model_params.model.layers.mlp.up_proj.lora_A")
#loc18 = loc("model_params.model.layers.mlp.up_proj.lora_B")
#loc19 = loc("model_params.model.layers.mlp.down_proj.weight")
#loc20 = loc("model_params.model.layers.mlp.down_proj.lora_A")
#loc21 = loc("model_params.model.layers.mlp.down_proj.lora_B")
#loc22 = loc("model_params.model.layers.input_layernorm.weight")
#loc23 = loc("model_params.model.layers.post_attention_layernorm.weight")
#loc24 = loc("model_params.model.norm.weight")
#loc25 = loc("model_params.lm_head.weight")
#loc26 = loc("model_params.lm_head.lora_A")
#loc27 = loc("model_params.lm_head.lora_B")
#loc28 = loc("optimizer_state[1][0].count")
#loc29 = loc("optimizer_state[1][0].mu.model.layers.self_attn.q_proj.lora_A")
#loc30 = loc("optimizer_state[1][0].mu.model.layers.self_attn.q_proj.lora_B")
#loc31 = loc("optimizer_state[1][0].mu.model.layers.self_attn.k_proj.lora_A")
#loc32 = loc("optimizer_state[1][0].mu.model.layers.self_attn.k_proj.lora_B")
#loc33 = loc("optimizer_state[1][0].mu.model.layers.self_attn.v_proj.lora_A")
#loc34 = loc("optimizer_state[1][0].mu.model.layers.self_attn.v_proj.lora_B")
#loc35 = loc("optimizer_state[1][0].mu.model.layers.self_attn.o_proj.lora_A")
#loc36 = loc("optimizer_state[1][0].mu.model.layers.self_attn.o_proj.lora_B")
#loc37 = loc("optimizer_state[1][0].mu.model.layers.mlp.gate_proj.lora_A")
#loc38 = loc("optimizer_state[1][0].mu.model.layers.mlp.gate_proj.lora_B")
#loc39 = loc("optimizer_state[1][0].mu.model.layers.mlp.up_proj.lora_A")
#loc40 = loc("optimizer_state[1][0].mu.model.layers.mlp.up_proj.lora_B")
#loc41 = loc("optimizer_state[1][0].mu.model.layers.mlp.down_proj.lora_A")
#loc42 = loc("optimizer_state[1][0].mu.model.layers.mlp.down_proj.lora_B")
#loc43 = loc("optimizer_state[1][0].mu.lm_head.lora_A")
#loc44 = loc("optimizer_state[1][0].mu.lm_head.lora_B")
#loc45 = loc("optimizer_state[1][0].nu.model.layers.self_attn.q_proj.lora_A")
#loc46 = loc("optimizer_state[1][0].nu.model.layers.self_attn.q_proj.lora_B")
#loc47 = loc("optimizer_state[1][0].nu.model.layers.self_attn.k_proj.lora_A")
#loc48 = loc("optimizer_state[1][0].nu.model.layers.self_attn.k_proj.lora_B")
#loc49 = loc("optimizer_state[1][0].nu.model.layers.self_attn.v_proj.lora_A")
#loc50 = loc("optimizer_state[1][0].nu.model.layers.self_attn.v_proj.lora_B")
#loc51 = loc("optimizer_state[1][0].nu.model.layers.self_attn.o_proj.lora_A")
#loc52 = loc("optimizer_state[1][0].nu.model.layers.self_attn.o_proj.lora_B")
#loc53 = loc("optimizer_state[1][0].nu.model.layers.mlp.gate_proj.lora_A")
#loc54 = loc("optimizer_state[1][0].nu.model.layers.mlp.gate_proj.lora_B")
#loc55 = loc("optimizer_state[1][0].nu.model.layers.mlp.up_proj.lora_A")
#loc56 = loc("optimizer_state[1][0].nu.model.layers.mlp.up_proj.lora_B")
#loc57 = loc("optimizer_state[1][0].nu.model.layers.mlp.down_proj.lora_A")
#loc58 = loc("optimizer_state[1][0].nu.model.layers.mlp.down_proj.lora_B")
#loc59 = loc("optimizer_state[1][0].nu.lm_head.lora_A")
#loc60 = loc("optimizer_state[1][0].nu.lm_head.lora_B")
#loc61 = loc("batch['input_ids']")
#loc62 = loc("batch['labels']")
#loc63 = loc("batch['position_ids']")
#loc64 = loc("batch['prompt_length']")
#loc65 = loc("batch['response_length']")
#loc66 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/trainer.py":196:0)
#loc67 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/trainer.py":305:0)
#loc68 = loc("/home/ubuntu/roadrunner-fork/trainers/llama3_alpaca_finetune/pipeline.py":127:0)
#loc72 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/optax/_src/base.py":333:0)
#loc73 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/optax/transforms/_combining.py":75:0)
#loc74 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/trainer.py":215:0)
#loc79 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/optax/tree_utils/_tree_math.py":308:0)
#loc80 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/optax/tree_utils/_tree_math.py":306:0)
#loc81 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/optax/_src/transform.py":284:0)
#loc86 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/optax/_src/numerics.py":142:0)
#loc87 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/optax/_src/transform.py":286:0)
#loc96 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":118:0)
#loc97 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":595:0)
#loc98 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":647:0)
#loc99 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/trainer.py":173:0)
#loc103 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":537:0)
#loc104 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/equinox/_ad.py":1209:0)
#loc105 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/equinox/_ad.py":1214:0)
#loc106 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":604:0)
#loc107 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":609:0)
#loc111 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":404:0)
#loc113 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":417:0)
#loc114 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":259:0)
#loc115 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":611:0)
#loc125 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/trainer.py":184:0)
#loc131 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/trainer.py":490:0)
#loc132 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/trainer.py":491:0)
#loc136 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/trainer.py":497:0)
#loc139 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":543:0)
#loc140 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":536:0)
#loc159 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":419:0)
#loc169 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":482:0)
#loc170 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":544:0)
#loc173 = loc("training_step"(#loc66))
#loc174 = loc("train"(#loc67))
#loc175 = loc("<module>"(#loc68))
#loc180 = loc("update"(#loc72))
#loc181 = loc("update_fn"(#loc73))
#loc182 = loc("training_step"(#loc74))
#loc187 = loc("<lambda>"(#loc79))
#loc188 = loc("tree_update_moment"(#loc80))
#loc189 = loc("update_fn"(#loc81))
#loc194 = loc("safe_increment"(#loc86))
#loc195 = loc("update_fn"(#loc87))
#loc205 = loc("__call__"(#loc96))
#loc206 = loc("__call__"(#loc97))
#loc207 = loc("__call__"(#loc98))
#loc208 = loc("forward"(#loc99))
#loc212 = loc("__call__"(#loc103))
#loc213 = loc("fun_checkpoint"(#loc104))
#loc214 = loc("__call__"(#loc105))
#loc215 = loc("f"(#loc106))
#loc216 = loc("__call__"(#loc107))
#loc220 = loc("__call__"(#loc111))
#loc222 = loc("__call__"(#loc113))
#loc223 = loc("__call__"(#loc114))
#loc224 = loc("__call__"(#loc115))
#loc234 = loc("forward"(#loc125))
#loc240 = loc("_cross_entropy_loss_and_accuracy"(#loc131))
#loc241 = loc("_cross_entropy_loss_and_accuracy"(#loc132))
#loc245 = loc("_cross_entropy_loss_and_accuracy"(#loc136))
#loc248 = loc("__call__"(#loc139))
#loc249 = loc("__call__"(#loc140))
#loc268 = loc("__call__"(#loc159))
#loc278 = loc("__call__"(#loc169))
#loc279 = loc("__call__"(#loc170))
#loc282 = loc(callsite(#loc174 at #loc175))
#loc284 = loc(callsite(#loc173 at #loc174))
#loc286 = loc(callsite(#loc173 at #loc282))
#loc287 = loc(callsite(#loc182 at #loc282))
#loc290 = loc(callsite(#loc208 at #loc284))
#loc292 = loc("jit(training_step)/jit(main)/pjit"(#loc286))
#loc293 = loc(callsite(#loc181 at #loc287))
#loc295 = loc(callsite(#loc208 at #loc286))
#loc297 = loc(callsite(#loc207 at #loc290))
#loc300 = loc(callsite(#loc234 at #loc286))
#loc303 = loc(callsite(#loc181 at #loc293))
#loc305 = loc(callsite(#loc207 at #loc295))
#loc307 = loc(callsite(#loc216 at #loc297))
#loc317 = loc(callsite(#loc240 at #loc300))
#loc318 = loc(callsite(#loc241 at #loc300))
#loc322 = loc(callsite(#loc245 at #loc300))
#loc330 = loc(callsite(#loc180 at #loc303))
#loc332 = loc(callsite(#loc206 at #loc305))
#loc335 = loc(callsite(#loc215 at #loc307))
#loc336 = loc(callsite(#loc216 at #loc305))
#loc337 = loc(callsite(#loc224 at #loc305))
#loc348 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/pjit"(#loc317))
#loc361 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/argmax"(#loc322))
#loc376 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/reduce"(#loc322))
#loc390 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/scatter-add"(#loc318))
#loc392 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/pjit"(#loc317))
#loc406 = loc(callsite(#loc189 at #loc330))
#loc408 = loc(callsite(#loc195 at #loc330))
#loc413 = loc(callsite(#loc205 at #loc332))
#loc416 = loc(callsite(#loc214 at #loc335))
#loc428 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336))
#loc431 = loc(callsite(#loc223 at #loc337))
#loc458 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336))
#loc467 = loc(callsite(#loc188 at #loc406))
#loc469 = loc(callsite(#loc194 at #loc408))
#loc480 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/pjit"(#loc413))
#loc482 = loc(callsite(#loc213 at #loc416))
#loc483 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/integer_pow"(#loc431))
#loc498 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(_take)/pjit"(#loc413))
#loc525 = loc(callsite(#loc187 at #loc467))
#loc529 = loc("jit(training_step)/jit(main)/pjit"(#loc469))
#loc535 = loc(callsite(#loc212 at #loc482))
#loc536 = loc(callsite(#loc248 at #loc482))
#loc537 = loc(callsite(#loc249 at #loc482))
#loc547 = loc(callsite(#loc279 at #loc482))
#loc552 = loc("jit(training_step)/jit(main)/integer_pow"(#loc525))
#loc562 = loc(callsite(#loc220 at #loc535))
#loc564 = loc(callsite(#loc222 at #loc535))
#loc567 = loc(callsite(#loc223 at #loc537))
#loc592 = loc(callsite(#loc268 at #loc535))
#loc606 = loc(callsite(#loc223 at #loc536))
#loc611 = loc(callsite(#loc278 at #loc547))
#loc622 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/pjit"(#loc562))
#loc625 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/pjit"(#loc564))
#loc683 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/pjit"(#loc564))
#loc724 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/pjit"(#loc611))
#loc739 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/integer_pow"(#loc567))
#loc803 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/pjit"(#loc562))
#loc806 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/pjit"(#loc564))
#loc814 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/integer_pow"(#loc592))
#loc825 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/integer_pow"(#loc606))
#loc843 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/pjit"(#loc611))
module @jit_training_step attributes {mhlo.num_partitions = 2 : i32, mhlo.num_replicas = 1 : i32} {
  func.func public @main(%arg0: tensor<8x32xi32> {mhlo.sharding = "{replicated}"} loc("model_params.model.embed_tokens.weight"), %arg1: tensor<8x32xi32> {mhlo.sharding = "{replicated}"} loc("model_params.model.layers.self_attn.q_proj.weight"), %arg2: tensor<8x32xi32> {mhlo.sharding = "{replicated}"} loc("model_params.model.layers.self_attn.q_proj.lora_A"), %arg3: tensor<128256x2048xf32> {mhlo.sharding = "{devices=[2,1]<=[2]}"} loc("model_params.model.layers.self_attn.k_proj.lora_A"), %arg4: tensor<16x2048x2048xbf16> {mhlo.sharding = "{devices=[1,2,1]<=[2]}"} loc("model_params.model.layers.self_attn.k_proj.lora_B"), %arg5: tensor<16x2048x16xbf16> loc("model_params.model.layers.self_attn.v_proj.weight"), %arg6: tensor<16x16x2048xbf16> loc("model_params.model.layers.self_attn.v_proj.lora_A"), %arg7: tensor<16x512x2048xbf16> {mhlo.sharding = "{devices=[1,2,1]<=[2]}"} loc("model_params.model.layers.self_attn.v_proj.lora_B"), %arg8: tensor<16x2048x16xbf16> loc("model_params.model.layers.self_attn.o_proj.weight"), %arg9: tensor<16x16x512xbf16> loc("model_params.model.layers.self_attn.o_proj.lora_A"), %arg10: tensor<16x512x2048xbf16> {mhlo.sharding = "{devices=[1,2,1]<=[2]}"} loc("model_params.model.layers.self_attn.o_proj.lora_B"), %arg11: tensor<16x2048x16xbf16> loc("model_params.model.layers.self_attn.rotary_emb.inv_freq"), %arg12: tensor<16x16x512xbf16> loc("model_params.model.layers.mlp.gate_proj.weight"), %arg13: tensor<16x2048x2048xbf16> {mhlo.sharding = "{devices=[1,2,1]<=[2]}"} loc("model_params.model.layers.mlp.gate_proj.lora_A"), %arg14: tensor<16x2048x16xbf16> loc("model_params.model.layers.mlp.gate_proj.lora_B"), %arg15: tensor<16x16x2048xbf16> loc("model_params.model.layers.mlp.up_proj.weight"), %arg16: tensor<16x32xf32> loc("model_params.model.layers.mlp.up_proj.lora_A"), %arg17: tensor<16x8192x2048xbf16> {mhlo.sharding = "{devices=[1,2,1]<=[2]}"} loc("model_params.model.layers.mlp.up_proj.lora_B"), %arg18: tensor<16x2048x16xbf16> loc("model_params.model.layers.mlp.down_proj.weight"), %arg19: tensor<16x16x8192xbf16> loc("model_params.model.layers.mlp.down_proj.lora_A"), %arg20: tensor<16x8192x2048xbf16> {mhlo.sharding = "{devices=[1,2,1]<=[2]}"} loc("model_params.model.layers.mlp.down_proj.lora_B"), %arg21: tensor<16x2048x16xbf16> loc("model_params.model.layers.input_layernorm.weight"), %arg22: tensor<16x16x8192xbf16> loc("model_params.model.layers.post_attention_layernorm.weight"), %arg23: tensor<16x2048x8192xbf16> {mhlo.sharding = "{devices=[1,2,1]<=[2]}"} loc("model_params.model.norm.weight"), %arg24: tensor<16x8192x16xbf16> loc("model_params.lm_head.weight"), %arg25: tensor<16x16x2048xbf16> loc("model_params.lm_head.lora_A"), %arg26: tensor<16x2048xf32> {mhlo.sharding = "{replicated}"} loc("model_params.lm_head.lora_B"), %arg27: tensor<16x2048xf32> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].count"), %arg28: tensor<2048xf32> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].mu.model.layers.self_attn.q_proj.lora_A"), %arg29: tensor<128256x2048xbf16> {mhlo.sharding = "{devices=[2,1]<=[2]}"} loc("optimizer_state[1][0].mu.model.layers.self_attn.q_proj.lora_B"), %arg30: tensor<2048x16xbf16> loc("optimizer_state[1][0].mu.model.layers.self_attn.k_proj.lora_A"), %arg31: tensor<16x128256xbf16> loc("optimizer_state[1][0].mu.model.layers.self_attn.k_proj.lora_B"), %arg32: tensor<i32> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].mu.model.layers.self_attn.v_proj.lora_A"), %arg33: tensor<16x2048x16xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].mu.model.layers.self_attn.v_proj.lora_B"), %arg34: tensor<16x16x2048xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].mu.model.layers.self_attn.o_proj.lora_A"), %arg35: tensor<16x2048x16xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].mu.model.layers.self_attn.o_proj.lora_B"), %arg36: tensor<16x16x512xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].mu.model.layers.mlp.gate_proj.lora_A"), %arg37: tensor<16x2048x16xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].mu.model.layers.mlp.gate_proj.lora_B"), %arg38: tensor<16x16x512xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].mu.model.layers.mlp.up_proj.lora_A"), %arg39: tensor<16x2048x16xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].mu.model.layers.mlp.up_proj.lora_B"), %arg40: tensor<16x16x2048xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].mu.model.layers.mlp.down_proj.lora_A"), %arg41: tensor<16x2048x16xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].mu.model.layers.mlp.down_proj.lora_B"), %arg42: tensor<16x16x8192xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].mu.lm_head.lora_A"), %arg43: tensor<16x2048x16xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].mu.lm_head.lora_B"), %arg44: tensor<16x16x8192xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].nu.model.layers.self_attn.q_proj.lora_A"), %arg45: tensor<16x8192x16xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].nu.model.layers.self_attn.q_proj.lora_B"), %arg46: tensor<16x16x2048xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].nu.model.layers.self_attn.k_proj.lora_A"), %arg47: tensor<2048x16xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].nu.model.layers.self_attn.k_proj.lora_B"), %arg48: tensor<16x128256xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].nu.model.layers.self_attn.v_proj.lora_A"), %arg49: tensor<16x2048x16xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].nu.model.layers.self_attn.v_proj.lora_B"), %arg50: tensor<16x16x2048xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].nu.model.layers.self_attn.o_proj.lora_A"), %arg51: tensor<16x2048x16xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].nu.model.layers.self_attn.o_proj.lora_B"), %arg52: tensor<16x16x512xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].nu.model.layers.mlp.gate_proj.lora_A"), %arg53: tensor<16x2048x16xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].nu.model.layers.mlp.gate_proj.lora_B"), %arg54: tensor<16x16x512xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].nu.model.layers.mlp.up_proj.lora_A"), %arg55: tensor<16x2048x16xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].nu.model.layers.mlp.up_proj.lora_B"), %arg56: tensor<16x16x2048xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].nu.model.layers.mlp.down_proj.lora_A"), %arg57: tensor<16x2048x16xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].nu.model.layers.mlp.down_proj.lora_B"), %arg58: tensor<16x16x8192xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].nu.lm_head.lora_A"), %arg59: tensor<16x2048x16xbf16> {mhlo.sharding = "{replicated}"} loc("optimizer_state[1][0].nu.lm_head.lora_B"), %arg60: tensor<16x16x8192xbf16> {mhlo.sharding = "{replicated}"} loc("batch['input_ids']"), %arg61: tensor<16x8192x16xbf16> {mhlo.sharding = "{replicated}"} loc("batch['labels']"), %arg62: tensor<16x16x2048xbf16> {mhlo.sharding = "{replicated}"} loc("batch['position_ids']"), %arg63: tensor<2048x16xbf16> {mhlo.sharding = "{replicated}"} loc("batch['prompt_length']"), %arg64: tensor<16x128256xbf16> {mhlo.sharding = "{replicated}"} loc("batch['response_length']")) -> (tensor<f32> {jax.result_info = "[0]"}, tensor<f32> {jax.result_info = "[1][0]"}, tensor<128256x2048xf32> {jax.result_info = "[1][1].model.embed_tokens.weight"}, tensor<16x2048x2048xbf16> {jax.result_info = "[1][1].model.layers.self_attn.q_proj.weight"}, tensor<16x2048x16xbf16> {jax.result_info = "[1][1].model.layers.self_attn.q_proj.lora_A"}, tensor<16x16x2048xbf16> {jax.result_info = "[1][1].model.layers.self_attn.q_proj.lora_B"}, tensor<16x512x2048xbf16> {jax.result_info = "[1][1].model.layers.self_attn.k_proj.weight"}, tensor<16x2048x16xbf16> {jax.result_info = "[1][1].model.layers.self_attn.k_proj.lora_A"}, tensor<16x16x512xbf16> {jax.result_info = "[1][1].model.layers.self_attn.k_proj.lora_B"}, tensor<16x512x2048xbf16> {jax.result_info = "[1][1].model.layers.self_attn.v_proj.weight"}, tensor<16x2048x16xbf16> {jax.result_info = "[1][1].model.layers.self_attn.v_proj.lora_A"}, tensor<16x16x512xbf16> {jax.result_info = "[1][1].model.layers.self_attn.v_proj.lora_B"}, tensor<16x2048x2048xbf16> {jax.result_info = "[1][1].model.layers.self_attn.o_proj.weight"}, tensor<16x2048x16xbf16> {jax.result_info = "[1][1].model.layers.self_attn.o_proj.lora_A"}, tensor<16x16x2048xbf16> {jax.result_info = "[1][1].model.layers.self_attn.o_proj.lora_B"}, tensor<16x32xf32> {jax.result_info = "[1][1].model.layers.self_attn.rotary_emb.inv_freq"}, tensor<16x8192x2048xbf16> {jax.result_info = "[1][1].model.layers.mlp.gate_proj.weight"}, tensor<16x2048x16xbf16> {jax.result_info = "[1][1].model.layers.mlp.gate_proj.lora_A"}, tensor<16x16x8192xbf16> {jax.result_info = "[1][1].model.layers.mlp.gate_proj.lora_B"}, tensor<16x8192x2048xbf16> {jax.result_info = "[1][1].model.layers.mlp.up_proj.weight"}, tensor<16x2048x16xbf16> {jax.result_info = "[1][1].model.layers.mlp.up_proj.lora_A"}, tensor<16x16x8192xbf16> {jax.result_info = "[1][1].model.layers.mlp.up_proj.lora_B"}, tensor<16x2048x8192xbf16> {jax.result_info = "[1][1].model.layers.mlp.down_proj.weight"}, tensor<16x8192x16xbf16> {jax.result_info = "[1][1].model.layers.mlp.down_proj.lora_A"}, tensor<16x16x2048xbf16> {jax.result_info = "[1][1].model.layers.mlp.down_proj.lora_B"}, tensor<16x2048xf32> {jax.result_info = "[1][1].model.layers.input_layernorm.weight"}, tensor<16x2048xf32> {jax.result_info = "[1][1].model.layers.post_attention_layernorm.weight"}, tensor<2048xf32> {jax.result_info = "[1][1].model.norm.weight"}, tensor<128256x2048xbf16> {jax.result_info = "[1][1].lm_head.weight"}, tensor<2048x16xbf16> {jax.result_info = "[1][1].lm_head.lora_A"}, tensor<16x128256xbf16> {jax.result_info = "[1][1].lm_head.lora_B"}, tensor<i32> {jax.result_info = "[1][2][1][0].count"}, tensor<16x2048x16xbf16> {jax.result_info = "[1][2][1][0].mu.model.layers.self_attn.q_proj.lora_A"}, tensor<16x16x2048xbf16> {jax.result_info = "[1][2][1][0].mu.model.layers.self_attn.q_proj.lora_B"}, tensor<16x2048x16xbf16> {jax.result_info = "[1][2][1][0].mu.model.layers.self_attn.k_proj.lora_A"}, tensor<16x16x512xbf16> {jax.result_info = "[1][2][1][0].mu.model.layers.self_attn.k_proj.lora_B"}, tensor<16x2048x16xbf16> {jax.result_info = "[1][2][1][0].mu.model.layers.self_attn.v_proj.lora_A"}, tensor<16x16x512xbf16> {jax.result_info = "[1][2][1][0].mu.model.layers.self_attn.v_proj.lora_B"}, tensor<16x2048x16xbf16> {jax.result_info = "[1][2][1][0].mu.model.layers.self_attn.o_proj.lora_A"}, tensor<16x16x2048xbf16> {jax.result_info = "[1][2][1][0].mu.model.layers.self_attn.o_proj.lora_B"}, tensor<16x2048x16xbf16> {jax.result_info = "[1][2][1][0].mu.model.layers.mlp.gate_proj.lora_A"}, tensor<16x16x8192xbf16> {jax.result_info = "[1][2][1][0].mu.model.layers.mlp.gate_proj.lora_B"}, tensor<16x2048x16xbf16> {jax.result_info = "[1][2][1][0].mu.model.layers.mlp.up_proj.lora_A"}, tensor<16x16x8192xbf16> {jax.result_info = "[1][2][1][0].mu.model.layers.mlp.up_proj.lora_B"}, tensor<16x8192x16xbf16> {jax.result_info = "[1][2][1][0].mu.model.layers.mlp.down_proj.lora_A"}, tensor<16x16x2048xbf16> {jax.result_info = "[1][2][1][0].mu.model.layers.mlp.down_proj.lora_B"}, tensor<2048x16xbf16> {jax.result_info = "[1][2][1][0].mu.lm_head.lora_A"}, tensor<16x128256xbf16> {jax.result_info = "[1][2][1][0].mu.lm_head.lora_B"}, tensor<16x2048x16xbf16> {jax.result_info = "[1][2][1][0].nu.model.layers.self_attn.q_proj.lora_A"}, tensor<16x16x2048xbf16> {jax.result_info = "[1][2][1][0].nu.model.layers.self_attn.q_proj.lora_B"}, tensor<16x2048x16xbf16> {jax.result_info = "[1][2][1][0].nu.model.layers.self_attn.k_proj.lora_A"}, tensor<16x16x512xbf16> {jax.result_info = "[1][2][1][0].nu.model.layers.self_attn.k_proj.lora_B"}, tensor<16x2048x16xbf16> {jax.result_info = "[1][2][1][0].nu.model.layers.self_attn.v_proj.lora_A"}, tensor<16x16x512xbf16> {jax.result_info = "[1][2][1][0].nu.model.layers.self_attn.v_proj.lora_B"}, tensor<16x2048x16xbf16> {jax.result_info = "[1][2][1][0].nu.model.layers.self_attn.o_proj.lora_A"}, tensor<16x16x2048xbf16> {jax.result_info = "[1][2][1][0].nu.model.layers.self_attn.o_proj.lora_B"}, tensor<16x2048x16xbf16> {jax.result_info = "[1][2][1][0].nu.model.layers.mlp.gate_proj.lora_A"}, tensor<16x16x8192xbf16> {jax.result_info = "[1][2][1][0].nu.model.layers.mlp.gate_proj.lora_B"}, tensor<16x2048x16xbf16> {jax.result_info = "[1][2][1][0].nu.model.layers.mlp.up_proj.lora_A"}, tensor<16x16x8192xbf16> {jax.result_info = "[1][2][1][0].nu.model.layers.mlp.up_proj.lora_B"}, tensor<16x8192x16xbf16> {jax.result_info = "[1][2][1][0].nu.model.layers.mlp.down_proj.lora_A"}, tensor<16x16x2048xbf16> {jax.result_info = "[1][2][1][0].nu.model.layers.mlp.down_proj.lora_B"}, tensor<2048x16xbf16> {jax.result_info = "[1][2][1][0].nu.lm_head.lora_A"}, tensor<16x128256xbf16> {jax.result_info = "[1][2][1][0].nu.lm_head.lora_B"}) {
    %0:16 = call @forward(%arg3, %arg4, %arg5, %arg6, %arg7, %arg8, %arg9, %arg10, %arg11, %arg12, %arg13, %arg14, %arg15, %arg16, %arg17, %arg18, %arg19, %arg20, %arg21, %arg22, %arg23, %arg24, %arg25, %arg26, %arg27, %arg28, %arg29, %arg30, %arg31, %arg0, %arg1, %arg2) : (tensor<128256x2048xf32>, tensor<16x2048x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x512x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x512x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x2048x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x32xf32>, tensor<16x8192x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x8192x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x2048x8192xbf16>, tensor<16x8192x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x2048xf32>, tensor<16x2048xf32>, tensor<2048xf32>, tensor<128256x2048xbf16>, tensor<2048x16xbf16>, tensor<16x128256xbf16>, tensor<8x32xi32>, tensor<8x32xi32>, tensor<8x32xi32>) -> (tensor<f32>, tensor<f32>, tensor<1x1x2048xbf16>, tensor<16x8x32x2048xbf16>, tensor<8x32x1xbf16>, tensor<8x32x2048xbf16>, tensor<8x32x2048xbf16>, tensor<8x32x1xbf16>, tensor<2048x128256xbf16>, tensor<8x32x2048xbf16>, tensor<8x32x16xbf16>, tensor<248x128256xf32>, tensor<248x1xf32>, tensor<248x2xi32>, tensor<248xf32>, tensor<8xf32>) loc(#loc292)
    %cst = stablehlo.constant dense<1.000000e+00> : tensor<f32> loc(#loc)
    %1:16 = call @forward_2(%0#2, %arg2, %arg26, %arg4, %arg5, %arg6, %arg7, %arg8, %arg9, %arg10, %arg11, %arg12, %arg16, %arg13, %arg14, %arg15, %arg27, %arg17, %arg18, %arg19, %arg20, %arg21, %arg22, %arg23, %arg24, %arg25, %0#3, %0#4, %0#5, %0#6, %0#7, %0#8, %0#9, %arg30, %arg31, %0#10, %0#11, %0#12, %0#13, %0#14, %0#15, %cst) : (tensor<1x1x2048xbf16>, tensor<8x32xi32>, tensor<16x2048xf32>, tensor<16x2048x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x512x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x512x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x32xf32>, tensor<16x2048x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x2048xf32>, tensor<16x8192x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x8192x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x2048x8192xbf16>, tensor<16x8192x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x8x32x2048xbf16>, tensor<8x32x1xbf16>, tensor<8x32x2048xbf16>, tensor<8x32x2048xbf16>, tensor<8x32x1xbf16>, tensor<2048x128256xbf16>, tensor<8x32x2048xbf16>, tensor<2048x16xbf16>, tensor<16x128256xbf16>, tensor<8x32x16xbf16>, tensor<248x128256xf32>, tensor<248x1xf32>, tensor<248x2xi32>, tensor<248xf32>, tensor<8xf32>, tensor<f32>) -> (tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x8192x16xbf16>, tensor<16x16x2048xbf16>, tensor<2048x16xbf16>, tensor<16x128256xbf16>) loc(#loc292)
    %2 = stablehlo.multiply %1#0, %1#0 : tensor<16x2048x16xbf16> loc(#loc551)
    %3 = stablehlo.convert %2 : (tensor<16x2048x16xbf16>) -> tensor<16x2048x16xf32> loc(#loc523)
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc524)
    %4 = stablehlo.reduce(%3 init: %cst_0) applies stablehlo.add across dimensions = [0, 1, 2] : (tensor<16x2048x16xf32>, tensor<f32>) -> tensor<f32> loc(#loc524)
    %5 = stablehlo.convert %4 : (tensor<f32>) -> tensor<bf16> loc(#loc523)
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc)
    %6 = stablehlo.add %cst_1, %5 : tensor<bf16> loc(#loc462)
    %7 = stablehlo.multiply %1#1, %1#1 : tensor<16x16x2048xbf16> loc(#loc551)
    %8 = stablehlo.convert %7 : (tensor<16x16x2048xbf16>) -> tensor<16x16x2048xf32> loc(#loc523)
    %cst_2 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc524)
    %9 = stablehlo.reduce(%8 init: %cst_2) applies stablehlo.add across dimensions = [0, 1, 2] : (tensor<16x16x2048xf32>, tensor<f32>) -> tensor<f32> loc(#loc524)
    %10 = stablehlo.convert %9 : (tensor<f32>) -> tensor<bf16> loc(#loc523)
    %11 = stablehlo.add %6, %10 : tensor<bf16> loc(#loc462)
    %12 = stablehlo.multiply %1#2, %1#2 : tensor<16x2048x16xbf16> loc(#loc551)
    %13 = stablehlo.convert %12 : (tensor<16x2048x16xbf16>) -> tensor<16x2048x16xf32> loc(#loc523)
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc524)
    %14 = stablehlo.reduce(%13 init: %cst_3) applies stablehlo.add across dimensions = [0, 1, 2] : (tensor<16x2048x16xf32>, tensor<f32>) -> tensor<f32> loc(#loc524)
    %15 = stablehlo.convert %14 : (tensor<f32>) -> tensor<bf16> loc(#loc523)
    %16 = stablehlo.add %11, %15 : tensor<bf16> loc(#loc462)
    %17 = stablehlo.multiply %1#3, %1#3 : tensor<16x16x512xbf16> loc(#loc551)
    %18 = stablehlo.convert %17 : (tensor<16x16x512xbf16>) -> tensor<16x16x512xf32> loc(#loc523)
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc524)
    %19 = stablehlo.reduce(%18 init: %cst_4) applies stablehlo.add across dimensions = [0, 1, 2] : (tensor<16x16x512xf32>, tensor<f32>) -> tensor<f32> loc(#loc524)
    %20 = stablehlo.convert %19 : (tensor<f32>) -> tensor<bf16> loc(#loc523)
    %21 = stablehlo.add %16, %20 : tensor<bf16> loc(#loc462)
    %22 = stablehlo.multiply %1#4, %1#4 : tensor<16x2048x16xbf16> loc(#loc551)
    %23 = stablehlo.convert %22 : (tensor<16x2048x16xbf16>) -> tensor<16x2048x16xf32> loc(#loc523)
    %cst_5 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc524)
    %24 = stablehlo.reduce(%23 init: %cst_5) applies stablehlo.add across dimensions = [0, 1, 2] : (tensor<16x2048x16xf32>, tensor<f32>) -> tensor<f32> loc(#loc524)
    %25 = stablehlo.convert %24 : (tensor<f32>) -> tensor<bf16> loc(#loc523)
    %26 = stablehlo.add %21, %25 : tensor<bf16> loc(#loc462)
    %27 = stablehlo.multiply %1#5, %1#5 : tensor<16x16x512xbf16> loc(#loc551)
    %28 = stablehlo.convert %27 : (tensor<16x16x512xbf16>) -> tensor<16x16x512xf32> loc(#loc523)
    %cst_6 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc524)
    %29 = stablehlo.reduce(%28 init: %cst_6) applies stablehlo.add across dimensions = [0, 1, 2] : (tensor<16x16x512xf32>, tensor<f32>) -> tensor<f32> loc(#loc524)
    %30 = stablehlo.convert %29 : (tensor<f32>) -> tensor<bf16> loc(#loc523)
    %31 = stablehlo.add %26, %30 : tensor<bf16> loc(#loc462)
    %32 = stablehlo.multiply %1#6, %1#6 : tensor<16x2048x16xbf16> loc(#loc551)
    %33 = stablehlo.convert %32 : (tensor<16x2048x16xbf16>) -> tensor<16x2048x16xf32> loc(#loc523)
    %cst_7 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc524)
    %34 = stablehlo.reduce(%33 init: %cst_7) applies stablehlo.add across dimensions = [0, 1, 2] : (tensor<16x2048x16xf32>, tensor<f32>) -> tensor<f32> loc(#loc524)
    %35 = stablehlo.convert %34 : (tensor<f32>) -> tensor<bf16> loc(#loc523)
    %36 = stablehlo.add %31, %35 : tensor<bf16> loc(#loc462)
    %37 = stablehlo.multiply %1#7, %1#7 : tensor<16x16x2048xbf16> loc(#loc551)
    %38 = stablehlo.convert %37 : (tensor<16x16x2048xbf16>) -> tensor<16x16x2048xf32> loc(#loc523)
    %cst_8 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc524)
    %39 = stablehlo.reduce(%38 init: %cst_8) applies stablehlo.add across dimensions = [0, 1, 2] : (tensor<16x16x2048xf32>, tensor<f32>) -> tensor<f32> loc(#loc524)
    %40 = stablehlo.convert %39 : (tensor<f32>) -> tensor<bf16> loc(#loc523)
    %41 = stablehlo.add %36, %40 : tensor<bf16> loc(#loc462)
    %42 = stablehlo.multiply %1#8, %1#8 : tensor<16x2048x16xbf16> loc(#loc551)
    %43 = stablehlo.convert %42 : (tensor<16x2048x16xbf16>) -> tensor<16x2048x16xf32> loc(#loc523)
    %cst_9 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc524)
    %44 = stablehlo.reduce(%43 init: %cst_9) applies stablehlo.add across dimensions = [0, 1, 2] : (tensor<16x2048x16xf32>, tensor<f32>) -> tensor<f32> loc(#loc524)
    %45 = stablehlo.convert %44 : (tensor<f32>) -> tensor<bf16> loc(#loc523)
    %46 = stablehlo.add %41, %45 : tensor<bf16> loc(#loc462)
    %47 = stablehlo.multiply %1#9, %1#9 : tensor<16x16x8192xbf16> loc(#loc551)
    %48 = stablehlo.convert %47 : (tensor<16x16x8192xbf16>) -> tensor<16x16x8192xf32> loc(#loc523)
    %cst_10 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc524)
    %49 = stablehlo.reduce(%48 init: %cst_10) applies stablehlo.add across dimensions = [0, 1, 2] : (tensor<16x16x8192xf32>, tensor<f32>) -> tensor<f32> loc(#loc524)
    %50 = stablehlo.convert %49 : (tensor<f32>) -> tensor<bf16> loc(#loc523)
    %51 = stablehlo.add %46, %50 : tensor<bf16> loc(#loc462)
    %52 = stablehlo.multiply %1#10, %1#10 : tensor<16x2048x16xbf16> loc(#loc551)
    %53 = stablehlo.convert %52 : (tensor<16x2048x16xbf16>) -> tensor<16x2048x16xf32> loc(#loc523)
    %cst_11 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc524)
    %54 = stablehlo.reduce(%53 init: %cst_11) applies stablehlo.add across dimensions = [0, 1, 2] : (tensor<16x2048x16xf32>, tensor<f32>) -> tensor<f32> loc(#loc524)
    %55 = stablehlo.convert %54 : (tensor<f32>) -> tensor<bf16> loc(#loc523)
    %56 = stablehlo.add %51, %55 : tensor<bf16> loc(#loc462)
    %57 = stablehlo.multiply %1#11, %1#11 : tensor<16x16x8192xbf16> loc(#loc551)
    %58 = stablehlo.convert %57 : (tensor<16x16x8192xbf16>) -> tensor<16x16x8192xf32> loc(#loc523)
    %cst_12 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc524)
    %59 = stablehlo.reduce(%58 init: %cst_12) applies stablehlo.add across dimensions = [0, 1, 2] : (tensor<16x16x8192xf32>, tensor<f32>) -> tensor<f32> loc(#loc524)
    %60 = stablehlo.convert %59 : (tensor<f32>) -> tensor<bf16> loc(#loc523)
    %61 = stablehlo.add %56, %60 : tensor<bf16> loc(#loc462)
    %62 = stablehlo.multiply %1#12, %1#12 : tensor<16x8192x16xbf16> loc(#loc551)
    %63 = stablehlo.convert %62 : (tensor<16x8192x16xbf16>) -> tensor<16x8192x16xf32> loc(#loc523)
    %cst_13 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc524)
    %64 = stablehlo.reduce(%63 init: %cst_13) applies stablehlo.add across dimensions = [0, 1, 2] : (tensor<16x8192x16xf32>, tensor<f32>) -> tensor<f32> loc(#loc524)
    %65 = stablehlo.convert %64 : (tensor<f32>) -> tensor<bf16> loc(#loc523)
    %66 = stablehlo.add %61, %65 : tensor<bf16> loc(#loc462)
    %67 = stablehlo.multiply %1#13, %1#13 : tensor<16x16x2048xbf16> loc(#loc551)
    %68 = stablehlo.convert %67 : (tensor<16x16x2048xbf16>) -> tensor<16x16x2048xf32> loc(#loc523)
    %cst_14 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc524)
    %69 = stablehlo.reduce(%68 init: %cst_14) applies stablehlo.add across dimensions = [0, 1, 2] : (tensor<16x16x2048xf32>, tensor<f32>) -> tensor<f32> loc(#loc524)
    %70 = stablehlo.convert %69 : (tensor<f32>) -> tensor<bf16> loc(#loc523)
    %71 = stablehlo.add %66, %70 : tensor<bf16> loc(#loc462)
    %72 = stablehlo.multiply %1#14, %1#14 : tensor<2048x16xbf16> loc(#loc551)
    %73 = stablehlo.convert %72 : (tensor<2048x16xbf16>) -> tensor<2048x16xf32> loc(#loc523)
    %cst_15 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc524)
    %74 = stablehlo.reduce(%73 init: %cst_15) applies stablehlo.add across dimensions = [0, 1] : (tensor<2048x16xf32>, tensor<f32>) -> tensor<f32> loc(#loc524)
    %75 = stablehlo.convert %74 : (tensor<f32>) -> tensor<bf16> loc(#loc523)
    %76 = stablehlo.add %71, %75 : tensor<bf16> loc(#loc462)
    %77 = stablehlo.multiply %1#15, %1#15 : tensor<16x128256xbf16> loc(#loc551)
    %78 = stablehlo.convert %77 : (tensor<16x128256xbf16>) -> tensor<16x128256xf32> loc(#loc523)
    %cst_16 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc524)
    %79 = stablehlo.reduce(%78 init: %cst_16) applies stablehlo.add across dimensions = [0, 1] : (tensor<16x128256xf32>, tensor<f32>) -> tensor<f32> loc(#loc524)
    %80 = stablehlo.convert %79 : (tensor<f32>) -> tensor<bf16> loc(#loc523)
    %81 = stablehlo.add %76, %80 : tensor<bf16> loc(#loc462)
    %82 = stablehlo.sqrt %81 : tensor<bf16> loc(#loc463)
    %cst_17 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %83 = stablehlo.compare  LT, %82, %cst_17,  FLOAT : (tensor<bf16>, tensor<bf16>) -> tensor<i1> loc(#loc404)
    %84 = stablehlo.broadcast_in_dim %82, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc464)
    %85 = stablehlo.divide %1#0, %84 : tensor<16x2048x16xbf16> loc(#loc464)
    %cst_18 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %86 = stablehlo.broadcast_in_dim %cst_18, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc465)
    %87 = stablehlo.multiply %85, %86 : tensor<16x2048x16xbf16> loc(#loc465)
    %88 = stablehlo.select %83, %1#0, %87 : tensor<i1>, tensor<16x2048x16xbf16> loc(#loc466)
    %89 = stablehlo.broadcast_in_dim %82, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc464)
    %90 = stablehlo.divide %1#1, %89 : tensor<16x16x2048xbf16> loc(#loc464)
    %cst_19 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %91 = stablehlo.broadcast_in_dim %cst_19, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc465)
    %92 = stablehlo.multiply %90, %91 : tensor<16x16x2048xbf16> loc(#loc465)
    %93 = stablehlo.select %83, %1#1, %92 : tensor<i1>, tensor<16x16x2048xbf16> loc(#loc466)
    %94 = stablehlo.broadcast_in_dim %82, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc464)
    %95 = stablehlo.divide %1#2, %94 : tensor<16x2048x16xbf16> loc(#loc464)
    %cst_20 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %96 = stablehlo.broadcast_in_dim %cst_20, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc465)
    %97 = stablehlo.multiply %95, %96 : tensor<16x2048x16xbf16> loc(#loc465)
    %98 = stablehlo.select %83, %1#2, %97 : tensor<i1>, tensor<16x2048x16xbf16> loc(#loc466)
    %99 = stablehlo.broadcast_in_dim %82, dims = [] : (tensor<bf16>) -> tensor<16x16x512xbf16> loc(#loc464)
    %100 = stablehlo.divide %1#3, %99 : tensor<16x16x512xbf16> loc(#loc464)
    %cst_21 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %101 = stablehlo.broadcast_in_dim %cst_21, dims = [] : (tensor<bf16>) -> tensor<16x16x512xbf16> loc(#loc465)
    %102 = stablehlo.multiply %100, %101 : tensor<16x16x512xbf16> loc(#loc465)
    %103 = stablehlo.select %83, %1#3, %102 : tensor<i1>, tensor<16x16x512xbf16> loc(#loc466)
    %104 = stablehlo.broadcast_in_dim %82, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc464)
    %105 = stablehlo.divide %1#4, %104 : tensor<16x2048x16xbf16> loc(#loc464)
    %cst_22 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %106 = stablehlo.broadcast_in_dim %cst_22, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc465)
    %107 = stablehlo.multiply %105, %106 : tensor<16x2048x16xbf16> loc(#loc465)
    %108 = stablehlo.select %83, %1#4, %107 : tensor<i1>, tensor<16x2048x16xbf16> loc(#loc466)
    %109 = stablehlo.broadcast_in_dim %82, dims = [] : (tensor<bf16>) -> tensor<16x16x512xbf16> loc(#loc464)
    %110 = stablehlo.divide %1#5, %109 : tensor<16x16x512xbf16> loc(#loc464)
    %cst_23 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %111 = stablehlo.broadcast_in_dim %cst_23, dims = [] : (tensor<bf16>) -> tensor<16x16x512xbf16> loc(#loc465)
    %112 = stablehlo.multiply %110, %111 : tensor<16x16x512xbf16> loc(#loc465)
    %113 = stablehlo.select %83, %1#5, %112 : tensor<i1>, tensor<16x16x512xbf16> loc(#loc466)
    %114 = stablehlo.broadcast_in_dim %82, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc464)
    %115 = stablehlo.divide %1#6, %114 : tensor<16x2048x16xbf16> loc(#loc464)
    %cst_24 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %116 = stablehlo.broadcast_in_dim %cst_24, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc465)
    %117 = stablehlo.multiply %115, %116 : tensor<16x2048x16xbf16> loc(#loc465)
    %118 = stablehlo.select %83, %1#6, %117 : tensor<i1>, tensor<16x2048x16xbf16> loc(#loc466)
    %119 = stablehlo.broadcast_in_dim %82, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc464)
    %120 = stablehlo.divide %1#7, %119 : tensor<16x16x2048xbf16> loc(#loc464)
    %cst_25 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %121 = stablehlo.broadcast_in_dim %cst_25, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc465)
    %122 = stablehlo.multiply %120, %121 : tensor<16x16x2048xbf16> loc(#loc465)
    %123 = stablehlo.select %83, %1#7, %122 : tensor<i1>, tensor<16x16x2048xbf16> loc(#loc466)
    %124 = stablehlo.broadcast_in_dim %82, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc464)
    %125 = stablehlo.divide %1#8, %124 : tensor<16x2048x16xbf16> loc(#loc464)
    %cst_26 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %126 = stablehlo.broadcast_in_dim %cst_26, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc465)
    %127 = stablehlo.multiply %125, %126 : tensor<16x2048x16xbf16> loc(#loc465)
    %128 = stablehlo.select %83, %1#8, %127 : tensor<i1>, tensor<16x2048x16xbf16> loc(#loc466)
    %129 = stablehlo.broadcast_in_dim %82, dims = [] : (tensor<bf16>) -> tensor<16x16x8192xbf16> loc(#loc464)
    %130 = stablehlo.divide %1#9, %129 : tensor<16x16x8192xbf16> loc(#loc464)
    %cst_27 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %131 = stablehlo.broadcast_in_dim %cst_27, dims = [] : (tensor<bf16>) -> tensor<16x16x8192xbf16> loc(#loc465)
    %132 = stablehlo.multiply %130, %131 : tensor<16x16x8192xbf16> loc(#loc465)
    %133 = stablehlo.select %83, %1#9, %132 : tensor<i1>, tensor<16x16x8192xbf16> loc(#loc466)
    %134 = stablehlo.broadcast_in_dim %82, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc464)
    %135 = stablehlo.divide %1#10, %134 : tensor<16x2048x16xbf16> loc(#loc464)
    %cst_28 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %136 = stablehlo.broadcast_in_dim %cst_28, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc465)
    %137 = stablehlo.multiply %135, %136 : tensor<16x2048x16xbf16> loc(#loc465)
    %138 = stablehlo.select %83, %1#10, %137 : tensor<i1>, tensor<16x2048x16xbf16> loc(#loc466)
    %139 = stablehlo.broadcast_in_dim %82, dims = [] : (tensor<bf16>) -> tensor<16x16x8192xbf16> loc(#loc464)
    %140 = stablehlo.divide %1#11, %139 : tensor<16x16x8192xbf16> loc(#loc464)
    %cst_29 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %141 = stablehlo.broadcast_in_dim %cst_29, dims = [] : (tensor<bf16>) -> tensor<16x16x8192xbf16> loc(#loc465)
    %142 = stablehlo.multiply %140, %141 : tensor<16x16x8192xbf16> loc(#loc465)
    %143 = stablehlo.select %83, %1#11, %142 : tensor<i1>, tensor<16x16x8192xbf16> loc(#loc466)
    %144 = stablehlo.broadcast_in_dim %82, dims = [] : (tensor<bf16>) -> tensor<16x8192x16xbf16> loc(#loc464)
    %145 = stablehlo.divide %1#12, %144 : tensor<16x8192x16xbf16> loc(#loc464)
    %cst_30 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %146 = stablehlo.broadcast_in_dim %cst_30, dims = [] : (tensor<bf16>) -> tensor<16x8192x16xbf16> loc(#loc465)
    %147 = stablehlo.multiply %145, %146 : tensor<16x8192x16xbf16> loc(#loc465)
    %148 = stablehlo.select %83, %1#12, %147 : tensor<i1>, tensor<16x8192x16xbf16> loc(#loc466)
    %149 = stablehlo.broadcast_in_dim %82, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc464)
    %150 = stablehlo.divide %1#13, %149 : tensor<16x16x2048xbf16> loc(#loc464)
    %cst_31 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %151 = stablehlo.broadcast_in_dim %cst_31, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc465)
    %152 = stablehlo.multiply %150, %151 : tensor<16x16x2048xbf16> loc(#loc465)
    %153 = stablehlo.select %83, %1#13, %152 : tensor<i1>, tensor<16x16x2048xbf16> loc(#loc466)
    %154 = stablehlo.broadcast_in_dim %82, dims = [] : (tensor<bf16>) -> tensor<2048x16xbf16> loc(#loc464)
    %155 = stablehlo.divide %1#14, %154 : tensor<2048x16xbf16> loc(#loc464)
    %cst_32 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %156 = stablehlo.broadcast_in_dim %cst_32, dims = [] : (tensor<bf16>) -> tensor<2048x16xbf16> loc(#loc465)
    %157 = stablehlo.multiply %155, %156 : tensor<2048x16xbf16> loc(#loc465)
    %158 = stablehlo.select %83, %1#14, %157 : tensor<i1>, tensor<2048x16xbf16> loc(#loc466)
    %159 = stablehlo.broadcast_in_dim %82, dims = [] : (tensor<bf16>) -> tensor<16x128256xbf16> loc(#loc464)
    %160 = stablehlo.divide %1#15, %159 : tensor<16x128256xbf16> loc(#loc464)
    %cst_33 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %161 = stablehlo.broadcast_in_dim %cst_33, dims = [] : (tensor<bf16>) -> tensor<16x128256xbf16> loc(#loc465)
    %162 = stablehlo.multiply %160, %161 : tensor<16x128256xbf16> loc(#loc465)
    %163 = stablehlo.select %83, %1#15, %162 : tensor<i1>, tensor<16x128256xbf16> loc(#loc466)
    %164 = call @integer_pow_13(%88) : (tensor<16x2048x16xbf16>) -> tensor<16x2048x16xbf16> loc(#loc552)
    %cst_34 = stablehlo.constant dense<1.000980e-01> : tensor<bf16> loc(#loc)
    %165 = stablehlo.broadcast_in_dim %cst_34, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc553)
    %166 = stablehlo.multiply %165, %164 : tensor<16x2048x16xbf16> loc(#loc553)
    %cst_35 = stablehlo.constant dense<8.984370e-01> : tensor<bf16> loc(#loc)
    %167 = stablehlo.broadcast_in_dim %cst_35, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc553)
    %168 = stablehlo.multiply %167, %arg33 : tensor<16x2048x16xbf16> loc(#loc553)
    %169 = stablehlo.add %166, %168 : tensor<16x2048x16xbf16> loc(#loc554)
    %170 = call @integer_pow_14(%93) : (tensor<16x16x2048xbf16>) -> tensor<16x16x2048xbf16> loc(#loc552)
    %cst_36 = stablehlo.constant dense<1.000980e-01> : tensor<bf16> loc(#loc)
    %171 = stablehlo.broadcast_in_dim %cst_36, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc553)
    %172 = stablehlo.multiply %171, %170 : tensor<16x16x2048xbf16> loc(#loc553)
    %cst_37 = stablehlo.constant dense<8.984370e-01> : tensor<bf16> loc(#loc)
    %173 = stablehlo.broadcast_in_dim %cst_37, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc553)
    %174 = stablehlo.multiply %173, %arg34 : tensor<16x16x2048xbf16> loc(#loc553)
    %175 = stablehlo.add %172, %174 : tensor<16x16x2048xbf16> loc(#loc554)
    %176 = call @integer_pow_15(%98) : (tensor<16x2048x16xbf16>) -> tensor<16x2048x16xbf16> loc(#loc552)
    %cst_38 = stablehlo.constant dense<1.000980e-01> : tensor<bf16> loc(#loc)
    %177 = stablehlo.broadcast_in_dim %cst_38, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc553)
    %178 = stablehlo.multiply %177, %176 : tensor<16x2048x16xbf16> loc(#loc553)
    %cst_39 = stablehlo.constant dense<8.984370e-01> : tensor<bf16> loc(#loc)
    %179 = stablehlo.broadcast_in_dim %cst_39, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc553)
    %180 = stablehlo.multiply %179, %arg35 : tensor<16x2048x16xbf16> loc(#loc553)
    %181 = stablehlo.add %178, %180 : tensor<16x2048x16xbf16> loc(#loc554)
    %182 = call @integer_pow_16(%103) : (tensor<16x16x512xbf16>) -> tensor<16x16x512xbf16> loc(#loc552)
    %cst_40 = stablehlo.constant dense<1.000980e-01> : tensor<bf16> loc(#loc)
    %183 = stablehlo.broadcast_in_dim %cst_40, dims = [] : (tensor<bf16>) -> tensor<16x16x512xbf16> loc(#loc553)
    %184 = stablehlo.multiply %183, %182 : tensor<16x16x512xbf16> loc(#loc553)
    %cst_41 = stablehlo.constant dense<8.984370e-01> : tensor<bf16> loc(#loc)
    %185 = stablehlo.broadcast_in_dim %cst_41, dims = [] : (tensor<bf16>) -> tensor<16x16x512xbf16> loc(#loc553)
    %186 = stablehlo.multiply %185, %arg36 : tensor<16x16x512xbf16> loc(#loc553)
    %187 = stablehlo.add %184, %186 : tensor<16x16x512xbf16> loc(#loc554)
    %188 = call @integer_pow_17(%108) : (tensor<16x2048x16xbf16>) -> tensor<16x2048x16xbf16> loc(#loc552)
    %cst_42 = stablehlo.constant dense<1.000980e-01> : tensor<bf16> loc(#loc)
    %189 = stablehlo.broadcast_in_dim %cst_42, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc553)
    %190 = stablehlo.multiply %189, %188 : tensor<16x2048x16xbf16> loc(#loc553)
    %cst_43 = stablehlo.constant dense<8.984370e-01> : tensor<bf16> loc(#loc)
    %191 = stablehlo.broadcast_in_dim %cst_43, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc553)
    %192 = stablehlo.multiply %191, %arg37 : tensor<16x2048x16xbf16> loc(#loc553)
    %193 = stablehlo.add %190, %192 : tensor<16x2048x16xbf16> loc(#loc554)
    %194 = call @integer_pow_18(%113) : (tensor<16x16x512xbf16>) -> tensor<16x16x512xbf16> loc(#loc552)
    %cst_44 = stablehlo.constant dense<1.000980e-01> : tensor<bf16> loc(#loc)
    %195 = stablehlo.broadcast_in_dim %cst_44, dims = [] : (tensor<bf16>) -> tensor<16x16x512xbf16> loc(#loc553)
    %196 = stablehlo.multiply %195, %194 : tensor<16x16x512xbf16> loc(#loc553)
    %cst_45 = stablehlo.constant dense<8.984370e-01> : tensor<bf16> loc(#loc)
    %197 = stablehlo.broadcast_in_dim %cst_45, dims = [] : (tensor<bf16>) -> tensor<16x16x512xbf16> loc(#loc553)
    %198 = stablehlo.multiply %197, %arg38 : tensor<16x16x512xbf16> loc(#loc553)
    %199 = stablehlo.add %196, %198 : tensor<16x16x512xbf16> loc(#loc554)
    %200 = call @integer_pow_19(%118) : (tensor<16x2048x16xbf16>) -> tensor<16x2048x16xbf16> loc(#loc552)
    %cst_46 = stablehlo.constant dense<1.000980e-01> : tensor<bf16> loc(#loc)
    %201 = stablehlo.broadcast_in_dim %cst_46, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc553)
    %202 = stablehlo.multiply %201, %200 : tensor<16x2048x16xbf16> loc(#loc553)
    %cst_47 = stablehlo.constant dense<8.984370e-01> : tensor<bf16> loc(#loc)
    %203 = stablehlo.broadcast_in_dim %cst_47, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc553)
    %204 = stablehlo.multiply %203, %arg39 : tensor<16x2048x16xbf16> loc(#loc553)
    %205 = stablehlo.add %202, %204 : tensor<16x2048x16xbf16> loc(#loc554)
    %206 = call @integer_pow_20(%123) : (tensor<16x16x2048xbf16>) -> tensor<16x16x2048xbf16> loc(#loc552)
    %cst_48 = stablehlo.constant dense<1.000980e-01> : tensor<bf16> loc(#loc)
    %207 = stablehlo.broadcast_in_dim %cst_48, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc553)
    %208 = stablehlo.multiply %207, %206 : tensor<16x16x2048xbf16> loc(#loc553)
    %cst_49 = stablehlo.constant dense<8.984370e-01> : tensor<bf16> loc(#loc)
    %209 = stablehlo.broadcast_in_dim %cst_49, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc553)
    %210 = stablehlo.multiply %209, %arg40 : tensor<16x16x2048xbf16> loc(#loc553)
    %211 = stablehlo.add %208, %210 : tensor<16x16x2048xbf16> loc(#loc554)
    %212 = call @integer_pow_21(%128) : (tensor<16x2048x16xbf16>) -> tensor<16x2048x16xbf16> loc(#loc552)
    %cst_50 = stablehlo.constant dense<1.000980e-01> : tensor<bf16> loc(#loc)
    %213 = stablehlo.broadcast_in_dim %cst_50, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc553)
    %214 = stablehlo.multiply %213, %212 : tensor<16x2048x16xbf16> loc(#loc553)
    %cst_51 = stablehlo.constant dense<8.984370e-01> : tensor<bf16> loc(#loc)
    %215 = stablehlo.broadcast_in_dim %cst_51, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc553)
    %216 = stablehlo.multiply %215, %arg41 : tensor<16x2048x16xbf16> loc(#loc553)
    %217 = stablehlo.add %214, %216 : tensor<16x2048x16xbf16> loc(#loc554)
    %218 = call @integer_pow_22(%133) : (tensor<16x16x8192xbf16>) -> tensor<16x16x8192xbf16> loc(#loc552)
    %cst_52 = stablehlo.constant dense<1.000980e-01> : tensor<bf16> loc(#loc)
    %219 = stablehlo.broadcast_in_dim %cst_52, dims = [] : (tensor<bf16>) -> tensor<16x16x8192xbf16> loc(#loc553)
    %220 = stablehlo.multiply %219, %218 : tensor<16x16x8192xbf16> loc(#loc553)
    %cst_53 = stablehlo.constant dense<8.984370e-01> : tensor<bf16> loc(#loc)
    %221 = stablehlo.broadcast_in_dim %cst_53, dims = [] : (tensor<bf16>) -> tensor<16x16x8192xbf16> loc(#loc553)
    %222 = stablehlo.multiply %221, %arg42 : tensor<16x16x8192xbf16> loc(#loc553)
    %223 = stablehlo.add %220, %222 : tensor<16x16x8192xbf16> loc(#loc554)
    %224 = call @integer_pow_23(%138) : (tensor<16x2048x16xbf16>) -> tensor<16x2048x16xbf16> loc(#loc552)
    %cst_54 = stablehlo.constant dense<1.000980e-01> : tensor<bf16> loc(#loc)
    %225 = stablehlo.broadcast_in_dim %cst_54, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc553)
    %226 = stablehlo.multiply %225, %224 : tensor<16x2048x16xbf16> loc(#loc553)
    %cst_55 = stablehlo.constant dense<8.984370e-01> : tensor<bf16> loc(#loc)
    %227 = stablehlo.broadcast_in_dim %cst_55, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc553)
    %228 = stablehlo.multiply %227, %arg43 : tensor<16x2048x16xbf16> loc(#loc553)
    %229 = stablehlo.add %226, %228 : tensor<16x2048x16xbf16> loc(#loc554)
    %230 = call @integer_pow_24(%143) : (tensor<16x16x8192xbf16>) -> tensor<16x16x8192xbf16> loc(#loc552)
    %cst_56 = stablehlo.constant dense<1.000980e-01> : tensor<bf16> loc(#loc)
    %231 = stablehlo.broadcast_in_dim %cst_56, dims = [] : (tensor<bf16>) -> tensor<16x16x8192xbf16> loc(#loc553)
    %232 = stablehlo.multiply %231, %230 : tensor<16x16x8192xbf16> loc(#loc553)
    %cst_57 = stablehlo.constant dense<8.984370e-01> : tensor<bf16> loc(#loc)
    %233 = stablehlo.broadcast_in_dim %cst_57, dims = [] : (tensor<bf16>) -> tensor<16x16x8192xbf16> loc(#loc553)
    %234 = stablehlo.multiply %233, %arg44 : tensor<16x16x8192xbf16> loc(#loc553)
    %235 = stablehlo.add %232, %234 : tensor<16x16x8192xbf16> loc(#loc554)
    %236 = call @integer_pow_25(%148) : (tensor<16x8192x16xbf16>) -> tensor<16x8192x16xbf16> loc(#loc552)
    %cst_58 = stablehlo.constant dense<1.000980e-01> : tensor<bf16> loc(#loc)
    %237 = stablehlo.broadcast_in_dim %cst_58, dims = [] : (tensor<bf16>) -> tensor<16x8192x16xbf16> loc(#loc553)
    %238 = stablehlo.multiply %237, %236 : tensor<16x8192x16xbf16> loc(#loc553)
    %cst_59 = stablehlo.constant dense<8.984370e-01> : tensor<bf16> loc(#loc)
    %239 = stablehlo.broadcast_in_dim %cst_59, dims = [] : (tensor<bf16>) -> tensor<16x8192x16xbf16> loc(#loc553)
    %240 = stablehlo.multiply %239, %arg45 : tensor<16x8192x16xbf16> loc(#loc553)
    %241 = stablehlo.add %238, %240 : tensor<16x8192x16xbf16> loc(#loc554)
    %242 = call @integer_pow_26(%153) : (tensor<16x16x2048xbf16>) -> tensor<16x16x2048xbf16> loc(#loc552)
    %cst_60 = stablehlo.constant dense<1.000980e-01> : tensor<bf16> loc(#loc)
    %243 = stablehlo.broadcast_in_dim %cst_60, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc553)
    %244 = stablehlo.multiply %243, %242 : tensor<16x16x2048xbf16> loc(#loc553)
    %cst_61 = stablehlo.constant dense<8.984370e-01> : tensor<bf16> loc(#loc)
    %245 = stablehlo.broadcast_in_dim %cst_61, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc553)
    %246 = stablehlo.multiply %245, %arg46 : tensor<16x16x2048xbf16> loc(#loc553)
    %247 = stablehlo.add %244, %246 : tensor<16x16x2048xbf16> loc(#loc554)
    %248 = call @integer_pow_27(%158) : (tensor<2048x16xbf16>) -> tensor<2048x16xbf16> loc(#loc552)
    %cst_62 = stablehlo.constant dense<1.000980e-01> : tensor<bf16> loc(#loc)
    %249 = stablehlo.broadcast_in_dim %cst_62, dims = [] : (tensor<bf16>) -> tensor<2048x16xbf16> loc(#loc553)
    %250 = stablehlo.multiply %249, %248 : tensor<2048x16xbf16> loc(#loc553)
    %cst_63 = stablehlo.constant dense<8.984370e-01> : tensor<bf16> loc(#loc)
    %251 = stablehlo.broadcast_in_dim %cst_63, dims = [] : (tensor<bf16>) -> tensor<2048x16xbf16> loc(#loc553)
    %252 = stablehlo.multiply %251, %arg47 : tensor<2048x16xbf16> loc(#loc553)
    %253 = stablehlo.add %250, %252 : tensor<2048x16xbf16> loc(#loc554)
    %254 = call @integer_pow_28(%163) : (tensor<16x128256xbf16>) -> tensor<16x128256xbf16> loc(#loc552)
    %cst_64 = stablehlo.constant dense<1.000980e-01> : tensor<bf16> loc(#loc)
    %255 = stablehlo.broadcast_in_dim %cst_64, dims = [] : (tensor<bf16>) -> tensor<16x128256xbf16> loc(#loc553)
    %256 = stablehlo.multiply %255, %254 : tensor<16x128256xbf16> loc(#loc553)
    %cst_65 = stablehlo.constant dense<8.984370e-01> : tensor<bf16> loc(#loc)
    %257 = stablehlo.broadcast_in_dim %cst_65, dims = [] : (tensor<bf16>) -> tensor<16x128256xbf16> loc(#loc553)
    %258 = stablehlo.multiply %257, %arg48 : tensor<16x128256xbf16> loc(#loc553)
    %259 = stablehlo.add %256, %258 : tensor<16x128256xbf16> loc(#loc554)
    %260 = stablehlo.multiply %88, %88 : tensor<16x2048x16xbf16> loc(#loc616)
    %cst_66 = stablehlo.constant dense<9.994500e-04> : tensor<bf16> loc(#loc)
    %261 = stablehlo.broadcast_in_dim %cst_66, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc556)
    %262 = stablehlo.multiply %261, %260 : tensor<16x2048x16xbf16> loc(#loc556)
    %cst_67 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %263 = stablehlo.broadcast_in_dim %cst_67, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc556)
    %264 = stablehlo.multiply %263, %arg49 : tensor<16x2048x16xbf16> loc(#loc556)
    %265 = stablehlo.add %262, %264 : tensor<16x2048x16xbf16> loc(#loc557)
    %266 = stablehlo.multiply %93, %93 : tensor<16x16x2048xbf16> loc(#loc616)
    %cst_68 = stablehlo.constant dense<9.994500e-04> : tensor<bf16> loc(#loc)
    %267 = stablehlo.broadcast_in_dim %cst_68, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc556)
    %268 = stablehlo.multiply %267, %266 : tensor<16x16x2048xbf16> loc(#loc556)
    %cst_69 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %269 = stablehlo.broadcast_in_dim %cst_69, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc556)
    %270 = stablehlo.multiply %269, %arg50 : tensor<16x16x2048xbf16> loc(#loc556)
    %271 = stablehlo.add %268, %270 : tensor<16x16x2048xbf16> loc(#loc557)
    %272 = stablehlo.multiply %98, %98 : tensor<16x2048x16xbf16> loc(#loc616)
    %cst_70 = stablehlo.constant dense<9.994500e-04> : tensor<bf16> loc(#loc)
    %273 = stablehlo.broadcast_in_dim %cst_70, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc556)
    %274 = stablehlo.multiply %273, %272 : tensor<16x2048x16xbf16> loc(#loc556)
    %cst_71 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %275 = stablehlo.broadcast_in_dim %cst_71, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc556)
    %276 = stablehlo.multiply %275, %arg51 : tensor<16x2048x16xbf16> loc(#loc556)
    %277 = stablehlo.add %274, %276 : tensor<16x2048x16xbf16> loc(#loc557)
    %278 = stablehlo.multiply %103, %103 : tensor<16x16x512xbf16> loc(#loc616)
    %cst_72 = stablehlo.constant dense<9.994500e-04> : tensor<bf16> loc(#loc)
    %279 = stablehlo.broadcast_in_dim %cst_72, dims = [] : (tensor<bf16>) -> tensor<16x16x512xbf16> loc(#loc556)
    %280 = stablehlo.multiply %279, %278 : tensor<16x16x512xbf16> loc(#loc556)
    %cst_73 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %281 = stablehlo.broadcast_in_dim %cst_73, dims = [] : (tensor<bf16>) -> tensor<16x16x512xbf16> loc(#loc556)
    %282 = stablehlo.multiply %281, %arg52 : tensor<16x16x512xbf16> loc(#loc556)
    %283 = stablehlo.add %280, %282 : tensor<16x16x512xbf16> loc(#loc557)
    %284 = stablehlo.multiply %108, %108 : tensor<16x2048x16xbf16> loc(#loc616)
    %cst_74 = stablehlo.constant dense<9.994500e-04> : tensor<bf16> loc(#loc)
    %285 = stablehlo.broadcast_in_dim %cst_74, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc556)
    %286 = stablehlo.multiply %285, %284 : tensor<16x2048x16xbf16> loc(#loc556)
    %cst_75 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %287 = stablehlo.broadcast_in_dim %cst_75, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc556)
    %288 = stablehlo.multiply %287, %arg53 : tensor<16x2048x16xbf16> loc(#loc556)
    %289 = stablehlo.add %286, %288 : tensor<16x2048x16xbf16> loc(#loc557)
    %290 = stablehlo.multiply %113, %113 : tensor<16x16x512xbf16> loc(#loc616)
    %cst_76 = stablehlo.constant dense<9.994500e-04> : tensor<bf16> loc(#loc)
    %291 = stablehlo.broadcast_in_dim %cst_76, dims = [] : (tensor<bf16>) -> tensor<16x16x512xbf16> loc(#loc556)
    %292 = stablehlo.multiply %291, %290 : tensor<16x16x512xbf16> loc(#loc556)
    %cst_77 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %293 = stablehlo.broadcast_in_dim %cst_77, dims = [] : (tensor<bf16>) -> tensor<16x16x512xbf16> loc(#loc556)
    %294 = stablehlo.multiply %293, %arg54 : tensor<16x16x512xbf16> loc(#loc556)
    %295 = stablehlo.add %292, %294 : tensor<16x16x512xbf16> loc(#loc557)
    %296 = stablehlo.multiply %118, %118 : tensor<16x2048x16xbf16> loc(#loc616)
    %cst_78 = stablehlo.constant dense<9.994500e-04> : tensor<bf16> loc(#loc)
    %297 = stablehlo.broadcast_in_dim %cst_78, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc556)
    %298 = stablehlo.multiply %297, %296 : tensor<16x2048x16xbf16> loc(#loc556)
    %cst_79 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %299 = stablehlo.broadcast_in_dim %cst_79, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc556)
    %300 = stablehlo.multiply %299, %arg55 : tensor<16x2048x16xbf16> loc(#loc556)
    %301 = stablehlo.add %298, %300 : tensor<16x2048x16xbf16> loc(#loc557)
    %302 = stablehlo.multiply %123, %123 : tensor<16x16x2048xbf16> loc(#loc616)
    %cst_80 = stablehlo.constant dense<9.994500e-04> : tensor<bf16> loc(#loc)
    %303 = stablehlo.broadcast_in_dim %cst_80, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc556)
    %304 = stablehlo.multiply %303, %302 : tensor<16x16x2048xbf16> loc(#loc556)
    %cst_81 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %305 = stablehlo.broadcast_in_dim %cst_81, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc556)
    %306 = stablehlo.multiply %305, %arg56 : tensor<16x16x2048xbf16> loc(#loc556)
    %307 = stablehlo.add %304, %306 : tensor<16x16x2048xbf16> loc(#loc557)
    %308 = stablehlo.multiply %128, %128 : tensor<16x2048x16xbf16> loc(#loc616)
    %cst_82 = stablehlo.constant dense<9.994500e-04> : tensor<bf16> loc(#loc)
    %309 = stablehlo.broadcast_in_dim %cst_82, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc556)
    %310 = stablehlo.multiply %309, %308 : tensor<16x2048x16xbf16> loc(#loc556)
    %cst_83 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %311 = stablehlo.broadcast_in_dim %cst_83, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc556)
    %312 = stablehlo.multiply %311, %arg57 : tensor<16x2048x16xbf16> loc(#loc556)
    %313 = stablehlo.add %310, %312 : tensor<16x2048x16xbf16> loc(#loc557)
    %314 = stablehlo.multiply %133, %133 : tensor<16x16x8192xbf16> loc(#loc616)
    %cst_84 = stablehlo.constant dense<9.994500e-04> : tensor<bf16> loc(#loc)
    %315 = stablehlo.broadcast_in_dim %cst_84, dims = [] : (tensor<bf16>) -> tensor<16x16x8192xbf16> loc(#loc556)
    %316 = stablehlo.multiply %315, %314 : tensor<16x16x8192xbf16> loc(#loc556)
    %cst_85 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %317 = stablehlo.broadcast_in_dim %cst_85, dims = [] : (tensor<bf16>) -> tensor<16x16x8192xbf16> loc(#loc556)
    %318 = stablehlo.multiply %317, %arg58 : tensor<16x16x8192xbf16> loc(#loc556)
    %319 = stablehlo.add %316, %318 : tensor<16x16x8192xbf16> loc(#loc557)
    %320 = stablehlo.multiply %138, %138 : tensor<16x2048x16xbf16> loc(#loc616)
    %cst_86 = stablehlo.constant dense<9.994500e-04> : tensor<bf16> loc(#loc)
    %321 = stablehlo.broadcast_in_dim %cst_86, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc556)
    %322 = stablehlo.multiply %321, %320 : tensor<16x2048x16xbf16> loc(#loc556)
    %cst_87 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %323 = stablehlo.broadcast_in_dim %cst_87, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc556)
    %324 = stablehlo.multiply %323, %arg59 : tensor<16x2048x16xbf16> loc(#loc556)
    %325 = stablehlo.add %322, %324 : tensor<16x2048x16xbf16> loc(#loc557)
    %326 = stablehlo.multiply %143, %143 : tensor<16x16x8192xbf16> loc(#loc616)
    %cst_88 = stablehlo.constant dense<9.994500e-04> : tensor<bf16> loc(#loc)
    %327 = stablehlo.broadcast_in_dim %cst_88, dims = [] : (tensor<bf16>) -> tensor<16x16x8192xbf16> loc(#loc556)
    %328 = stablehlo.multiply %327, %326 : tensor<16x16x8192xbf16> loc(#loc556)
    %cst_89 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %329 = stablehlo.broadcast_in_dim %cst_89, dims = [] : (tensor<bf16>) -> tensor<16x16x8192xbf16> loc(#loc556)
    %330 = stablehlo.multiply %329, %arg60 : tensor<16x16x8192xbf16> loc(#loc556)
    %331 = stablehlo.add %328, %330 : tensor<16x16x8192xbf16> loc(#loc557)
    %332 = stablehlo.multiply %148, %148 : tensor<16x8192x16xbf16> loc(#loc616)
    %cst_90 = stablehlo.constant dense<9.994500e-04> : tensor<bf16> loc(#loc)
    %333 = stablehlo.broadcast_in_dim %cst_90, dims = [] : (tensor<bf16>) -> tensor<16x8192x16xbf16> loc(#loc556)
    %334 = stablehlo.multiply %333, %332 : tensor<16x8192x16xbf16> loc(#loc556)
    %cst_91 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %335 = stablehlo.broadcast_in_dim %cst_91, dims = [] : (tensor<bf16>) -> tensor<16x8192x16xbf16> loc(#loc556)
    %336 = stablehlo.multiply %335, %arg61 : tensor<16x8192x16xbf16> loc(#loc556)
    %337 = stablehlo.add %334, %336 : tensor<16x8192x16xbf16> loc(#loc557)
    %338 = stablehlo.multiply %153, %153 : tensor<16x16x2048xbf16> loc(#loc616)
    %cst_92 = stablehlo.constant dense<9.994500e-04> : tensor<bf16> loc(#loc)
    %339 = stablehlo.broadcast_in_dim %cst_92, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc556)
    %340 = stablehlo.multiply %339, %338 : tensor<16x16x2048xbf16> loc(#loc556)
    %cst_93 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %341 = stablehlo.broadcast_in_dim %cst_93, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc556)
    %342 = stablehlo.multiply %341, %arg62 : tensor<16x16x2048xbf16> loc(#loc556)
    %343 = stablehlo.add %340, %342 : tensor<16x16x2048xbf16> loc(#loc557)
    %344 = stablehlo.multiply %158, %158 : tensor<2048x16xbf16> loc(#loc616)
    %cst_94 = stablehlo.constant dense<9.994500e-04> : tensor<bf16> loc(#loc)
    %345 = stablehlo.broadcast_in_dim %cst_94, dims = [] : (tensor<bf16>) -> tensor<2048x16xbf16> loc(#loc556)
    %346 = stablehlo.multiply %345, %344 : tensor<2048x16xbf16> loc(#loc556)
    %cst_95 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %347 = stablehlo.broadcast_in_dim %cst_95, dims = [] : (tensor<bf16>) -> tensor<2048x16xbf16> loc(#loc556)
    %348 = stablehlo.multiply %347, %arg63 : tensor<2048x16xbf16> loc(#loc556)
    %349 = stablehlo.add %346, %348 : tensor<2048x16xbf16> loc(#loc557)
    %350 = stablehlo.multiply %163, %163 : tensor<16x128256xbf16> loc(#loc616)
    %cst_96 = stablehlo.constant dense<9.994500e-04> : tensor<bf16> loc(#loc)
    %351 = stablehlo.broadcast_in_dim %cst_96, dims = [] : (tensor<bf16>) -> tensor<16x128256xbf16> loc(#loc556)
    %352 = stablehlo.multiply %351, %350 : tensor<16x128256xbf16> loc(#loc556)
    %cst_97 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc)
    %353 = stablehlo.broadcast_in_dim %cst_97, dims = [] : (tensor<bf16>) -> tensor<16x128256xbf16> loc(#loc556)
    %354 = stablehlo.multiply %353, %arg64 : tensor<16x128256xbf16> loc(#loc556)
    %355 = stablehlo.add %352, %354 : tensor<16x128256xbf16> loc(#loc557)
    %c = stablehlo.constant dense<2147483647> : tensor<i32> loc(#loc)
    %356 = stablehlo.compare  LT, %arg32, %c,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc527)
    %c_98 = stablehlo.constant dense<1> : tensor<i32> loc(#loc)
    %357 = stablehlo.add %arg32, %c_98 : tensor<i32> loc(#loc528)
    %c_99 = stablehlo.constant dense<2147483647> : tensor<i32> loc(#loc)
    %358 = call @_where_29(%356, %357, %c_99) : (tensor<i1>, tensor<i32>, tensor<i32>) -> tensor<i32> loc(#loc529)
    %cst_100 = stablehlo.constant dense<0.899999976> : tensor<f32> loc(#loc)
    %359 = stablehlo.convert %cst_100 : tensor<f32> loc(#loc470)
    %360 = stablehlo.convert %358 : (tensor<i32>) -> tensor<f32> loc(#loc470)
    %361 = stablehlo.power %359, %360 : tensor<f32> loc(#loc471)
    %cst_101 = stablehlo.constant dense<1.000000e+00> : tensor<f32> loc(#loc)
    %362 = stablehlo.subtract %cst_101, %361 : tensor<f32> loc(#loc472)
    %363 = stablehlo.convert %362 : (tensor<f32>) -> tensor<bf16> loc(#loc470)
    %364 = stablehlo.broadcast_in_dim %363, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc473)
    %365 = stablehlo.divide %169, %364 : tensor<16x2048x16xbf16> loc(#loc473)
    %366 = stablehlo.convert %362 : (tensor<f32>) -> tensor<bf16> loc(#loc470)
    %367 = stablehlo.broadcast_in_dim %366, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc473)
    %368 = stablehlo.divide %175, %367 : tensor<16x16x2048xbf16> loc(#loc473)
    %369 = stablehlo.convert %362 : (tensor<f32>) -> tensor<bf16> loc(#loc470)
    %370 = stablehlo.broadcast_in_dim %369, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc473)
    %371 = stablehlo.divide %181, %370 : tensor<16x2048x16xbf16> loc(#loc473)
    %372 = stablehlo.convert %362 : (tensor<f32>) -> tensor<bf16> loc(#loc470)
    %373 = stablehlo.broadcast_in_dim %372, dims = [] : (tensor<bf16>) -> tensor<16x16x512xbf16> loc(#loc473)
    %374 = stablehlo.divide %187, %373 : tensor<16x16x512xbf16> loc(#loc473)
    %375 = stablehlo.convert %362 : (tensor<f32>) -> tensor<bf16> loc(#loc470)
    %376 = stablehlo.broadcast_in_dim %375, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc473)
    %377 = stablehlo.divide %193, %376 : tensor<16x2048x16xbf16> loc(#loc473)
    %378 = stablehlo.convert %362 : (tensor<f32>) -> tensor<bf16> loc(#loc470)
    %379 = stablehlo.broadcast_in_dim %378, dims = [] : (tensor<bf16>) -> tensor<16x16x512xbf16> loc(#loc473)
    %380 = stablehlo.divide %199, %379 : tensor<16x16x512xbf16> loc(#loc473)
    %381 = stablehlo.convert %362 : (tensor<f32>) -> tensor<bf16> loc(#loc470)
    %382 = stablehlo.broadcast_in_dim %381, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc473)
    %383 = stablehlo.divide %205, %382 : tensor<16x2048x16xbf16> loc(#loc473)
    %384 = stablehlo.convert %362 : (tensor<f32>) -> tensor<bf16> loc(#loc470)
    %385 = stablehlo.broadcast_in_dim %384, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc473)
    %386 = stablehlo.divide %211, %385 : tensor<16x16x2048xbf16> loc(#loc473)
    %387 = stablehlo.convert %362 : (tensor<f32>) -> tensor<bf16> loc(#loc470)
    %388 = stablehlo.broadcast_in_dim %387, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc473)
    %389 = stablehlo.divide %217, %388 : tensor<16x2048x16xbf16> loc(#loc473)
    %390 = stablehlo.convert %362 : (tensor<f32>) -> tensor<bf16> loc(#loc470)
    %391 = stablehlo.broadcast_in_dim %390, dims = [] : (tensor<bf16>) -> tensor<16x16x8192xbf16> loc(#loc473)
    %392 = stablehlo.divide %223, %391 : tensor<16x16x8192xbf16> loc(#loc473)
    %393 = stablehlo.convert %362 : (tensor<f32>) -> tensor<bf16> loc(#loc470)
    %394 = stablehlo.broadcast_in_dim %393, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc473)
    %395 = stablehlo.divide %229, %394 : tensor<16x2048x16xbf16> loc(#loc473)
    %396 = stablehlo.convert %362 : (tensor<f32>) -> tensor<bf16> loc(#loc470)
    %397 = stablehlo.broadcast_in_dim %396, dims = [] : (tensor<bf16>) -> tensor<16x16x8192xbf16> loc(#loc473)
    %398 = stablehlo.divide %235, %397 : tensor<16x16x8192xbf16> loc(#loc473)
    %399 = stablehlo.convert %362 : (tensor<f32>) -> tensor<bf16> loc(#loc470)
    %400 = stablehlo.broadcast_in_dim %399, dims = [] : (tensor<bf16>) -> tensor<16x8192x16xbf16> loc(#loc473)
    %401 = stablehlo.divide %241, %400 : tensor<16x8192x16xbf16> loc(#loc473)
    %402 = stablehlo.convert %362 : (tensor<f32>) -> tensor<bf16> loc(#loc470)
    %403 = stablehlo.broadcast_in_dim %402, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc473)
    %404 = stablehlo.divide %247, %403 : tensor<16x16x2048xbf16> loc(#loc473)
    %405 = stablehlo.convert %362 : (tensor<f32>) -> tensor<bf16> loc(#loc470)
    %406 = stablehlo.broadcast_in_dim %405, dims = [] : (tensor<bf16>) -> tensor<2048x16xbf16> loc(#loc473)
    %407 = stablehlo.divide %253, %406 : tensor<2048x16xbf16> loc(#loc473)
    %408 = stablehlo.convert %362 : (tensor<f32>) -> tensor<bf16> loc(#loc470)
    %409 = stablehlo.broadcast_in_dim %408, dims = [] : (tensor<bf16>) -> tensor<16x128256xbf16> loc(#loc473)
    %410 = stablehlo.divide %259, %409 : tensor<16x128256xbf16> loc(#loc473)
    %cst_102 = stablehlo.constant dense<9.990000e-01> : tensor<f32> loc(#loc)
    %411 = stablehlo.convert %cst_102 : tensor<f32> loc(#loc474)
    %412 = stablehlo.convert %358 : (tensor<i32>) -> tensor<f32> loc(#loc474)
    %413 = stablehlo.power %411, %412 : tensor<f32> loc(#loc475)
    %cst_103 = stablehlo.constant dense<1.000000e+00> : tensor<f32> loc(#loc)
    %414 = stablehlo.subtract %cst_103, %413 : tensor<f32> loc(#loc476)
    %415 = stablehlo.convert %414 : (tensor<f32>) -> tensor<bf16> loc(#loc474)
    %416 = stablehlo.broadcast_in_dim %415, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc477)
    %417 = stablehlo.divide %265, %416 : tensor<16x2048x16xbf16> loc(#loc477)
    %418 = stablehlo.convert %414 : (tensor<f32>) -> tensor<bf16> loc(#loc474)
    %419 = stablehlo.broadcast_in_dim %418, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc477)
    %420 = stablehlo.divide %271, %419 : tensor<16x16x2048xbf16> loc(#loc477)
    %421 = stablehlo.convert %414 : (tensor<f32>) -> tensor<bf16> loc(#loc474)
    %422 = stablehlo.broadcast_in_dim %421, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc477)
    %423 = stablehlo.divide %277, %422 : tensor<16x2048x16xbf16> loc(#loc477)
    %424 = stablehlo.convert %414 : (tensor<f32>) -> tensor<bf16> loc(#loc474)
    %425 = stablehlo.broadcast_in_dim %424, dims = [] : (tensor<bf16>) -> tensor<16x16x512xbf16> loc(#loc477)
    %426 = stablehlo.divide %283, %425 : tensor<16x16x512xbf16> loc(#loc477)
    %427 = stablehlo.convert %414 : (tensor<f32>) -> tensor<bf16> loc(#loc474)
    %428 = stablehlo.broadcast_in_dim %427, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc477)
    %429 = stablehlo.divide %289, %428 : tensor<16x2048x16xbf16> loc(#loc477)
    %430 = stablehlo.convert %414 : (tensor<f32>) -> tensor<bf16> loc(#loc474)
    %431 = stablehlo.broadcast_in_dim %430, dims = [] : (tensor<bf16>) -> tensor<16x16x512xbf16> loc(#loc477)
    %432 = stablehlo.divide %295, %431 : tensor<16x16x512xbf16> loc(#loc477)
    %433 = stablehlo.convert %414 : (tensor<f32>) -> tensor<bf16> loc(#loc474)
    %434 = stablehlo.broadcast_in_dim %433, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc477)
    %435 = stablehlo.divide %301, %434 : tensor<16x2048x16xbf16> loc(#loc477)
    %436 = stablehlo.convert %414 : (tensor<f32>) -> tensor<bf16> loc(#loc474)
    %437 = stablehlo.broadcast_in_dim %436, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc477)
    %438 = stablehlo.divide %307, %437 : tensor<16x16x2048xbf16> loc(#loc477)
    %439 = stablehlo.convert %414 : (tensor<f32>) -> tensor<bf16> loc(#loc474)
    %440 = stablehlo.broadcast_in_dim %439, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc477)
    %441 = stablehlo.divide %313, %440 : tensor<16x2048x16xbf16> loc(#loc477)
    %442 = stablehlo.convert %414 : (tensor<f32>) -> tensor<bf16> loc(#loc474)
    %443 = stablehlo.broadcast_in_dim %442, dims = [] : (tensor<bf16>) -> tensor<16x16x8192xbf16> loc(#loc477)
    %444 = stablehlo.divide %319, %443 : tensor<16x16x8192xbf16> loc(#loc477)
    %445 = stablehlo.convert %414 : (tensor<f32>) -> tensor<bf16> loc(#loc474)
    %446 = stablehlo.broadcast_in_dim %445, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc477)
    %447 = stablehlo.divide %325, %446 : tensor<16x2048x16xbf16> loc(#loc477)
    %448 = stablehlo.convert %414 : (tensor<f32>) -> tensor<bf16> loc(#loc474)
    %449 = stablehlo.broadcast_in_dim %448, dims = [] : (tensor<bf16>) -> tensor<16x16x8192xbf16> loc(#loc477)
    %450 = stablehlo.divide %331, %449 : tensor<16x16x8192xbf16> loc(#loc477)
    %451 = stablehlo.convert %414 : (tensor<f32>) -> tensor<bf16> loc(#loc474)
    %452 = stablehlo.broadcast_in_dim %451, dims = [] : (tensor<bf16>) -> tensor<16x8192x16xbf16> loc(#loc477)
    %453 = stablehlo.divide %337, %452 : tensor<16x8192x16xbf16> loc(#loc477)
    %454 = stablehlo.convert %414 : (tensor<f32>) -> tensor<bf16> loc(#loc474)
    %455 = stablehlo.broadcast_in_dim %454, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc477)
    %456 = stablehlo.divide %343, %455 : tensor<16x16x2048xbf16> loc(#loc477)
    %457 = stablehlo.convert %414 : (tensor<f32>) -> tensor<bf16> loc(#loc474)
    %458 = stablehlo.broadcast_in_dim %457, dims = [] : (tensor<bf16>) -> tensor<2048x16xbf16> loc(#loc477)
    %459 = stablehlo.divide %349, %458 : tensor<2048x16xbf16> loc(#loc477)
    %460 = stablehlo.convert %414 : (tensor<f32>) -> tensor<bf16> loc(#loc474)
    %461 = stablehlo.broadcast_in_dim %460, dims = [] : (tensor<bf16>) -> tensor<16x128256xbf16> loc(#loc477)
    %462 = stablehlo.divide %355, %461 : tensor<16x128256xbf16> loc(#loc477)
    %cst_104 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc)
    %463 = stablehlo.broadcast_in_dim %cst_104, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc530)
    %464 = stablehlo.add %417, %463 : tensor<16x2048x16xbf16> loc(#loc530)
    %465 = stablehlo.sqrt %464 : tensor<16x2048x16xbf16> loc(#loc531)
    %cst_105 = stablehlo.constant dense<1.001170e-08> : tensor<bf16> loc(#loc)
    %466 = stablehlo.broadcast_in_dim %cst_105, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc530)
    %467 = stablehlo.add %465, %466 : tensor<16x2048x16xbf16> loc(#loc530)
    %468 = stablehlo.divide %365, %467 : tensor<16x2048x16xbf16> loc(#loc532)
    %cst_106 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc)
    %469 = stablehlo.broadcast_in_dim %cst_106, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc530)
    %470 = stablehlo.add %420, %469 : tensor<16x16x2048xbf16> loc(#loc530)
    %471 = stablehlo.sqrt %470 : tensor<16x16x2048xbf16> loc(#loc531)
    %cst_107 = stablehlo.constant dense<1.001170e-08> : tensor<bf16> loc(#loc)
    %472 = stablehlo.broadcast_in_dim %cst_107, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc530)
    %473 = stablehlo.add %471, %472 : tensor<16x16x2048xbf16> loc(#loc530)
    %474 = stablehlo.divide %368, %473 : tensor<16x16x2048xbf16> loc(#loc532)
    %cst_108 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc)
    %475 = stablehlo.broadcast_in_dim %cst_108, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc530)
    %476 = stablehlo.add %423, %475 : tensor<16x2048x16xbf16> loc(#loc530)
    %477 = stablehlo.sqrt %476 : tensor<16x2048x16xbf16> loc(#loc531)
    %cst_109 = stablehlo.constant dense<1.001170e-08> : tensor<bf16> loc(#loc)
    %478 = stablehlo.broadcast_in_dim %cst_109, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc530)
    %479 = stablehlo.add %477, %478 : tensor<16x2048x16xbf16> loc(#loc530)
    %480 = stablehlo.divide %371, %479 : tensor<16x2048x16xbf16> loc(#loc532)
    %cst_110 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc)
    %481 = stablehlo.broadcast_in_dim %cst_110, dims = [] : (tensor<bf16>) -> tensor<16x16x512xbf16> loc(#loc530)
    %482 = stablehlo.add %426, %481 : tensor<16x16x512xbf16> loc(#loc530)
    %483 = stablehlo.sqrt %482 : tensor<16x16x512xbf16> loc(#loc531)
    %cst_111 = stablehlo.constant dense<1.001170e-08> : tensor<bf16> loc(#loc)
    %484 = stablehlo.broadcast_in_dim %cst_111, dims = [] : (tensor<bf16>) -> tensor<16x16x512xbf16> loc(#loc530)
    %485 = stablehlo.add %483, %484 : tensor<16x16x512xbf16> loc(#loc530)
    %486 = stablehlo.divide %374, %485 : tensor<16x16x512xbf16> loc(#loc532)
    %cst_112 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc)
    %487 = stablehlo.broadcast_in_dim %cst_112, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc530)
    %488 = stablehlo.add %429, %487 : tensor<16x2048x16xbf16> loc(#loc530)
    %489 = stablehlo.sqrt %488 : tensor<16x2048x16xbf16> loc(#loc531)
    %cst_113 = stablehlo.constant dense<1.001170e-08> : tensor<bf16> loc(#loc)
    %490 = stablehlo.broadcast_in_dim %cst_113, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc530)
    %491 = stablehlo.add %489, %490 : tensor<16x2048x16xbf16> loc(#loc530)
    %492 = stablehlo.divide %377, %491 : tensor<16x2048x16xbf16> loc(#loc532)
    %cst_114 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc)
    %493 = stablehlo.broadcast_in_dim %cst_114, dims = [] : (tensor<bf16>) -> tensor<16x16x512xbf16> loc(#loc530)
    %494 = stablehlo.add %432, %493 : tensor<16x16x512xbf16> loc(#loc530)
    %495 = stablehlo.sqrt %494 : tensor<16x16x512xbf16> loc(#loc531)
    %cst_115 = stablehlo.constant dense<1.001170e-08> : tensor<bf16> loc(#loc)
    %496 = stablehlo.broadcast_in_dim %cst_115, dims = [] : (tensor<bf16>) -> tensor<16x16x512xbf16> loc(#loc530)
    %497 = stablehlo.add %495, %496 : tensor<16x16x512xbf16> loc(#loc530)
    %498 = stablehlo.divide %380, %497 : tensor<16x16x512xbf16> loc(#loc532)
    %cst_116 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc)
    %499 = stablehlo.broadcast_in_dim %cst_116, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc530)
    %500 = stablehlo.add %435, %499 : tensor<16x2048x16xbf16> loc(#loc530)
    %501 = stablehlo.sqrt %500 : tensor<16x2048x16xbf16> loc(#loc531)
    %cst_117 = stablehlo.constant dense<1.001170e-08> : tensor<bf16> loc(#loc)
    %502 = stablehlo.broadcast_in_dim %cst_117, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc530)
    %503 = stablehlo.add %501, %502 : tensor<16x2048x16xbf16> loc(#loc530)
    %504 = stablehlo.divide %383, %503 : tensor<16x2048x16xbf16> loc(#loc532)
    %cst_118 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc)
    %505 = stablehlo.broadcast_in_dim %cst_118, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc530)
    %506 = stablehlo.add %438, %505 : tensor<16x16x2048xbf16> loc(#loc530)
    %507 = stablehlo.sqrt %506 : tensor<16x16x2048xbf16> loc(#loc531)
    %cst_119 = stablehlo.constant dense<1.001170e-08> : tensor<bf16> loc(#loc)
    %508 = stablehlo.broadcast_in_dim %cst_119, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc530)
    %509 = stablehlo.add %507, %508 : tensor<16x16x2048xbf16> loc(#loc530)
    %510 = stablehlo.divide %386, %509 : tensor<16x16x2048xbf16> loc(#loc532)
    %cst_120 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc)
    %511 = stablehlo.broadcast_in_dim %cst_120, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc530)
    %512 = stablehlo.add %441, %511 : tensor<16x2048x16xbf16> loc(#loc530)
    %513 = stablehlo.sqrt %512 : tensor<16x2048x16xbf16> loc(#loc531)
    %cst_121 = stablehlo.constant dense<1.001170e-08> : tensor<bf16> loc(#loc)
    %514 = stablehlo.broadcast_in_dim %cst_121, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc530)
    %515 = stablehlo.add %513, %514 : tensor<16x2048x16xbf16> loc(#loc530)
    %516 = stablehlo.divide %389, %515 : tensor<16x2048x16xbf16> loc(#loc532)
    %cst_122 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc)
    %517 = stablehlo.broadcast_in_dim %cst_122, dims = [] : (tensor<bf16>) -> tensor<16x16x8192xbf16> loc(#loc530)
    %518 = stablehlo.add %444, %517 : tensor<16x16x8192xbf16> loc(#loc530)
    %519 = stablehlo.sqrt %518 : tensor<16x16x8192xbf16> loc(#loc531)
    %cst_123 = stablehlo.constant dense<1.001170e-08> : tensor<bf16> loc(#loc)
    %520 = stablehlo.broadcast_in_dim %cst_123, dims = [] : (tensor<bf16>) -> tensor<16x16x8192xbf16> loc(#loc530)
    %521 = stablehlo.add %519, %520 : tensor<16x16x8192xbf16> loc(#loc530)
    %522 = stablehlo.divide %392, %521 : tensor<16x16x8192xbf16> loc(#loc532)
    %cst_124 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc)
    %523 = stablehlo.broadcast_in_dim %cst_124, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc530)
    %524 = stablehlo.add %447, %523 : tensor<16x2048x16xbf16> loc(#loc530)
    %525 = stablehlo.sqrt %524 : tensor<16x2048x16xbf16> loc(#loc531)
    %cst_125 = stablehlo.constant dense<1.001170e-08> : tensor<bf16> loc(#loc)
    %526 = stablehlo.broadcast_in_dim %cst_125, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc530)
    %527 = stablehlo.add %525, %526 : tensor<16x2048x16xbf16> loc(#loc530)
    %528 = stablehlo.divide %395, %527 : tensor<16x2048x16xbf16> loc(#loc532)
    %cst_126 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc)
    %529 = stablehlo.broadcast_in_dim %cst_126, dims = [] : (tensor<bf16>) -> tensor<16x16x8192xbf16> loc(#loc530)
    %530 = stablehlo.add %450, %529 : tensor<16x16x8192xbf16> loc(#loc530)
    %531 = stablehlo.sqrt %530 : tensor<16x16x8192xbf16> loc(#loc531)
    %cst_127 = stablehlo.constant dense<1.001170e-08> : tensor<bf16> loc(#loc)
    %532 = stablehlo.broadcast_in_dim %cst_127, dims = [] : (tensor<bf16>) -> tensor<16x16x8192xbf16> loc(#loc530)
    %533 = stablehlo.add %531, %532 : tensor<16x16x8192xbf16> loc(#loc530)
    %534 = stablehlo.divide %398, %533 : tensor<16x16x8192xbf16> loc(#loc532)
    %cst_128 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc)
    %535 = stablehlo.broadcast_in_dim %cst_128, dims = [] : (tensor<bf16>) -> tensor<16x8192x16xbf16> loc(#loc530)
    %536 = stablehlo.add %453, %535 : tensor<16x8192x16xbf16> loc(#loc530)
    %537 = stablehlo.sqrt %536 : tensor<16x8192x16xbf16> loc(#loc531)
    %cst_129 = stablehlo.constant dense<1.001170e-08> : tensor<bf16> loc(#loc)
    %538 = stablehlo.broadcast_in_dim %cst_129, dims = [] : (tensor<bf16>) -> tensor<16x8192x16xbf16> loc(#loc530)
    %539 = stablehlo.add %537, %538 : tensor<16x8192x16xbf16> loc(#loc530)
    %540 = stablehlo.divide %401, %539 : tensor<16x8192x16xbf16> loc(#loc532)
    %cst_130 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc)
    %541 = stablehlo.broadcast_in_dim %cst_130, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc530)
    %542 = stablehlo.add %456, %541 : tensor<16x16x2048xbf16> loc(#loc530)
    %543 = stablehlo.sqrt %542 : tensor<16x16x2048xbf16> loc(#loc531)
    %cst_131 = stablehlo.constant dense<1.001170e-08> : tensor<bf16> loc(#loc)
    %544 = stablehlo.broadcast_in_dim %cst_131, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc530)
    %545 = stablehlo.add %543, %544 : tensor<16x16x2048xbf16> loc(#loc530)
    %546 = stablehlo.divide %404, %545 : tensor<16x16x2048xbf16> loc(#loc532)
    %cst_132 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc)
    %547 = stablehlo.broadcast_in_dim %cst_132, dims = [] : (tensor<bf16>) -> tensor<2048x16xbf16> loc(#loc530)
    %548 = stablehlo.add %459, %547 : tensor<2048x16xbf16> loc(#loc530)
    %549 = stablehlo.sqrt %548 : tensor<2048x16xbf16> loc(#loc531)
    %cst_133 = stablehlo.constant dense<1.001170e-08> : tensor<bf16> loc(#loc)
    %550 = stablehlo.broadcast_in_dim %cst_133, dims = [] : (tensor<bf16>) -> tensor<2048x16xbf16> loc(#loc530)
    %551 = stablehlo.add %549, %550 : tensor<2048x16xbf16> loc(#loc530)
    %552 = stablehlo.divide %407, %551 : tensor<2048x16xbf16> loc(#loc532)
    %cst_134 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc)
    %553 = stablehlo.broadcast_in_dim %cst_134, dims = [] : (tensor<bf16>) -> tensor<16x128256xbf16> loc(#loc530)
    %554 = stablehlo.add %462, %553 : tensor<16x128256xbf16> loc(#loc530)
    %555 = stablehlo.sqrt %554 : tensor<16x128256xbf16> loc(#loc531)
    %cst_135 = stablehlo.constant dense<1.001170e-08> : tensor<bf16> loc(#loc)
    %556 = stablehlo.broadcast_in_dim %cst_135, dims = [] : (tensor<bf16>) -> tensor<16x128256xbf16> loc(#loc530)
    %557 = stablehlo.add %555, %556 : tensor<16x128256xbf16> loc(#loc530)
    %558 = stablehlo.divide %410, %557 : tensor<16x128256xbf16> loc(#loc532)
    %cst_136 = stablehlo.constant dense<-9.994500e-04> : tensor<bf16> loc(#loc)
    %559 = stablehlo.broadcast_in_dim %cst_136, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc533)
    %560 = stablehlo.multiply %559, %468 : tensor<16x2048x16xbf16> loc(#loc533)
    %cst_137 = stablehlo.constant dense<-9.994500e-04> : tensor<bf16> loc(#loc)
    %561 = stablehlo.broadcast_in_dim %cst_137, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc533)
    %562 = stablehlo.multiply %561, %474 : tensor<16x16x2048xbf16> loc(#loc533)
    %cst_138 = stablehlo.constant dense<-9.994500e-04> : tensor<bf16> loc(#loc)
    %563 = stablehlo.broadcast_in_dim %cst_138, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc533)
    %564 = stablehlo.multiply %563, %480 : tensor<16x2048x16xbf16> loc(#loc533)
    %cst_139 = stablehlo.constant dense<-9.994500e-04> : tensor<bf16> loc(#loc)
    %565 = stablehlo.broadcast_in_dim %cst_139, dims = [] : (tensor<bf16>) -> tensor<16x16x512xbf16> loc(#loc533)
    %566 = stablehlo.multiply %565, %486 : tensor<16x16x512xbf16> loc(#loc533)
    %cst_140 = stablehlo.constant dense<-9.994500e-04> : tensor<bf16> loc(#loc)
    %567 = stablehlo.broadcast_in_dim %cst_140, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc533)
    %568 = stablehlo.multiply %567, %492 : tensor<16x2048x16xbf16> loc(#loc533)
    %cst_141 = stablehlo.constant dense<-9.994500e-04> : tensor<bf16> loc(#loc)
    %569 = stablehlo.broadcast_in_dim %cst_141, dims = [] : (tensor<bf16>) -> tensor<16x16x512xbf16> loc(#loc533)
    %570 = stablehlo.multiply %569, %498 : tensor<16x16x512xbf16> loc(#loc533)
    %cst_142 = stablehlo.constant dense<-9.994500e-04> : tensor<bf16> loc(#loc)
    %571 = stablehlo.broadcast_in_dim %cst_142, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc533)
    %572 = stablehlo.multiply %571, %504 : tensor<16x2048x16xbf16> loc(#loc533)
    %cst_143 = stablehlo.constant dense<-9.994500e-04> : tensor<bf16> loc(#loc)
    %573 = stablehlo.broadcast_in_dim %cst_143, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc533)
    %574 = stablehlo.multiply %573, %510 : tensor<16x16x2048xbf16> loc(#loc533)
    %cst_144 = stablehlo.constant dense<-9.994500e-04> : tensor<bf16> loc(#loc)
    %575 = stablehlo.broadcast_in_dim %cst_144, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc533)
    %576 = stablehlo.multiply %575, %516 : tensor<16x2048x16xbf16> loc(#loc533)
    %cst_145 = stablehlo.constant dense<-9.994500e-04> : tensor<bf16> loc(#loc)
    %577 = stablehlo.broadcast_in_dim %cst_145, dims = [] : (tensor<bf16>) -> tensor<16x16x8192xbf16> loc(#loc533)
    %578 = stablehlo.multiply %577, %522 : tensor<16x16x8192xbf16> loc(#loc533)
    %cst_146 = stablehlo.constant dense<-9.994500e-04> : tensor<bf16> loc(#loc)
    %579 = stablehlo.broadcast_in_dim %cst_146, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc533)
    %580 = stablehlo.multiply %579, %528 : tensor<16x2048x16xbf16> loc(#loc533)
    %cst_147 = stablehlo.constant dense<-9.994500e-04> : tensor<bf16> loc(#loc)
    %581 = stablehlo.broadcast_in_dim %cst_147, dims = [] : (tensor<bf16>) -> tensor<16x16x8192xbf16> loc(#loc533)
    %582 = stablehlo.multiply %581, %534 : tensor<16x16x8192xbf16> loc(#loc533)
    %cst_148 = stablehlo.constant dense<-9.994500e-04> : tensor<bf16> loc(#loc)
    %583 = stablehlo.broadcast_in_dim %cst_148, dims = [] : (tensor<bf16>) -> tensor<16x8192x16xbf16> loc(#loc533)
    %584 = stablehlo.multiply %583, %540 : tensor<16x8192x16xbf16> loc(#loc533)
    %cst_149 = stablehlo.constant dense<-9.994500e-04> : tensor<bf16> loc(#loc)
    %585 = stablehlo.broadcast_in_dim %cst_149, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc533)
    %586 = stablehlo.multiply %585, %546 : tensor<16x16x2048xbf16> loc(#loc533)
    %cst_150 = stablehlo.constant dense<-9.994500e-04> : tensor<bf16> loc(#loc)
    %587 = stablehlo.broadcast_in_dim %cst_150, dims = [] : (tensor<bf16>) -> tensor<2048x16xbf16> loc(#loc533)
    %588 = stablehlo.multiply %587, %552 : tensor<2048x16xbf16> loc(#loc533)
    %cst_151 = stablehlo.constant dense<-9.994500e-04> : tensor<bf16> loc(#loc)
    %589 = stablehlo.broadcast_in_dim %cst_151, dims = [] : (tensor<bf16>) -> tensor<16x128256xbf16> loc(#loc533)
    %590 = stablehlo.multiply %589, %558 : tensor<16x128256xbf16> loc(#loc533)
    %591 = stablehlo.add %arg5, %560 : tensor<16x2048x16xbf16> loc(#loc331)
    %592 = stablehlo.add %arg6, %562 : tensor<16x16x2048xbf16> loc(#loc331)
    %593 = stablehlo.add %arg8, %564 : tensor<16x2048x16xbf16> loc(#loc331)
    %594 = stablehlo.add %arg9, %566 : tensor<16x16x512xbf16> loc(#loc331)
    %595 = stablehlo.add %arg11, %568 : tensor<16x2048x16xbf16> loc(#loc331)
    %596 = stablehlo.add %arg12, %570 : tensor<16x16x512xbf16> loc(#loc331)
    %597 = stablehlo.add %arg14, %572 : tensor<16x2048x16xbf16> loc(#loc331)
    %598 = stablehlo.add %arg15, %574 : tensor<16x16x2048xbf16> loc(#loc331)
    %599 = stablehlo.add %arg18, %576 : tensor<16x2048x16xbf16> loc(#loc331)
    %600 = stablehlo.add %arg19, %578 : tensor<16x16x8192xbf16> loc(#loc331)
    %601 = stablehlo.add %arg21, %580 : tensor<16x2048x16xbf16> loc(#loc331)
    %602 = stablehlo.add %arg22, %582 : tensor<16x16x8192xbf16> loc(#loc331)
    %603 = stablehlo.add %arg24, %584 : tensor<16x8192x16xbf16> loc(#loc331)
    %604 = stablehlo.add %arg25, %586 : tensor<16x16x2048xbf16> loc(#loc331)
    %605 = stablehlo.add %arg30, %588 : tensor<2048x16xbf16> loc(#loc331)
    %606 = stablehlo.add %arg31, %590 : tensor<16x128256xbf16> loc(#loc331)
    return %0#0, %0#1, %arg3, %arg4, %591, %592, %arg7, %593, %594, %arg10, %595, %596, %arg13, %597, %598, %arg16, %arg17, %599, %600, %arg20, %601, %602, %arg23, %603, %604, %arg26, %arg27, %arg28, %arg29, %605, %606, %358, %169, %175, %181, %187, %193, %199, %205, %211, %217, %223, %229, %235, %241, %247, %253, %259, %265, %271, %277, %283, %289, %295, %301, %307, %313, %319, %325, %331, %337, %343, %349, %355 : tensor<f32>, tensor<f32>, tensor<128256x2048xf32>, tensor<16x2048x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x512x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x512x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x2048x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x32xf32>, tensor<16x8192x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x8192x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x2048x8192xbf16>, tensor<16x8192x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x2048xf32>, tensor<16x2048xf32>, tensor<2048xf32>, tensor<128256x2048xbf16>, tensor<2048x16xbf16>, tensor<16x128256xbf16>, tensor<i32>, tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x8192x16xbf16>, tensor<16x16x2048xbf16>, tensor<2048x16xbf16>, tensor<16x128256xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x8192x16xbf16>, tensor<16x16x2048xbf16>, tensor<2048x16xbf16>, tensor<16x128256xbf16> loc(#loc)
  } loc(#loc)
  func.func private @forward(%arg0: tensor<128256x2048xf32> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg1: tensor<16x2048x2048xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg2: tensor<16x2048x16xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg3: tensor<16x16x2048xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg4: tensor<16x512x2048xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg5: tensor<16x2048x16xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg6: tensor<16x16x512xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg7: tensor<16x512x2048xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg8: tensor<16x2048x16xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg9: tensor<16x16x512xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg10: tensor<16x2048x2048xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg11: tensor<16x2048x16xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg12: tensor<16x16x2048xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg13: tensor<16x32xf32> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg14: tensor<16x8192x2048xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg15: tensor<16x2048x16xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg16: tensor<16x16x8192xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg17: tensor<16x8192x2048xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg18: tensor<16x2048x16xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg19: tensor<16x16x8192xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg20: tensor<16x2048x8192xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg21: tensor<16x8192x16xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg22: tensor<16x16x2048xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg23: tensor<16x2048xf32> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg24: tensor<16x2048xf32> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg25: tensor<2048xf32> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg26: tensor<128256x2048xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg27: tensor<2048x16xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg28: tensor<16x128256xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg29: tensor<8x32xi32> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg30: tensor<8x32xi32> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg31: tensor<8x32xi32> loc("jit(training_step)/jit(main)/pjit"(#loc286))) -> (tensor<f32>, tensor<f32>, tensor<1x1x2048xbf16>, tensor<16x8x32x2048xbf16>, tensor<8x32x1xbf16>, tensor<8x32x2048xbf16>, tensor<8x32x2048xbf16>, tensor<8x32x1xbf16>, tensor<2048x128256xbf16>, tensor<8x32x2048xbf16>, tensor<8x32x16xbf16>, tensor<248x128256xf32>, tensor<248x1xf32>, tensor<248x2xi32>, tensor<248xf32>, tensor<8xf32>) {
    %0 = call @_take(%arg0, %arg29) : (tensor<128256x2048xf32>, tensor<8x32xi32>) -> tensor<8x32x2048xf32> loc(#loc480)
    %1 = stablehlo.convert %0 : (tensor<8x32x2048xf32>) -> tensor<8x32x2048xbf16> loc(#loc414)
    %2 = stablehlo.convert %arg31 : (tensor<8x32xi32>) -> tensor<8x32xf32> loc(#loc617)
    %3 = stablehlo.reshape %2 : (tensor<8x32xf32>) -> tensor<8x32x1xf32> loc(#loc618)
    %cst = stablehlo.constant dense<6.400000e+01> : tensor<f32> loc(#loc292)
    %4 = stablehlo.sqrt %cst : tensor<f32> loc(#loc619)
    %5 = stablehlo.convert %4 : tensor<f32> loc(#loc620)
    %cst_0 = stablehlo.constant dense<1.000000e+00> : tensor<f32> loc(#loc292)
    %6 = stablehlo.broadcast_in_dim %cst_0, dims = [] : (tensor<f32>) -> tensor<32x32xf32> loc(#loc621)
    %7 = call @tril(%6) : (tensor<32x32xf32>) -> tensor<32x32xf32> loc(#loc622)
    %8 = stablehlo.broadcast_in_dim %7, dims = [2, 3] : (tensor<32x32xf32>) -> tensor<1x1x32x32xf32> loc(#loc623)
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc292)
    %9 = stablehlo.broadcast_in_dim %cst_1, dims = [] : (tensor<f32>) -> tensor<1x1x32x32xf32> loc(#loc624)
    %10 = stablehlo.compare  EQ, %8, %9,  FLOAT : (tensor<1x1x32x32xf32>, tensor<1x1x32x32xf32>) -> tensor<1x1x32x32xi1> loc(#loc624)
    %cst_2 = stablehlo.constant dense<0xFF800000> : tensor<f32> loc(#loc292)
    %11:2 = call @_where_0(%10, %cst_2) : (tensor<1x1x32x32xi1>, tensor<f32>) -> (tensor<8x32x32x32xi1>, tensor<8x32x32x32xf32>) loc(#loc625)
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc417)
    %12 = stablehlo.broadcast_in_dim %cst_3, dims = [] : (tensor<bf16>) -> tensor<16x8x32x2048xbf16> loc(#loc418)
    %c = stablehlo.constant dense<0> : tensor<i32> loc(#loc419)
    %13:31 = stablehlo.while(%iterArg = %arg1, %iterArg_23 = %arg2, %iterArg_24 = %arg3, %iterArg_25 = %arg4, %iterArg_26 = %arg5, %iterArg_27 = %arg6, %iterArg_28 = %arg7, %iterArg_29 = %arg8, %iterArg_30 = %arg9, %iterArg_31 = %arg10, %iterArg_32 = %arg11, %iterArg_33 = %arg12, %iterArg_34 = %arg13, %iterArg_35 = %arg14, %iterArg_36 = %arg15, %iterArg_37 = %arg16, %iterArg_38 = %arg17, %iterArg_39 = %arg18, %iterArg_40 = %arg19, %iterArg_41 = %arg20, %iterArg_42 = %arg21, %iterArg_43 = %arg22, %iterArg_44 = %arg23, %iterArg_45 = %arg24, %iterArg_46 = %3, %iterArg_47 = %5, %iterArg_48 = %11#0, %iterArg_49 = %11#1, %iterArg_50 = %c, %iterArg_51 = %1, %iterArg_52 = %12) : tensor<16x2048x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x512x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x512x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x2048x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x32xf32>, tensor<16x8192x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x8192x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x2048x8192xbf16>, tensor<16x8192x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x2048xf32>, tensor<16x2048xf32>, tensor<8x32x1xf32>, tensor<f32>, tensor<8x32x32x32xi1>, tensor<8x32x32x32xf32>, tensor<i32>, tensor<8x32x2048xbf16>, tensor<16x8x32x2048xbf16>
     cond {
      %c_53 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %84 = stablehlo.compare  LT, %iterArg_50, %c_53,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc421)
      stablehlo.return %84 : tensor<i1> loc(#loc420)
    } do {
      %c_53 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %84 = stablehlo.compare  LT, %iterArg_50, %c_53,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc422)
      %85 = stablehlo.convert %iterArg_50 : tensor<i32> loc(#loc423)
      %c_54 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %86 = stablehlo.add %85, %c_54 : tensor<i32> loc(#loc424)
      %87 = stablehlo.select %84, %86, %iterArg_50 : tensor<i1>, tensor<i32> loc(#loc425)
      %c_55 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %c_56 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %88 = stablehlo.dynamic_slice %iterArg, %87, %c_55, %c_56, sizes = [1, 2048, 2048] : (tensor<16x2048x2048xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x2048x2048xbf16> loc(#loc426)
      %89 = stablehlo.reshape %88 : (tensor<1x2048x2048xbf16>) -> tensor<2048x2048xbf16> loc(#loc427)
      %c_57 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %90 = stablehlo.compare  LT, %iterArg_50, %c_57,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc422)
      %91 = stablehlo.convert %iterArg_50 : tensor<i32> loc(#loc423)
      %c_58 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %92 = stablehlo.add %91, %c_58 : tensor<i32> loc(#loc424)
      %93 = stablehlo.select %90, %92, %iterArg_50 : tensor<i1>, tensor<i32> loc(#loc425)
      %c_59 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %c_60 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %94 = stablehlo.dynamic_slice %iterArg_23, %93, %c_59, %c_60, sizes = [1, 2048, 16] : (tensor<16x2048x16xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x2048x16xbf16> loc(#loc426)
      %95 = stablehlo.reshape %94 : (tensor<1x2048x16xbf16>) -> tensor<2048x16xbf16> loc(#loc427)
      %c_61 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %96 = stablehlo.compare  LT, %iterArg_50, %c_61,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc422)
      %97 = stablehlo.convert %iterArg_50 : tensor<i32> loc(#loc423)
      %c_62 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %98 = stablehlo.add %97, %c_62 : tensor<i32> loc(#loc424)
      %99 = stablehlo.select %96, %98, %iterArg_50 : tensor<i1>, tensor<i32> loc(#loc425)
      %c_63 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %c_64 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %100 = stablehlo.dynamic_slice %iterArg_24, %99, %c_63, %c_64, sizes = [1, 16, 2048] : (tensor<16x16x2048xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x16x2048xbf16> loc(#loc426)
      %101 = stablehlo.reshape %100 : (tensor<1x16x2048xbf16>) -> tensor<16x2048xbf16> loc(#loc427)
      %c_65 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %102 = stablehlo.compare  LT, %iterArg_50, %c_65,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc422)
      %103 = stablehlo.convert %iterArg_50 : tensor<i32> loc(#loc423)
      %c_66 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %104 = stablehlo.add %103, %c_66 : tensor<i32> loc(#loc424)
      %105 = stablehlo.select %102, %104, %iterArg_50 : tensor<i1>, tensor<i32> loc(#loc425)
      %c_67 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %c_68 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %106 = stablehlo.dynamic_slice %iterArg_25, %105, %c_67, %c_68, sizes = [1, 512, 2048] : (tensor<16x512x2048xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x512x2048xbf16> loc(#loc426)
      %107 = stablehlo.reshape %106 : (tensor<1x512x2048xbf16>) -> tensor<512x2048xbf16> loc(#loc427)
      %c_69 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %108 = stablehlo.compare  LT, %iterArg_50, %c_69,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc422)
      %109 = stablehlo.convert %iterArg_50 : tensor<i32> loc(#loc423)
      %c_70 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %110 = stablehlo.add %109, %c_70 : tensor<i32> loc(#loc424)
      %111 = stablehlo.select %108, %110, %iterArg_50 : tensor<i1>, tensor<i32> loc(#loc425)
      %c_71 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %c_72 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %112 = stablehlo.dynamic_slice %iterArg_26, %111, %c_71, %c_72, sizes = [1, 2048, 16] : (tensor<16x2048x16xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x2048x16xbf16> loc(#loc426)
      %113 = stablehlo.reshape %112 : (tensor<1x2048x16xbf16>) -> tensor<2048x16xbf16> loc(#loc427)
      %c_73 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %114 = stablehlo.compare  LT, %iterArg_50, %c_73,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc422)
      %115 = stablehlo.convert %iterArg_50 : tensor<i32> loc(#loc423)
      %c_74 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %116 = stablehlo.add %115, %c_74 : tensor<i32> loc(#loc424)
      %117 = stablehlo.select %114, %116, %iterArg_50 : tensor<i1>, tensor<i32> loc(#loc425)
      %c_75 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %c_76 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %118 = stablehlo.dynamic_slice %iterArg_27, %117, %c_75, %c_76, sizes = [1, 16, 512] : (tensor<16x16x512xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x16x512xbf16> loc(#loc426)
      %119 = stablehlo.reshape %118 : (tensor<1x16x512xbf16>) -> tensor<16x512xbf16> loc(#loc427)
      %c_77 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %120 = stablehlo.compare  LT, %iterArg_50, %c_77,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc422)
      %121 = stablehlo.convert %iterArg_50 : tensor<i32> loc(#loc423)
      %c_78 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %122 = stablehlo.add %121, %c_78 : tensor<i32> loc(#loc424)
      %123 = stablehlo.select %120, %122, %iterArg_50 : tensor<i1>, tensor<i32> loc(#loc425)
      %c_79 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %c_80 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %124 = stablehlo.dynamic_slice %iterArg_28, %123, %c_79, %c_80, sizes = [1, 512, 2048] : (tensor<16x512x2048xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x512x2048xbf16> loc(#loc426)
      %125 = stablehlo.reshape %124 : (tensor<1x512x2048xbf16>) -> tensor<512x2048xbf16> loc(#loc427)
      %c_81 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %126 = stablehlo.compare  LT, %iterArg_50, %c_81,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc422)
      %127 = stablehlo.convert %iterArg_50 : tensor<i32> loc(#loc423)
      %c_82 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %128 = stablehlo.add %127, %c_82 : tensor<i32> loc(#loc424)
      %129 = stablehlo.select %126, %128, %iterArg_50 : tensor<i1>, tensor<i32> loc(#loc425)
      %c_83 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %c_84 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %130 = stablehlo.dynamic_slice %iterArg_29, %129, %c_83, %c_84, sizes = [1, 2048, 16] : (tensor<16x2048x16xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x2048x16xbf16> loc(#loc426)
      %131 = stablehlo.reshape %130 : (tensor<1x2048x16xbf16>) -> tensor<2048x16xbf16> loc(#loc427)
      %c_85 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %132 = stablehlo.compare  LT, %iterArg_50, %c_85,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc422)
      %133 = stablehlo.convert %iterArg_50 : tensor<i32> loc(#loc423)
      %c_86 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %134 = stablehlo.add %133, %c_86 : tensor<i32> loc(#loc424)
      %135 = stablehlo.select %132, %134, %iterArg_50 : tensor<i1>, tensor<i32> loc(#loc425)
      %c_87 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %c_88 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %136 = stablehlo.dynamic_slice %iterArg_30, %135, %c_87, %c_88, sizes = [1, 16, 512] : (tensor<16x16x512xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x16x512xbf16> loc(#loc426)
      %137 = stablehlo.reshape %136 : (tensor<1x16x512xbf16>) -> tensor<16x512xbf16> loc(#loc427)
      %c_89 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %138 = stablehlo.compare  LT, %iterArg_50, %c_89,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc422)
      %139 = stablehlo.convert %iterArg_50 : tensor<i32> loc(#loc423)
      %c_90 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %140 = stablehlo.add %139, %c_90 : tensor<i32> loc(#loc424)
      %141 = stablehlo.select %138, %140, %iterArg_50 : tensor<i1>, tensor<i32> loc(#loc425)
      %c_91 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %c_92 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %142 = stablehlo.dynamic_slice %iterArg_31, %141, %c_91, %c_92, sizes = [1, 2048, 2048] : (tensor<16x2048x2048xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x2048x2048xbf16> loc(#loc426)
      %143 = stablehlo.reshape %142 : (tensor<1x2048x2048xbf16>) -> tensor<2048x2048xbf16> loc(#loc427)
      %c_93 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %144 = stablehlo.compare  LT, %iterArg_50, %c_93,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc422)
      %145 = stablehlo.convert %iterArg_50 : tensor<i32> loc(#loc423)
      %c_94 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %146 = stablehlo.add %145, %c_94 : tensor<i32> loc(#loc424)
      %147 = stablehlo.select %144, %146, %iterArg_50 : tensor<i1>, tensor<i32> loc(#loc425)
      %c_95 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %c_96 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %148 = stablehlo.dynamic_slice %iterArg_32, %147, %c_95, %c_96, sizes = [1, 2048, 16] : (tensor<16x2048x16xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x2048x16xbf16> loc(#loc426)
      %149 = stablehlo.reshape %148 : (tensor<1x2048x16xbf16>) -> tensor<2048x16xbf16> loc(#loc427)
      %c_97 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %150 = stablehlo.compare  LT, %iterArg_50, %c_97,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc422)
      %151 = stablehlo.convert %iterArg_50 : tensor<i32> loc(#loc423)
      %c_98 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %152 = stablehlo.add %151, %c_98 : tensor<i32> loc(#loc424)
      %153 = stablehlo.select %150, %152, %iterArg_50 : tensor<i1>, tensor<i32> loc(#loc425)
      %c_99 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %c_100 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %154 = stablehlo.dynamic_slice %iterArg_33, %153, %c_99, %c_100, sizes = [1, 16, 2048] : (tensor<16x16x2048xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x16x2048xbf16> loc(#loc426)
      %155 = stablehlo.reshape %154 : (tensor<1x16x2048xbf16>) -> tensor<16x2048xbf16> loc(#loc427)
      %c_101 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %156 = stablehlo.compare  LT, %iterArg_50, %c_101,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc422)
      %157 = stablehlo.convert %iterArg_50 : tensor<i32> loc(#loc423)
      %c_102 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %158 = stablehlo.add %157, %c_102 : tensor<i32> loc(#loc424)
      %159 = stablehlo.select %156, %158, %iterArg_50 : tensor<i1>, tensor<i32> loc(#loc425)
      %c_103 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %160 = stablehlo.dynamic_slice %iterArg_34, %159, %c_103, sizes = [1, 32] : (tensor<16x32xf32>, tensor<i32>, tensor<i32>) -> tensor<1x32xf32> loc(#loc426)
      %161 = stablehlo.reshape %160 : (tensor<1x32xf32>) -> tensor<32xf32> loc(#loc427)
      %c_104 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %162 = stablehlo.compare  LT, %iterArg_50, %c_104,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc422)
      %163 = stablehlo.convert %iterArg_50 : tensor<i32> loc(#loc423)
      %c_105 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %164 = stablehlo.add %163, %c_105 : tensor<i32> loc(#loc424)
      %165 = stablehlo.select %162, %164, %iterArg_50 : tensor<i1>, tensor<i32> loc(#loc425)
      %c_106 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %c_107 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %166 = stablehlo.dynamic_slice %iterArg_35, %165, %c_106, %c_107, sizes = [1, 8192, 2048] : (tensor<16x8192x2048xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x8192x2048xbf16> loc(#loc426)
      %167 = stablehlo.reshape %166 : (tensor<1x8192x2048xbf16>) -> tensor<8192x2048xbf16> loc(#loc427)
      %c_108 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %168 = stablehlo.compare  LT, %iterArg_50, %c_108,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc422)
      %169 = stablehlo.convert %iterArg_50 : tensor<i32> loc(#loc423)
      %c_109 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %170 = stablehlo.add %169, %c_109 : tensor<i32> loc(#loc424)
      %171 = stablehlo.select %168, %170, %iterArg_50 : tensor<i1>, tensor<i32> loc(#loc425)
      %c_110 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %c_111 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %172 = stablehlo.dynamic_slice %iterArg_36, %171, %c_110, %c_111, sizes = [1, 2048, 16] : (tensor<16x2048x16xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x2048x16xbf16> loc(#loc426)
      %173 = stablehlo.reshape %172 : (tensor<1x2048x16xbf16>) -> tensor<2048x16xbf16> loc(#loc427)
      %c_112 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %174 = stablehlo.compare  LT, %iterArg_50, %c_112,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc422)
      %175 = stablehlo.convert %iterArg_50 : tensor<i32> loc(#loc423)
      %c_113 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %176 = stablehlo.add %175, %c_113 : tensor<i32> loc(#loc424)
      %177 = stablehlo.select %174, %176, %iterArg_50 : tensor<i1>, tensor<i32> loc(#loc425)
      %c_114 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %c_115 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %178 = stablehlo.dynamic_slice %iterArg_37, %177, %c_114, %c_115, sizes = [1, 16, 8192] : (tensor<16x16x8192xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x16x8192xbf16> loc(#loc426)
      %179 = stablehlo.reshape %178 : (tensor<1x16x8192xbf16>) -> tensor<16x8192xbf16> loc(#loc427)
      %c_116 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %180 = stablehlo.compare  LT, %iterArg_50, %c_116,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc422)
      %181 = stablehlo.convert %iterArg_50 : tensor<i32> loc(#loc423)
      %c_117 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %182 = stablehlo.add %181, %c_117 : tensor<i32> loc(#loc424)
      %183 = stablehlo.select %180, %182, %iterArg_50 : tensor<i1>, tensor<i32> loc(#loc425)
      %c_118 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %c_119 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %184 = stablehlo.dynamic_slice %iterArg_38, %183, %c_118, %c_119, sizes = [1, 8192, 2048] : (tensor<16x8192x2048xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x8192x2048xbf16> loc(#loc426)
      %185 = stablehlo.reshape %184 : (tensor<1x8192x2048xbf16>) -> tensor<8192x2048xbf16> loc(#loc427)
      %c_120 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %186 = stablehlo.compare  LT, %iterArg_50, %c_120,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc422)
      %187 = stablehlo.convert %iterArg_50 : tensor<i32> loc(#loc423)
      %c_121 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %188 = stablehlo.add %187, %c_121 : tensor<i32> loc(#loc424)
      %189 = stablehlo.select %186, %188, %iterArg_50 : tensor<i1>, tensor<i32> loc(#loc425)
      %c_122 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %c_123 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %190 = stablehlo.dynamic_slice %iterArg_39, %189, %c_122, %c_123, sizes = [1, 2048, 16] : (tensor<16x2048x16xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x2048x16xbf16> loc(#loc426)
      %191 = stablehlo.reshape %190 : (tensor<1x2048x16xbf16>) -> tensor<2048x16xbf16> loc(#loc427)
      %c_124 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %192 = stablehlo.compare  LT, %iterArg_50, %c_124,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc422)
      %193 = stablehlo.convert %iterArg_50 : tensor<i32> loc(#loc423)
      %c_125 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %194 = stablehlo.add %193, %c_125 : tensor<i32> loc(#loc424)
      %195 = stablehlo.select %192, %194, %iterArg_50 : tensor<i1>, tensor<i32> loc(#loc425)
      %c_126 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %c_127 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %196 = stablehlo.dynamic_slice %iterArg_40, %195, %c_126, %c_127, sizes = [1, 16, 8192] : (tensor<16x16x8192xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x16x8192xbf16> loc(#loc426)
      %197 = stablehlo.reshape %196 : (tensor<1x16x8192xbf16>) -> tensor<16x8192xbf16> loc(#loc427)
      %c_128 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %198 = stablehlo.compare  LT, %iterArg_50, %c_128,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc422)
      %199 = stablehlo.convert %iterArg_50 : tensor<i32> loc(#loc423)
      %c_129 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %200 = stablehlo.add %199, %c_129 : tensor<i32> loc(#loc424)
      %201 = stablehlo.select %198, %200, %iterArg_50 : tensor<i1>, tensor<i32> loc(#loc425)
      %c_130 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %c_131 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %202 = stablehlo.dynamic_slice %iterArg_41, %201, %c_130, %c_131, sizes = [1, 2048, 8192] : (tensor<16x2048x8192xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x2048x8192xbf16> loc(#loc426)
      %203 = stablehlo.reshape %202 : (tensor<1x2048x8192xbf16>) -> tensor<2048x8192xbf16> loc(#loc427)
      %c_132 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %204 = stablehlo.compare  LT, %iterArg_50, %c_132,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc422)
      %205 = stablehlo.convert %iterArg_50 : tensor<i32> loc(#loc423)
      %c_133 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %206 = stablehlo.add %205, %c_133 : tensor<i32> loc(#loc424)
      %207 = stablehlo.select %204, %206, %iterArg_50 : tensor<i1>, tensor<i32> loc(#loc425)
      %c_134 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %c_135 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %208 = stablehlo.dynamic_slice %iterArg_42, %207, %c_134, %c_135, sizes = [1, 8192, 16] : (tensor<16x8192x16xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x8192x16xbf16> loc(#loc426)
      %209 = stablehlo.reshape %208 : (tensor<1x8192x16xbf16>) -> tensor<8192x16xbf16> loc(#loc427)
      %c_136 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %210 = stablehlo.compare  LT, %iterArg_50, %c_136,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc422)
      %211 = stablehlo.convert %iterArg_50 : tensor<i32> loc(#loc423)
      %c_137 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %212 = stablehlo.add %211, %c_137 : tensor<i32> loc(#loc424)
      %213 = stablehlo.select %210, %212, %iterArg_50 : tensor<i1>, tensor<i32> loc(#loc425)
      %c_138 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %c_139 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %214 = stablehlo.dynamic_slice %iterArg_43, %213, %c_138, %c_139, sizes = [1, 16, 2048] : (tensor<16x16x2048xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x16x2048xbf16> loc(#loc426)
      %215 = stablehlo.reshape %214 : (tensor<1x16x2048xbf16>) -> tensor<16x2048xbf16> loc(#loc427)
      %c_140 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %216 = stablehlo.compare  LT, %iterArg_50, %c_140,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc422)
      %217 = stablehlo.convert %iterArg_50 : tensor<i32> loc(#loc423)
      %c_141 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %218 = stablehlo.add %217, %c_141 : tensor<i32> loc(#loc424)
      %219 = stablehlo.select %216, %218, %iterArg_50 : tensor<i1>, tensor<i32> loc(#loc425)
      %c_142 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %220 = stablehlo.dynamic_slice %iterArg_44, %219, %c_142, sizes = [1, 2048] : (tensor<16x2048xf32>, tensor<i32>, tensor<i32>) -> tensor<1x2048xf32> loc(#loc426)
      %221 = stablehlo.reshape %220 : (tensor<1x2048xf32>) -> tensor<2048xf32> loc(#loc427)
      %c_143 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %222 = stablehlo.compare  LT, %iterArg_50, %c_143,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc422)
      %223 = stablehlo.convert %iterArg_50 : tensor<i32> loc(#loc423)
      %c_144 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %224 = stablehlo.add %223, %c_144 : tensor<i32> loc(#loc424)
      %225 = stablehlo.select %222, %224, %iterArg_50 : tensor<i1>, tensor<i32> loc(#loc425)
      %c_145 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %226 = stablehlo.dynamic_slice %iterArg_45, %225, %c_145, sizes = [1, 2048] : (tensor<16x2048xf32>, tensor<i32>, tensor<i32>) -> tensor<1x2048xf32> loc(#loc426)
      %227 = stablehlo.reshape %226 : (tensor<1x2048xf32>) -> tensor<2048xf32> loc(#loc427)
      %228:2 = func.call @None(%iterArg_46, %iterArg_47, %iterArg_48, %iterArg_49, %iterArg_51, %89, %95, %101, %107, %113, %119, %125, %131, %137, %143, %149, %155, %161, %167, %173, %179, %185, %191, %197, %203, %209, %215, %221, %227) : (tensor<8x32x1xf32>, tensor<f32>, tensor<8x32x32x32xi1>, tensor<8x32x32x32xf32>, tensor<8x32x2048xbf16>, tensor<2048x2048xbf16>, tensor<2048x16xbf16>, tensor<16x2048xbf16>, tensor<512x2048xbf16>, tensor<2048x16xbf16>, tensor<16x512xbf16>, tensor<512x2048xbf16>, tensor<2048x16xbf16>, tensor<16x512xbf16>, tensor<2048x2048xbf16>, tensor<2048x16xbf16>, tensor<16x2048xbf16>, tensor<32xf32>, tensor<8192x2048xbf16>, tensor<2048x16xbf16>, tensor<16x8192xbf16>, tensor<8192x2048xbf16>, tensor<2048x16xbf16>, tensor<16x8192xbf16>, tensor<2048x8192xbf16>, tensor<8192x16xbf16>, tensor<16x2048xbf16>, tensor<2048xf32>, tensor<2048xf32>) -> (tensor<8x32x2048xbf16>, tensor<8x32x2048xbf16>) loc(#loc428)
      %229 = stablehlo.broadcast_in_dim %228#1, dims = [1, 2, 3] : (tensor<8x32x2048xbf16>) -> tensor<1x8x32x2048xbf16> loc(#loc429)
      %c_146 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %230 = stablehlo.compare  LT, %iterArg_50, %c_146,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc422)
      %231 = stablehlo.convert %iterArg_50 : tensor<i32> loc(#loc423)
      %c_147 = stablehlo.constant dense<16> : tensor<i32> loc(#loc420)
      %232 = stablehlo.add %231, %c_147 : tensor<i32> loc(#loc424)
      %233 = stablehlo.select %230, %232, %iterArg_50 : tensor<i1>, tensor<i32> loc(#loc425)
      %c_148 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %c_149 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %c_150 = stablehlo.constant dense<0> : tensor<i32> loc(#loc420)
      %234 = stablehlo.dynamic_update_slice %iterArg_52, %229, %233, %c_148, %c_149, %c_150 : (tensor<16x8x32x2048xbf16>, tensor<1x8x32x2048xbf16>, tensor<i32>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<16x8x32x2048xbf16> loc(#loc430)
      %c_151 = stablehlo.constant dense<1> : tensor<i32> loc(#loc420)
      %235 = stablehlo.add %iterArg_50, %c_151 : tensor<i32> loc(#loc424)
      stablehlo.return %iterArg, %iterArg_23, %iterArg_24, %iterArg_25, %iterArg_26, %iterArg_27, %iterArg_28, %iterArg_29, %iterArg_30, %iterArg_31, %iterArg_32, %iterArg_33, %iterArg_34, %iterArg_35, %iterArg_36, %iterArg_37, %iterArg_38, %iterArg_39, %iterArg_40, %iterArg_41, %iterArg_42, %iterArg_43, %iterArg_44, %iterArg_45, %iterArg_46, %iterArg_47, %iterArg_48, %iterArg_49, %235, %228#0, %234 : tensor<16x2048x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x512x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x512x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x2048x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x32xf32>, tensor<16x8192x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x8192x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x2048x8192xbf16>, tensor<16x8192x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x2048xf32>, tensor<16x2048xf32>, tensor<8x32x1xf32>, tensor<f32>, tensor<8x32x32x32xi1>, tensor<8x32x32x32xf32>, tensor<i32>, tensor<8x32x2048xbf16>, tensor<16x8x32x2048xbf16> loc(#loc420)
    } loc(#loc420)
    %14 = stablehlo.multiply %13#29, %13#29 : tensor<8x32x2048xbf16> loc(#loc483)
    %15 = call @integer_pow(%13#29) : (tensor<8x32x2048xbf16>) -> tensor<8x32x2048xbf16> loc(#loc483)
    %cst_4 = stablehlo.constant dense<2.000000e+00> : tensor<bf16> loc(#loc292)
    %16 = stablehlo.broadcast_in_dim %cst_4, dims = [] : (tensor<bf16>) -> tensor<8x32x2048xbf16> loc(#loc484)
    %17 = stablehlo.multiply %16, %15 : tensor<8x32x2048xbf16> loc(#loc484)
    %18 = stablehlo.convert %14 : (tensor<8x32x2048xbf16>) -> tensor<8x32x2048xf32> loc(#loc485)
    %cst_5 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc486)
    %19 = stablehlo.reduce(%18 init: %cst_5) applies stablehlo.add across dimensions = [2] : (tensor<8x32x2048xf32>, tensor<f32>) -> tensor<8x32xf32> loc(#loc486)
    %20 = stablehlo.broadcast_in_dim %19, dims = [0, 1] : (tensor<8x32xf32>) -> tensor<8x32x1xf32> loc(#loc487)
    %cst_6 = stablehlo.constant dense<2.048000e+03> : tensor<f32> loc(#loc292)
    %21 = stablehlo.broadcast_in_dim %cst_6, dims = [] : (tensor<f32>) -> tensor<8x32x1xf32> loc(#loc488)
    %22 = stablehlo.divide %20, %21 : tensor<8x32x1xf32> loc(#loc488)
    %23 = stablehlo.convert %22 : (tensor<8x32x1xf32>) -> tensor<8x32x1xbf16> loc(#loc485)
    %cst_7 = stablehlo.constant dense<1.001360e-05> : tensor<bf16> loc(#loc292)
    %24 = stablehlo.broadcast_in_dim %cst_7, dims = [] : (tensor<bf16>) -> tensor<8x32x1xbf16> loc(#loc489)
    %25 = stablehlo.add %23, %24 : tensor<8x32x1xbf16> loc(#loc489)
    %26 = stablehlo.rsqrt %25 : tensor<8x32x1xbf16> loc(#loc490)
    %27 = stablehlo.divide %26, %25 : tensor<8x32x1xbf16> loc(#loc491)
    %cst_8 = stablehlo.constant dense<-5.000000e-01> : tensor<bf16> loc(#loc292)
    %28 = stablehlo.broadcast_in_dim %cst_8, dims = [] : (tensor<bf16>) -> tensor<8x32x1xbf16> loc(#loc492)
    %29 = stablehlo.multiply %28, %27 : tensor<8x32x1xbf16> loc(#loc492)
    %30 = stablehlo.broadcast_in_dim %26, dims = [0, 1, 2] : (tensor<8x32x1xbf16>) -> tensor<8x32x2048xbf16> loc(#loc492)
    %31 = stablehlo.multiply %13#29, %30 : tensor<8x32x2048xbf16> loc(#loc492)
    %32 = stablehlo.convert %arg25 : (tensor<2048xf32>) -> tensor<2048xbf16> loc(#loc493)
    %33 = stablehlo.broadcast_in_dim %32, dims = [2] : (tensor<2048xbf16>) -> tensor<1x1x2048xbf16> loc(#loc494)
    %34 = stablehlo.broadcast_in_dim %33, dims = [0, 1, 2] : (tensor<1x1x2048xbf16>) -> tensor<8x32x2048xbf16> loc(#loc495)
    %35 = stablehlo.multiply %34, %31 : tensor<8x32x2048xbf16> loc(#loc495)
    %36 = stablehlo.transpose %arg26, dims = [1, 0] : (tensor<128256x2048xbf16>) -> tensor<2048x128256xbf16> loc(#loc434)
    %37 = stablehlo.dot_general %35, %36, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x128256xbf16>) -> tensor<8x32x128256xbf16> loc(#loc435)
    %38 = stablehlo.dot_general %35, %arg27, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x16xbf16>) -> tensor<8x32x16xbf16> loc(#loc436)
    %39 = stablehlo.dot_general %38, %arg28, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<16x128256xbf16>) -> tensor<8x32x128256xbf16> loc(#loc436)
    %cst_9 = stablehlo.constant dense<6.250000e-02> : tensor<bf16> loc(#loc292)
    %40 = stablehlo.broadcast_in_dim %cst_9, dims = [] : (tensor<bf16>) -> tensor<8x32x128256xbf16> loc(#loc437)
    %41 = stablehlo.multiply %39, %40 : tensor<8x32x128256xbf16> loc(#loc437)
    %42 = stablehlo.add %37, %41 : tensor<8x32x128256xbf16> loc(#loc438)
    %43 = stablehlo.slice %42 [0:8, 0:31, 0:128256] : (tensor<8x32x128256xbf16>) -> tensor<8x31x128256xbf16> loc(#loc309)
    %44 = stablehlo.slice %arg30 [0:8, 1:32] : (tensor<8x32xi32>) -> tensor<8x31xi32> loc(#loc310)
    %cst_10 = stablehlo.constant dense<1.000000e+00> : tensor<f32> loc(#loc292)
    %45 = stablehlo.broadcast_in_dim %cst_10, dims = [] : (tensor<f32>) -> tensor<8x31xf32> loc(#loc341)
    %cst_11 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc342)
    %46 = stablehlo.reduce(%45 init: %cst_11) applies stablehlo.add across dimensions = [1] : (tensor<8x31xf32>, tensor<f32>) -> tensor<8xf32> loc(#loc342)
    %cst_12 = stablehlo.constant dense<1.000000e-10> : tensor<f32> loc(#loc292)
    %47 = stablehlo.broadcast_in_dim %cst_12, dims = [] : (tensor<f32>) -> tensor<8xf32> loc(#loc343)
    %48 = stablehlo.maximum %46, %47 : tensor<8xf32> loc(#loc343)
    %49 = stablehlo.convert %43 : (tensor<8x31x128256xbf16>) -> tensor<8x31x128256xf32> loc(#loc344)
    %50 = stablehlo.reshape %49 : (tensor<8x31x128256xf32>) -> tensor<248x128256xf32> loc(#loc345)
    %51 = stablehlo.reshape %44 : (tensor<8x31xi32>) -> tensor<248xi32> loc(#loc346)
    %52 = stablehlo.reshape %45 : (tensor<8x31xf32>) -> tensor<248xf32> loc(#loc347)
    %53:3 = call @log_softmax(%50) : (tensor<248x128256xf32>) -> (tensor<248x128256xf32>, tensor<248x128256xf32>, tensor<248x1xf32>) loc(#loc348)
    %54 = stablehlo.iota dim = 0 : tensor<248xi32> loc(#loc349)
    %c_13 = stablehlo.constant dense<0> : tensor<i32> loc(#loc292)
    %55 = stablehlo.broadcast_in_dim %c_13, dims = [] : (tensor<i32>) -> tensor<248xi32> loc(#loc350)
    %56 = stablehlo.compare  LT, %54, %55,  SIGNED : (tensor<248xi32>, tensor<248xi32>) -> tensor<248xi1> loc(#loc350)
    %c_14 = stablehlo.constant dense<248> : tensor<i32> loc(#loc292)
    %57 = stablehlo.broadcast_in_dim %c_14, dims = [] : (tensor<i32>) -> tensor<248xi32> loc(#loc351)
    %58 = stablehlo.add %54, %57 : tensor<248xi32> loc(#loc351)
    %59 = stablehlo.select %56, %58, %54 : tensor<248xi1>, tensor<248xi32> loc(#loc352)
    %c_15 = stablehlo.constant dense<0> : tensor<i32> loc(#loc292)
    %60 = stablehlo.broadcast_in_dim %c_15, dims = [] : (tensor<i32>) -> tensor<248xi32> loc(#loc350)
    %61 = stablehlo.compare  LT, %51, %60,  SIGNED : (tensor<248xi32>, tensor<248xi32>) -> tensor<248xi1> loc(#loc350)
    %c_16 = stablehlo.constant dense<128256> : tensor<i32> loc(#loc292)
    %62 = stablehlo.broadcast_in_dim %c_16, dims = [] : (tensor<i32>) -> tensor<248xi32> loc(#loc351)
    %63 = stablehlo.add %51, %62 : tensor<248xi32> loc(#loc351)
    %64 = stablehlo.select %61, %63, %51 : tensor<248xi1>, tensor<248xi32> loc(#loc352)
    %65 = stablehlo.broadcast_in_dim %59, dims = [0] : (tensor<248xi32>) -> tensor<248x1xi32> loc(#loc353)
    %66 = stablehlo.broadcast_in_dim %64, dims = [0] : (tensor<248xi32>) -> tensor<248x1xi32> loc(#loc353)
    %67 = stablehlo.concatenate %65, %66, dim = 1 : (tensor<248x1xi32>, tensor<248x1xi32>) -> tensor<248x2xi32> loc(#loc354)
    %68 = "stablehlo.gather"(%53#0, %67) <{dimension_numbers = #stablehlo.gather<collapsed_slice_dims = [0, 1], start_index_map = [0, 1], index_vector_dim = 1>, indices_are_sorted = false, slice_sizes = array<i64: 1, 1>}> : (tensor<248x128256xf32>, tensor<248x2xi32>) -> tensor<248xf32> loc(#loc355)
    %69 = stablehlo.multiply %68, %52 : tensor<248xf32> loc(#loc356)
    %70 = stablehlo.reshape %69 : (tensor<248xf32>) -> tensor<8x31xf32> loc(#loc357)
    %cst_17 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc358)
    %71 = stablehlo.reduce(%70 init: %cst_17) applies stablehlo.add across dimensions = [1] : (tensor<8x31xf32>, tensor<f32>) -> tensor<8xf32> loc(#loc358)
    %72 = stablehlo.divide %71, %48 : tensor<8xf32> loc(#loc359)
    %cst_18 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc358)
    %73 = stablehlo.reduce(%72 init: %cst_18) applies stablehlo.add across dimensions = [0] : (tensor<8xf32>, tensor<f32>) -> tensor<f32> loc(#loc358)
    %cst_19 = stablehlo.constant dense<8.000000e+00> : tensor<f32> loc(#loc292)
    %74 = stablehlo.divide %73, %cst_19 : tensor<f32> loc(#loc359)
    %75 = stablehlo.negate %74 : tensor<f32> loc(#loc360)
    %76 = call @argmax(%49) : (tensor<8x31x128256xf32>) -> tensor<8x31xi32> loc(#loc361)
    %77 = stablehlo.compare  EQ, %76, %44,  SIGNED : (tensor<8x31xi32>, tensor<8x31xi32>) -> tensor<8x31xi1> loc(#loc362)
    %78 = stablehlo.convert %77 : (tensor<8x31xi1>) -> tensor<8x31xf32> loc(#loc363)
    %79 = stablehlo.multiply %78, %45 : tensor<8x31xf32> loc(#loc364)
    %cst_20 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc365)
    %80 = stablehlo.reduce(%79 init: %cst_20) applies stablehlo.add across dimensions = [1] : (tensor<8x31xf32>, tensor<f32>) -> tensor<8xf32> loc(#loc365)
    %81 = stablehlo.divide %80, %48 : tensor<8xf32> loc(#loc366)
    %cst_21 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc365)
    %82 = stablehlo.reduce(%81 init: %cst_21) applies stablehlo.add across dimensions = [0] : (tensor<8xf32>, tensor<f32>) -> tensor<f32> loc(#loc365)
    %cst_22 = stablehlo.constant dense<8.000000e+00> : tensor<f32> loc(#loc292)
    %83 = stablehlo.divide %82, %cst_22 : tensor<f32> loc(#loc366)
    return %75, %83, %33, %13#30, %26, %13#29, %17, %29, %36, %35, %38, %53#1, %53#2, %67, %52, %48 : tensor<f32>, tensor<f32>, tensor<1x1x2048xbf16>, tensor<16x8x32x2048xbf16>, tensor<8x32x1xbf16>, tensor<8x32x2048xbf16>, tensor<8x32x2048xbf16>, tensor<8x32x1xbf16>, tensor<2048x128256xbf16>, tensor<8x32x2048xbf16>, tensor<8x32x16xbf16>, tensor<248x128256xf32>, tensor<248x1xf32>, tensor<248x2xi32>, tensor<248xf32>, tensor<8xf32> loc(#loc292)
  } loc(#loc292)
  func.func private @_take(%arg0: tensor<128256x2048xf32> loc("jit(training_step)/jit(main)/jvp(jit(forward))/pjit"(#loc413)), %arg1: tensor<8x32xi32> loc("jit(training_step)/jit(main)/jvp(jit(forward))/pjit"(#loc413))) -> tensor<8x32x2048xf32> {
    %c = stablehlo.constant dense<0> : tensor<i32> loc(#loc480)
    %0 = stablehlo.broadcast_in_dim %c, dims = [] : (tensor<i32>) -> tensor<8x32xi32> loc(#loc496)
    %1 = stablehlo.compare  LT, %arg1, %0,  SIGNED : (tensor<8x32xi32>, tensor<8x32xi32>) -> tensor<8x32xi1> loc(#loc496)
    %c_0 = stablehlo.constant dense<128256> : tensor<i32> loc(#loc480)
    %2 = stablehlo.broadcast_in_dim %c_0, dims = [] : (tensor<i32>) -> tensor<8x32xi32> loc(#loc497)
    %3 = stablehlo.add %arg1, %2 : tensor<8x32xi32> loc(#loc497)
    %4 = call @_where(%1, %3, %arg1) : (tensor<8x32xi1>, tensor<8x32xi32>, tensor<8x32xi32>) -> tensor<8x32xi32> loc(#loc498)
    %5 = stablehlo.broadcast_in_dim %4, dims = [0, 1] : (tensor<8x32xi32>) -> tensor<8x32x1xi32> loc(#loc499)
    %c_1 = stablehlo.constant dense<0> : tensor<1xi32> loc(#loc500)
    %c_2 = stablehlo.constant dense<0> : tensor<1xi32> loc(#loc500)
    %c_3 = stablehlo.constant dense<128256> : tensor<i32> loc(#loc500)
    %6 = stablehlo.broadcast_in_dim %c_3, dims = [] : (tensor<i32>) -> tensor<1xi32> loc(#loc499)
    %c_4 = stablehlo.constant dense<2048> : tensor<i32> loc(#loc500)
    %7 = stablehlo.broadcast_in_dim %c_4, dims = [] : (tensor<i32>) -> tensor<1xi32> loc(#loc499)
    %8 = stablehlo.concatenate %6, %7, dim = 0 : (tensor<1xi32>, tensor<1xi32>) -> tensor<2xi32> loc(#loc501)
    %c_5 = stablehlo.constant dense<0> : tensor<i32> loc(#loc500)
    %9 = stablehlo.broadcast_in_dim %c_5, dims = [] : (tensor<i32>) -> tensor<1xi32> loc(#loc496)
    %10 = stablehlo.compare  LT, %c_1, %9,  SIGNED : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi1> loc(#loc496)
    %c_6 = stablehlo.constant dense<2> : tensor<i32> loc(#loc500)
    %11 = stablehlo.broadcast_in_dim %c_6, dims = [] : (tensor<i32>) -> tensor<1xi32> loc(#loc497)
    %12 = stablehlo.add %c_1, %11 : tensor<1xi32> loc(#loc497)
    %13 = stablehlo.select %10, %12, %c_1 : tensor<1xi1>, tensor<1xi32> loc(#loc502)
    %14 = stablehlo.broadcast_in_dim %13, dims = [0] : (tensor<1xi32>) -> tensor<1x1xi32> loc(#loc499)
    %15 = "stablehlo.gather"(%8, %14) <{dimension_numbers = #stablehlo.gather<collapsed_slice_dims = [0], start_index_map = [0], index_vector_dim = 1>, indices_are_sorted = false, slice_sizes = array<i64: 1>}> : (tensor<2xi32>, tensor<1x1xi32>) -> tensor<1xi32> loc(#loc500)
    %c_7 = stablehlo.constant dense<1> : tensor<i32> loc(#loc500)
    %16 = stablehlo.broadcast_in_dim %c_7, dims = [] : (tensor<i32>) -> tensor<1xi32> loc(#loc499)
    %c_8 = stablehlo.constant dense<2048> : tensor<i32> loc(#loc500)
    %17 = stablehlo.broadcast_in_dim %c_8, dims = [] : (tensor<i32>) -> tensor<1xi32> loc(#loc499)
    %18 = stablehlo.concatenate %16, %17, dim = 0 : (tensor<1xi32>, tensor<1xi32>) -> tensor<2xi32> loc(#loc501)
    %c_9 = stablehlo.constant dense<0> : tensor<i32> loc(#loc500)
    %19 = stablehlo.broadcast_in_dim %c_9, dims = [] : (tensor<i32>) -> tensor<1xi32> loc(#loc496)
    %20 = stablehlo.compare  LT, %c_2, %19,  SIGNED : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi1> loc(#loc496)
    %c_10 = stablehlo.constant dense<2> : tensor<i32> loc(#loc500)
    %21 = stablehlo.broadcast_in_dim %c_10, dims = [] : (tensor<i32>) -> tensor<1xi32> loc(#loc497)
    %22 = stablehlo.add %c_2, %21 : tensor<1xi32> loc(#loc497)
    %23 = stablehlo.select %20, %22, %c_2 : tensor<1xi1>, tensor<1xi32> loc(#loc502)
    %24 = stablehlo.broadcast_in_dim %23, dims = [0] : (tensor<1xi32>) -> tensor<1x1xi32> loc(#loc499)
    %25 = "stablehlo.gather"(%18, %24) <{dimension_numbers = #stablehlo.gather<collapsed_slice_dims = [0], start_index_map = [0], index_vector_dim = 1>, indices_are_sorted = false, slice_sizes = array<i64: 1>}> : (tensor<2xi32>, tensor<1x1xi32>) -> tensor<1xi32> loc(#loc500)
    %26 = stablehlo.subtract %15, %25 : tensor<1xi32> loc(#loc503)
    %c_11 = stablehlo.constant dense<0> : tensor<i32> loc(#loc500)
    %27 = stablehlo.broadcast_in_dim %c_11, dims = [] : (tensor<i32>) -> tensor<8x32x1xi32> loc(#loc504)
    %28 = stablehlo.compare  GE, %5, %27,  SIGNED : (tensor<8x32x1xi32>, tensor<8x32x1xi32>) -> tensor<8x32x1xi1> loc(#loc504)
    %29 = stablehlo.broadcast_in_dim %26, dims = [2] : (tensor<1xi32>) -> tensor<1x1x1xi32> loc(#loc499)
    %30 = stablehlo.broadcast_in_dim %29, dims = [0, 1, 2] : (tensor<1x1x1xi32>) -> tensor<8x32x1xi32> loc(#loc505)
    %31 = stablehlo.compare  LE, %5, %30,  SIGNED : (tensor<8x32x1xi32>, tensor<8x32x1xi32>) -> tensor<8x32x1xi1> loc(#loc505)
    %32 = stablehlo.and %28, %31 : tensor<8x32x1xi1> loc(#loc506)
    %c_12 = stablehlo.constant dense<true> : tensor<i1> loc(#loc507)
    %33 = stablehlo.reduce(%32 init: %c_12) applies stablehlo.and across dimensions = [2] : (tensor<8x32x1xi1>, tensor<i1>) -> tensor<8x32xi1> loc(#loc507)
    %34 = "stablehlo.gather"(%arg0, %5) <{dimension_numbers = #stablehlo.gather<offset_dims = [2], collapsed_slice_dims = [0], start_index_map = [0], index_vector_dim = 2>, indices_are_sorted = false, slice_sizes = array<i64: 1, 2048>}> : (tensor<128256x2048xf32>, tensor<8x32x1xi32>) -> tensor<8x32x2048xf32> loc(#loc500)
    %35 = stablehlo.broadcast_in_dim %33, dims = [0, 1] : (tensor<8x32xi1>) -> tensor<8x32x2048xi1> loc(#loc499)
    %cst = stablehlo.constant dense<0x7FC00000> : tensor<f32> loc(#loc500)
    %36 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<8x32x2048xf32> loc(#loc499)
    %37 = stablehlo.select %35, %34, %36 : tensor<8x32x2048xi1>, tensor<8x32x2048xf32> loc(#loc502)
    return %37 : tensor<8x32x2048xf32> loc(#loc480)
  } loc(#loc480)
  func.func private @_where(%arg0: tensor<8x32xi1> loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(_take)/pjit"(#loc413)), %arg1: tensor<8x32xi32> loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(_take)/pjit"(#loc413)), %arg2: tensor<8x32xi32> loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(_take)/pjit"(#loc413))) -> tensor<8x32xi32> {
    %0 = stablehlo.select %arg0, %arg1, %arg2 : tensor<8x32xi1>, tensor<8x32xi32> loc(#loc508)
    return %0 : tensor<8x32xi32> loc(#loc498)
  } loc(#loc498)
  func.func private @tril(%arg0: tensor<32x32xf32> loc("jit(training_step)/jit(main)/jvp(jit(forward))/pjit"(#loc562))) -> tensor<32x32xf32> {
    %0 = stablehlo.iota dim = 0 : tensor<32x32xi32> loc(#loc626)
    %c = stablehlo.constant dense<0> : tensor<i32> loc(#loc622)
    %1 = stablehlo.broadcast_in_dim %c, dims = [] : (tensor<i32>) -> tensor<32x32xi32> loc(#loc627)
    %2 = stablehlo.add %0, %1 : tensor<32x32xi32> loc(#loc627)
    %3 = stablehlo.iota dim = 1 : tensor<32x32xi32> loc(#loc626)
    %4 = stablehlo.compare  GE, %2, %3,  SIGNED : (tensor<32x32xi32>, tensor<32x32xi32>) -> tensor<32x32xi1> loc(#loc628)
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc622)
    %5 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<32x32xf32> loc(#loc629)
    %6 = stablehlo.select %4, %arg0, %5 : tensor<32x32xi1>, tensor<32x32xf32> loc(#loc630)
    return %6 : tensor<32x32xf32> loc(#loc622)
  } loc(#loc622)
  func.func private @_where_0(%arg0: tensor<1x1x32x32xi1> loc("jit(training_step)/jit(main)/jvp(jit(forward))/pjit"(#loc564)), %arg1: tensor<f32> loc("jit(training_step)/jit(main)/jvp(jit(forward))/pjit"(#loc564))) -> (tensor<8x32x32x32xi1>, tensor<8x32x32x32xf32>) {
    %0 = stablehlo.convert %arg1 : tensor<f32> loc(#loc631)
    %1 = stablehlo.broadcast_in_dim %arg0, dims = [0, 1, 2, 3] : (tensor<1x1x32x32xi1>) -> tensor<8x32x32x32xi1> loc(#loc632)
    %2 = stablehlo.broadcast_in_dim %0, dims = [] : (tensor<f32>) -> tensor<8x32x32x32xf32> loc(#loc632)
    return %1, %2 : tensor<8x32x32x32xi1>, tensor<8x32x32x32xf32> loc(#loc625)
  } loc(#loc625)
  func.func private @None(%arg0: tensor<8x32x1xf32> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg1: tensor<f32> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg2: tensor<8x32x32x32xi1> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg3: tensor<8x32x32x32xf32> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg4: tensor<8x32x2048xbf16> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg5: tensor<2048x2048xbf16> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg6: tensor<2048x16xbf16> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg7: tensor<16x2048xbf16> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg8: tensor<512x2048xbf16> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg9: tensor<2048x16xbf16> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg10: tensor<16x512xbf16> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg11: tensor<512x2048xbf16> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg12: tensor<2048x16xbf16> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg13: tensor<16x512xbf16> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg14: tensor<2048x2048xbf16> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg15: tensor<2048x16xbf16> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg16: tensor<16x2048xbf16> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg17: tensor<32xf32> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg18: tensor<8192x2048xbf16> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg19: tensor<2048x16xbf16> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg20: tensor<16x8192xbf16> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg21: tensor<8192x2048xbf16> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg22: tensor<2048x16xbf16> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg23: tensor<16x8192xbf16> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg24: tensor<2048x8192xbf16> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg25: tensor<8192x16xbf16> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg26: tensor<16x2048xbf16> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg27: tensor<2048xf32> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336)), %arg28: tensor<2048xf32> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/closed_call"(#loc336))) -> (tensor<8x32x2048xbf16>, tensor<8x32x2048xbf16>) {
    %0 = stablehlo.convert %arg28 : (tensor<2048xf32>) -> tensor<2048xbf16> loc(#loc633)
    %1 = stablehlo.broadcast_in_dim %0, dims = [2] : (tensor<2048xbf16>) -> tensor<1x1x2048xbf16> loc(#loc634)
    %2 = stablehlo.convert %arg27 : (tensor<2048xf32>) -> tensor<2048xbf16> loc(#loc635)
    %3 = stablehlo.broadcast_in_dim %2, dims = [2] : (tensor<2048xbf16>) -> tensor<1x1x2048xbf16> loc(#loc636)
    %4 = stablehlo.multiply %arg4, %arg4 : tensor<8x32x2048xbf16> loc(#loc637)
    %5 = stablehlo.convert %4 : (tensor<8x32x2048xbf16>) -> tensor<8x32x2048xf32> loc(#loc638)
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc639)
    %6 = stablehlo.reduce(%5 init: %cst) applies stablehlo.add across dimensions = [2] : (tensor<8x32x2048xf32>, tensor<f32>) -> tensor<8x32xf32> loc(#loc639)
    %7 = stablehlo.broadcast_in_dim %6, dims = [0, 1] : (tensor<8x32xf32>) -> tensor<8x32x1xf32> loc(#loc640)
    %cst_0 = stablehlo.constant dense<2.048000e+03> : tensor<f32> loc(#loc428)
    %8 = stablehlo.broadcast_in_dim %cst_0, dims = [] : (tensor<f32>) -> tensor<8x32x1xf32> loc(#loc641)
    %9 = stablehlo.divide %7, %8 : tensor<8x32x1xf32> loc(#loc641)
    %10 = stablehlo.convert %9 : (tensor<8x32x1xf32>) -> tensor<8x32x1xbf16> loc(#loc638)
    %cst_1 = stablehlo.constant dense<1.001360e-05> : tensor<bf16> loc(#loc428)
    %11 = stablehlo.broadcast_in_dim %cst_1, dims = [] : (tensor<bf16>) -> tensor<8x32x1xbf16> loc(#loc642)
    %12 = stablehlo.add %10, %11 : tensor<8x32x1xbf16> loc(#loc642)
    %13 = stablehlo.rsqrt %12 : tensor<8x32x1xbf16> loc(#loc643)
    %14 = stablehlo.broadcast_in_dim %13, dims = [0, 1, 2] : (tensor<8x32x1xbf16>) -> tensor<8x32x2048xbf16> loc(#loc644)
    %15 = stablehlo.multiply %arg4, %14 : tensor<8x32x2048xbf16> loc(#loc644)
    %16 = stablehlo.broadcast_in_dim %3, dims = [0, 1, 2] : (tensor<1x1x2048xbf16>) -> tensor<8x32x2048xbf16> loc(#loc645)
    %17 = stablehlo.multiply %16, %15 : tensor<8x32x2048xbf16> loc(#loc645)
    %18 = stablehlo.transpose %arg5, dims = [1, 0] : (tensor<2048x2048xbf16>) -> tensor<2048x2048xbf16> loc(#loc646)
    %19 = stablehlo.dot_general %17, %18, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x2048xbf16>) -> tensor<8x32x2048xbf16> loc(#loc647)
    %20 = stablehlo.dot_general %17, %arg6, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x16xbf16>) -> tensor<8x32x16xbf16> loc(#loc648)
    %21 = stablehlo.dot_general %20, %arg7, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<16x2048xbf16>) -> tensor<8x32x2048xbf16> loc(#loc648)
    %cst_2 = stablehlo.constant dense<6.250000e-02> : tensor<bf16> loc(#loc428)
    %22 = stablehlo.broadcast_in_dim %cst_2, dims = [] : (tensor<bf16>) -> tensor<8x32x2048xbf16> loc(#loc649)
    %23 = stablehlo.multiply %21, %22 : tensor<8x32x2048xbf16> loc(#loc649)
    %24 = stablehlo.add %19, %23 : tensor<8x32x2048xbf16> loc(#loc650)
    %25 = stablehlo.reshape %24 : (tensor<8x32x2048xbf16>) -> tensor<8x32x32x64xbf16> loc(#loc651)
    %26 = stablehlo.transpose %25, dims = [0, 2, 1, 3] : (tensor<8x32x32x64xbf16>) -> tensor<8x32x32x64xbf16> loc(#loc652)
    %27 = stablehlo.convert %26 : (tensor<8x32x32x64xbf16>) -> tensor<8x32x32x64xf32> loc(#loc653)
    %28 = stablehlo.broadcast_in_dim %arg17, dims = [2] : (tensor<32xf32>) -> tensor<1x1x32xf32> loc(#loc654)
    %29 = stablehlo.broadcast_in_dim %arg0, dims = [0, 1, 2] : (tensor<8x32x1xf32>) -> tensor<8x32x32xf32> loc(#loc655)
    %30 = stablehlo.broadcast_in_dim %28, dims = [0, 1, 2] : (tensor<1x1x32xf32>) -> tensor<8x32x32xf32> loc(#loc655)
    %31 = stablehlo.multiply %29, %30 : tensor<8x32x32xf32> loc(#loc655)
    %32 = stablehlo.concatenate %31, %31, dim = 2 : (tensor<8x32x32xf32>, tensor<8x32x32xf32>) -> tensor<8x32x64xf32> loc(#loc656)
    %33 = stablehlo.cosine %32 : tensor<8x32x64xf32> loc(#loc657)
    %34 = stablehlo.broadcast_in_dim %33, dims = [0, 2, 3] : (tensor<8x32x64xf32>) -> tensor<8x1x32x64xf32> loc(#loc658)
    %35 = stablehlo.broadcast_in_dim %34, dims = [0, 1, 2, 3] : (tensor<8x1x32x64xf32>) -> tensor<8x32x32x64xf32> loc(#loc659)
    %36 = stablehlo.multiply %27, %35 : tensor<8x32x32x64xf32> loc(#loc659)
    %37 = stablehlo.slice %26 [0:8, 0:32, 0:32, 32:64] : (tensor<8x32x32x64xbf16>) -> tensor<8x32x32x32xbf16> loc(#loc660)
    %38 = stablehlo.negate %37 : tensor<8x32x32x32xbf16> loc(#loc661)
    %39 = stablehlo.slice %26 [0:8, 0:32, 0:32, 0:32] : (tensor<8x32x32x64xbf16>) -> tensor<8x32x32x32xbf16> loc(#loc660)
    %40 = stablehlo.concatenate %38, %39, dim = 3 : (tensor<8x32x32x32xbf16>, tensor<8x32x32x32xbf16>) -> tensor<8x32x32x64xbf16> loc(#loc662)
    %41 = stablehlo.convert %40 : (tensor<8x32x32x64xbf16>) -> tensor<8x32x32x64xf32> loc(#loc653)
    %42 = stablehlo.sine %32 : tensor<8x32x64xf32> loc(#loc663)
    %43 = stablehlo.broadcast_in_dim %42, dims = [0, 2, 3] : (tensor<8x32x64xf32>) -> tensor<8x1x32x64xf32> loc(#loc664)
    %44 = stablehlo.broadcast_in_dim %43, dims = [0, 1, 2, 3] : (tensor<8x1x32x64xf32>) -> tensor<8x32x32x64xf32> loc(#loc659)
    %45 = stablehlo.multiply %41, %44 : tensor<8x32x32x64xf32> loc(#loc659)
    %46 = stablehlo.add %36, %45 : tensor<8x32x32x64xf32> loc(#loc665)
    %47 = stablehlo.transpose %arg8, dims = [1, 0] : (tensor<512x2048xbf16>) -> tensor<2048x512xbf16> loc(#loc666)
    %48 = stablehlo.dot_general %17, %47, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x512xbf16>) -> tensor<8x32x512xbf16> loc(#loc667)
    %49 = stablehlo.dot_general %17, %arg9, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x16xbf16>) -> tensor<8x32x16xbf16> loc(#loc668)
    %50 = stablehlo.dot_general %49, %arg10, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<16x512xbf16>) -> tensor<8x32x512xbf16> loc(#loc668)
    %cst_3 = stablehlo.constant dense<6.250000e-02> : tensor<bf16> loc(#loc428)
    %51 = stablehlo.broadcast_in_dim %cst_3, dims = [] : (tensor<bf16>) -> tensor<8x32x512xbf16> loc(#loc669)
    %52 = stablehlo.multiply %50, %51 : tensor<8x32x512xbf16> loc(#loc669)
    %53 = stablehlo.add %48, %52 : tensor<8x32x512xbf16> loc(#loc670)
    %54 = stablehlo.reshape %53 : (tensor<8x32x512xbf16>) -> tensor<8x32x8x64xbf16> loc(#loc671)
    %55 = stablehlo.transpose %54, dims = [0, 2, 1, 3] : (tensor<8x32x8x64xbf16>) -> tensor<8x8x32x64xbf16> loc(#loc672)
    %56 = stablehlo.convert %55 : (tensor<8x8x32x64xbf16>) -> tensor<8x8x32x64xf32> loc(#loc673)
    %57 = stablehlo.broadcast_in_dim %34, dims = [0, 1, 2, 3] : (tensor<8x1x32x64xf32>) -> tensor<8x8x32x64xf32> loc(#loc674)
    %58 = stablehlo.multiply %56, %57 : tensor<8x8x32x64xf32> loc(#loc674)
    %59 = stablehlo.slice %55 [0:8, 0:8, 0:32, 32:64] : (tensor<8x8x32x64xbf16>) -> tensor<8x8x32x32xbf16> loc(#loc675)
    %60 = stablehlo.negate %59 : tensor<8x8x32x32xbf16> loc(#loc676)
    %61 = stablehlo.slice %55 [0:8, 0:8, 0:32, 0:32] : (tensor<8x8x32x64xbf16>) -> tensor<8x8x32x32xbf16> loc(#loc675)
    %62 = stablehlo.concatenate %60, %61, dim = 3 : (tensor<8x8x32x32xbf16>, tensor<8x8x32x32xbf16>) -> tensor<8x8x32x64xbf16> loc(#loc677)
    %63 = stablehlo.convert %62 : (tensor<8x8x32x64xbf16>) -> tensor<8x8x32x64xf32> loc(#loc673)
    %64 = stablehlo.broadcast_in_dim %43, dims = [0, 1, 2, 3] : (tensor<8x1x32x64xf32>) -> tensor<8x8x32x64xf32> loc(#loc674)
    %65 = stablehlo.multiply %63, %64 : tensor<8x8x32x64xf32> loc(#loc674)
    %66 = stablehlo.add %58, %65 : tensor<8x8x32x64xf32> loc(#loc678)
    %67 = stablehlo.broadcast_in_dim %66, dims = [0, 1, 3, 4] : (tensor<8x8x32x64xf32>) -> tensor<8x8x4x32x64xf32> loc(#loc679)
    %68 = stablehlo.reshape %67 : (tensor<8x8x4x32x64xf32>) -> tensor<8x32x32x64xf32> loc(#loc680)
    %69 = stablehlo.dot_general %46, %68, batching_dims = [0, 1] x [0, 1], contracting_dims = [3] x [3], precision = [DEFAULT, DEFAULT] : (tensor<8x32x32x64xf32>, tensor<8x32x32x64xf32>) -> tensor<8x32x32x32xf32> loc(#loc681)
    %70 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<f32>) -> tensor<8x32x32x32xf32> loc(#loc682)
    %71 = stablehlo.divide %69, %70 : tensor<8x32x32x32xf32> loc(#loc682)
    %72 = call @_where_1(%71, %arg2, %arg3) : (tensor<8x32x32x32xf32>, tensor<8x32x32x32xi1>, tensor<8x32x32x32xf32>) -> tensor<8x32x32x32xf32> loc(#loc683)
    %cst_4 = stablehlo.constant dense<0xFF800000> : tensor<f32> loc(#loc684)
    %73 = stablehlo.reduce(%72 init: %cst_4) applies stablehlo.maximum across dimensions = [3] : (tensor<8x32x32x32xf32>, tensor<f32>) -> tensor<8x32x32xf32> loc(#loc684)
    %cst_5 = stablehlo.constant dense<0xFF800000> : tensor<f32> loc(#loc428)
    %74 = stablehlo.broadcast_in_dim %cst_5, dims = [] : (tensor<f32>) -> tensor<8x32x32xf32> loc(#loc685)
    %75 = stablehlo.maximum %74, %73 : tensor<8x32x32xf32> loc(#loc685)
    %76 = stablehlo.broadcast_in_dim %75, dims = [0, 1, 2] : (tensor<8x32x32xf32>) -> tensor<8x32x32x1xf32> loc(#loc686)
    %77 = stablehlo.broadcast_in_dim %76, dims = [0, 1, 2, 3] : (tensor<8x32x32x1xf32>) -> tensor<8x32x32x32xf32> loc(#loc687)
    %78 = stablehlo.subtract %72, %77 : tensor<8x32x32x32xf32> loc(#loc687)
    %79 = stablehlo.exponential %78 : tensor<8x32x32x32xf32> loc(#loc688)
    %cst_6 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc689)
    %80 = stablehlo.reduce(%79 init: %cst_6) applies stablehlo.add across dimensions = [3] : (tensor<8x32x32x32xf32>, tensor<f32>) -> tensor<8x32x32xf32> loc(#loc689)
    %81 = stablehlo.broadcast_in_dim %80, dims = [0, 1, 2] : (tensor<8x32x32xf32>) -> tensor<8x32x32x1xf32> loc(#loc686)
    %82 = stablehlo.broadcast_in_dim %81, dims = [0, 1, 2, 3] : (tensor<8x32x32x1xf32>) -> tensor<8x32x32x32xf32> loc(#loc690)
    %83 = stablehlo.divide %79, %82 : tensor<8x32x32x32xf32> loc(#loc690)
    %84 = stablehlo.transpose %arg11, dims = [1, 0] : (tensor<512x2048xbf16>) -> tensor<2048x512xbf16> loc(#loc691)
    %85 = stablehlo.dot_general %17, %84, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x512xbf16>) -> tensor<8x32x512xbf16> loc(#loc692)
    %86 = stablehlo.dot_general %17, %arg12, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x16xbf16>) -> tensor<8x32x16xbf16> loc(#loc693)
    %87 = stablehlo.dot_general %86, %arg13, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<16x512xbf16>) -> tensor<8x32x512xbf16> loc(#loc693)
    %cst_7 = stablehlo.constant dense<6.250000e-02> : tensor<bf16> loc(#loc428)
    %88 = stablehlo.broadcast_in_dim %cst_7, dims = [] : (tensor<bf16>) -> tensor<8x32x512xbf16> loc(#loc694)
    %89 = stablehlo.multiply %87, %88 : tensor<8x32x512xbf16> loc(#loc694)
    %90 = stablehlo.add %85, %89 : tensor<8x32x512xbf16> loc(#loc695)
    %91 = stablehlo.reshape %90 : (tensor<8x32x512xbf16>) -> tensor<8x32x8x64xbf16> loc(#loc696)
    %92 = stablehlo.transpose %91, dims = [0, 2, 1, 3] : (tensor<8x32x8x64xbf16>) -> tensor<8x8x32x64xbf16> loc(#loc697)
    %93 = stablehlo.broadcast_in_dim %92, dims = [0, 1, 3, 4] : (tensor<8x8x32x64xbf16>) -> tensor<8x8x4x32x64xbf16> loc(#loc698)
    %94 = stablehlo.reshape %93 : (tensor<8x8x4x32x64xbf16>) -> tensor<8x32x32x64xbf16> loc(#loc699)
    %95 = stablehlo.convert %83 : tensor<8x32x32x32xf32> loc(#loc700)
    %96 = stablehlo.convert %94 : (tensor<8x32x32x64xbf16>) -> tensor<8x32x32x64xf32> loc(#loc700)
    %97 = stablehlo.dot_general %95, %96, batching_dims = [0, 1] x [0, 1], contracting_dims = [3] x [2], precision = [DEFAULT, DEFAULT] : (tensor<8x32x32x32xf32>, tensor<8x32x32x64xf32>) -> tensor<8x32x32x64xf32> loc(#loc700)
    %98 = stablehlo.transpose %97, dims = [0, 2, 1, 3] : (tensor<8x32x32x64xf32>) -> tensor<8x32x32x64xf32> loc(#loc701)
    %99 = stablehlo.reshape %98 : (tensor<8x32x32x64xf32>) -> tensor<8x32x2048xf32> loc(#loc702)
    %100 = stablehlo.convert %99 : (tensor<8x32x2048xf32>) -> tensor<8x32x2048xbf16> loc(#loc703)
    %101 = stablehlo.transpose %arg14, dims = [1, 0] : (tensor<2048x2048xbf16>) -> tensor<2048x2048xbf16> loc(#loc704)
    %102 = stablehlo.dot_general %100, %101, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x2048xbf16>) -> tensor<8x32x2048xbf16> loc(#loc705)
    %103 = stablehlo.dot_general %100, %arg15, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x16xbf16>) -> tensor<8x32x16xbf16> loc(#loc706)
    %104 = stablehlo.dot_general %103, %arg16, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<16x2048xbf16>) -> tensor<8x32x2048xbf16> loc(#loc706)
    %cst_8 = stablehlo.constant dense<6.250000e-02> : tensor<bf16> loc(#loc428)
    %105 = stablehlo.broadcast_in_dim %cst_8, dims = [] : (tensor<bf16>) -> tensor<8x32x2048xbf16> loc(#loc707)
    %106 = stablehlo.multiply %104, %105 : tensor<8x32x2048xbf16> loc(#loc707)
    %107 = stablehlo.add %102, %106 : tensor<8x32x2048xbf16> loc(#loc708)
    %108 = stablehlo.add %arg4, %107 : tensor<8x32x2048xbf16> loc(#loc709)
    %109 = stablehlo.multiply %108, %108 : tensor<8x32x2048xbf16> loc(#loc710)
    %110 = stablehlo.convert %109 : (tensor<8x32x2048xbf16>) -> tensor<8x32x2048xf32> loc(#loc711)
    %cst_9 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc712)
    %111 = stablehlo.reduce(%110 init: %cst_9) applies stablehlo.add across dimensions = [2] : (tensor<8x32x2048xf32>, tensor<f32>) -> tensor<8x32xf32> loc(#loc712)
    %112 = stablehlo.broadcast_in_dim %111, dims = [0, 1] : (tensor<8x32xf32>) -> tensor<8x32x1xf32> loc(#loc713)
    %cst_10 = stablehlo.constant dense<2.048000e+03> : tensor<f32> loc(#loc428)
    %113 = stablehlo.broadcast_in_dim %cst_10, dims = [] : (tensor<f32>) -> tensor<8x32x1xf32> loc(#loc714)
    %114 = stablehlo.divide %112, %113 : tensor<8x32x1xf32> loc(#loc714)
    %115 = stablehlo.convert %114 : (tensor<8x32x1xf32>) -> tensor<8x32x1xbf16> loc(#loc711)
    %cst_11 = stablehlo.constant dense<1.001360e-05> : tensor<bf16> loc(#loc428)
    %116 = stablehlo.broadcast_in_dim %cst_11, dims = [] : (tensor<bf16>) -> tensor<8x32x1xbf16> loc(#loc715)
    %117 = stablehlo.add %115, %116 : tensor<8x32x1xbf16> loc(#loc715)
    %118 = stablehlo.rsqrt %117 : tensor<8x32x1xbf16> loc(#loc716)
    %119 = stablehlo.broadcast_in_dim %118, dims = [0, 1, 2] : (tensor<8x32x1xbf16>) -> tensor<8x32x2048xbf16> loc(#loc717)
    %120 = stablehlo.multiply %108, %119 : tensor<8x32x2048xbf16> loc(#loc717)
    %121 = stablehlo.broadcast_in_dim %1, dims = [0, 1, 2] : (tensor<1x1x2048xbf16>) -> tensor<8x32x2048xbf16> loc(#loc718)
    %122 = stablehlo.multiply %121, %120 : tensor<8x32x2048xbf16> loc(#loc718)
    %123 = stablehlo.transpose %arg18, dims = [1, 0] : (tensor<8192x2048xbf16>) -> tensor<2048x8192xbf16> loc(#loc719)
    %124 = stablehlo.dot_general %122, %123, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x8192xbf16>) -> tensor<8x32x8192xbf16> loc(#loc720)
    %125 = stablehlo.dot_general %122, %arg19, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x16xbf16>) -> tensor<8x32x16xbf16> loc(#loc721)
    %126 = stablehlo.dot_general %125, %arg20, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<16x8192xbf16>) -> tensor<8x32x8192xbf16> loc(#loc721)
    %cst_12 = stablehlo.constant dense<6.250000e-02> : tensor<bf16> loc(#loc428)
    %127 = stablehlo.broadcast_in_dim %cst_12, dims = [] : (tensor<bf16>) -> tensor<8x32x8192xbf16> loc(#loc722)
    %128 = stablehlo.multiply %126, %127 : tensor<8x32x8192xbf16> loc(#loc722)
    %129 = stablehlo.add %124, %128 : tensor<8x32x8192xbf16> loc(#loc723)
    %130 = call @silu(%129) : (tensor<8x32x8192xbf16>) -> tensor<8x32x8192xbf16> loc(#loc724)
    %131 = stablehlo.transpose %arg21, dims = [1, 0] : (tensor<8192x2048xbf16>) -> tensor<2048x8192xbf16> loc(#loc719)
    %132 = stablehlo.dot_general %122, %131, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x8192xbf16>) -> tensor<8x32x8192xbf16> loc(#loc720)
    %133 = stablehlo.dot_general %122, %arg22, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x16xbf16>) -> tensor<8x32x16xbf16> loc(#loc721)
    %134 = stablehlo.dot_general %133, %arg23, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<16x8192xbf16>) -> tensor<8x32x8192xbf16> loc(#loc721)
    %cst_13 = stablehlo.constant dense<6.250000e-02> : tensor<bf16> loc(#loc428)
    %135 = stablehlo.broadcast_in_dim %cst_13, dims = [] : (tensor<bf16>) -> tensor<8x32x8192xbf16> loc(#loc722)
    %136 = stablehlo.multiply %134, %135 : tensor<8x32x8192xbf16> loc(#loc722)
    %137 = stablehlo.add %132, %136 : tensor<8x32x8192xbf16> loc(#loc723)
    %138 = stablehlo.multiply %130, %137 : tensor<8x32x8192xbf16> loc(#loc725)
    %139 = stablehlo.transpose %arg24, dims = [1, 0] : (tensor<2048x8192xbf16>) -> tensor<8192x2048xbf16> loc(#loc726)
    %140 = stablehlo.dot_general %138, %139, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x8192xbf16>, tensor<8192x2048xbf16>) -> tensor<8x32x2048xbf16> loc(#loc727)
    %141 = stablehlo.dot_general %138, %arg25, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x8192xbf16>, tensor<8192x16xbf16>) -> tensor<8x32x16xbf16> loc(#loc728)
    %142 = stablehlo.dot_general %141, %arg26, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<16x2048xbf16>) -> tensor<8x32x2048xbf16> loc(#loc728)
    %cst_14 = stablehlo.constant dense<6.250000e-02> : tensor<bf16> loc(#loc428)
    %143 = stablehlo.broadcast_in_dim %cst_14, dims = [] : (tensor<bf16>) -> tensor<8x32x2048xbf16> loc(#loc729)
    %144 = stablehlo.multiply %142, %143 : tensor<8x32x2048xbf16> loc(#loc729)
    %145 = stablehlo.add %140, %144 : tensor<8x32x2048xbf16> loc(#loc730)
    %146 = stablehlo.add %108, %145 : tensor<8x32x2048xbf16> loc(#loc731)
    return %146, %arg4 : tensor<8x32x2048xbf16>, tensor<8x32x2048xbf16> loc(#loc428)
  } loc(#loc428)
  func.func private @_where_1(%arg0: tensor<8x32x32x32xf32> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/pjit"(#loc564)), %arg1: tensor<8x32x32x32xi1> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/pjit"(#loc564)), %arg2: tensor<8x32x32x32xf32> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/pjit"(#loc564))) -> tensor<8x32x32x32xf32> {
    %0 = stablehlo.select %arg1, %arg2, %arg0 : tensor<8x32x32x32xi1>, tensor<8x32x32x32xf32> loc(#loc732)
    return %0 : tensor<8x32x32x32xf32> loc(#loc683)
  } loc(#loc683)
  func.func private @silu(%arg0: tensor<8x32x8192xbf16> loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/pjit"(#loc611))) -> tensor<8x32x8192xbf16> {
    %0 = stablehlo.negate %arg0 : tensor<8x32x8192xbf16> loc(#loc733)
    %1 = stablehlo.exponential %0 : tensor<8x32x8192xbf16> loc(#loc734)
    %cst = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc735)
    %2 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<bf16>) -> tensor<8x32x8192xbf16> loc(#loc736)
    %3 = stablehlo.add %2, %1 : tensor<8x32x8192xbf16> loc(#loc736)
    %cst_0 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc735)
    %4 = stablehlo.broadcast_in_dim %cst_0, dims = [] : (tensor<bf16>) -> tensor<8x32x8192xbf16> loc(#loc737)
    %5 = stablehlo.divide %4, %3 : tensor<8x32x8192xbf16> loc(#loc737)
    %6 = stablehlo.multiply %arg0, %5 : tensor<8x32x8192xbf16> loc(#loc738)
    return %6 : tensor<8x32x8192xbf16> loc(#loc724)
  } loc(#loc724)
  func.func private @integer_pow(%arg0: tensor<8x32x2048xbf16> loc("jit(training_step)/jit(main)/jvp(jit(forward))/integer_pow"(#loc431))) -> tensor<8x32x2048xbf16> {
    return %arg0 : tensor<8x32x2048xbf16> loc(#loc483)
  } loc(#loc483)
  func.func private @log_softmax(%arg0: tensor<248x128256xf32> loc("jit(training_step)/jit(main)/jvp(jit(forward))/pjit"(#loc317))) -> (tensor<248x128256xf32>, tensor<248x128256xf32>, tensor<248x1xf32>) {
    %cst = stablehlo.constant dense<0xFF800000> : tensor<f32> loc(#loc368)
    %0 = stablehlo.reduce(%arg0 init: %cst) applies stablehlo.maximum across dimensions = [1] : (tensor<248x128256xf32>, tensor<f32>) -> tensor<248xf32> loc(#loc368)
    %cst_0 = stablehlo.constant dense<0xFF800000> : tensor<f32> loc(#loc348)
    %1 = stablehlo.broadcast_in_dim %cst_0, dims = [] : (tensor<f32>) -> tensor<248xf32> loc(#loc369)
    %2 = stablehlo.maximum %1, %0 : tensor<248xf32> loc(#loc369)
    %3 = stablehlo.broadcast_in_dim %2, dims = [0] : (tensor<248xf32>) -> tensor<248x1xf32> loc(#loc370)
    %4 = stablehlo.broadcast_in_dim %3, dims = [0, 1] : (tensor<248x1xf32>) -> tensor<248x128256xf32> loc(#loc371)
    %5 = stablehlo.subtract %arg0, %4 : tensor<248x128256xf32> loc(#loc371)
    %6 = stablehlo.exponential %5 : tensor<248x128256xf32> loc(#loc372)
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc373)
    %7 = stablehlo.reduce(%6 init: %cst_1) applies stablehlo.add across dimensions = [1] : (tensor<248x128256xf32>, tensor<f32>) -> tensor<248xf32> loc(#loc373)
    %8 = stablehlo.broadcast_in_dim %7, dims = [0] : (tensor<248xf32>) -> tensor<248x1xf32> loc(#loc370)
    %9 = stablehlo.log %8 : tensor<248x1xf32> loc(#loc374)
    %10 = stablehlo.broadcast_in_dim %9, dims = [0, 1] : (tensor<248x1xf32>) -> tensor<248x128256xf32> loc(#loc371)
    %11 = stablehlo.subtract %5, %10 : tensor<248x128256xf32> loc(#loc371)
    return %11, %6, %8 : tensor<248x128256xf32>, tensor<248x128256xf32>, tensor<248x1xf32> loc(#loc348)
  } loc(#loc348)
  func.func private @argmax(%arg0: tensor<8x31x128256xf32> loc("jit(training_step)/jit(main)/jvp(jit(forward))/argmax"(#loc322))) -> tensor<8x31xi32> {
    %0 = stablehlo.iota dim = 2 : tensor<8x31x128256xi32> loc(#loc375)
    %cst = stablehlo.constant dense<0xFF800000> : tensor<f32> loc(#loc361)
    %c = stablehlo.constant dense<0> : tensor<i32> loc(#loc361)
    %1:2 = stablehlo.reduce(%arg0 init: %cst), (%0 init: %c) across dimensions = [2] : (tensor<8x31x128256xf32>, tensor<8x31x128256xi32>, tensor<f32>, tensor<i32>) -> (tensor<8x31xf32>, tensor<8x31xi32>)
     reducer(%arg1: tensor<f32> loc("jit(training_step)/jit(main)/jvp(jit(forward))/reduce"(#loc322)), %arg3: tensor<f32> loc("jit(training_step)/jit(main)/jvp(jit(forward))/reduce"(#loc322))) (%arg2: tensor<i32> loc("jit(training_step)/jit(main)/jvp(jit(forward))/reduce"(#loc322)), %arg4: tensor<i32> loc("jit(training_step)/jit(main)/jvp(jit(forward))/reduce"(#loc322)))  {
      %2 = stablehlo.compare  GT, %arg1, %arg3,  FLOAT : (tensor<f32>, tensor<f32>) -> tensor<i1> loc(#loc377)
      %3 = stablehlo.compare  NE, %arg1, %arg1,  FLOAT : (tensor<f32>, tensor<f32>) -> tensor<i1> loc(#loc378)
      %4 = stablehlo.or %2, %3 : tensor<i1> loc(#loc379)
      %5 = stablehlo.compare  EQ, %arg1, %arg3,  FLOAT : (tensor<f32>, tensor<f32>) -> tensor<i1> loc(#loc380)
      %6 = stablehlo.compare  LT, %arg2, %arg4,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc381)
      %7 = stablehlo.and %5, %6 : tensor<i1> loc(#loc382)
      %8 = stablehlo.or %4, %7 : tensor<i1> loc(#loc379)
      %9 = stablehlo.select %4, %arg1, %arg3 : tensor<i1>, tensor<f32> loc(#loc383)
      %10 = stablehlo.select %8, %arg2, %arg4 : tensor<i1>, tensor<i32> loc(#loc383)
      stablehlo.return %9, %10 : tensor<f32>, tensor<i32> loc(#loc376)
    } loc(#loc376)
    return %1#1 : tensor<8x31xi32> loc(#loc361)
  } loc(#loc361)
  func.func private @forward_2(%arg0: tensor<1x1x2048xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg1: tensor<8x32xi32> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg2: tensor<16x2048xf32> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg3: tensor<16x2048x2048xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg4: tensor<16x2048x16xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg5: tensor<16x16x2048xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg6: tensor<16x512x2048xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg7: tensor<16x2048x16xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg8: tensor<16x16x512xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg9: tensor<16x512x2048xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg10: tensor<16x2048x16xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg11: tensor<16x16x512xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg12: tensor<16x32xf32> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg13: tensor<16x2048x2048xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg14: tensor<16x2048x16xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg15: tensor<16x16x2048xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg16: tensor<16x2048xf32> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg17: tensor<16x8192x2048xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg18: tensor<16x2048x16xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg19: tensor<16x16x8192xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg20: tensor<16x8192x2048xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg21: tensor<16x2048x16xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg22: tensor<16x16x8192xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg23: tensor<16x2048x8192xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg24: tensor<16x8192x16xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg25: tensor<16x16x2048xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg26: tensor<16x8x32x2048xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg27: tensor<8x32x1xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg28: tensor<8x32x2048xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg29: tensor<8x32x2048xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg30: tensor<8x32x1xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg31: tensor<2048x128256xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg32: tensor<8x32x2048xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg33: tensor<2048x16xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg34: tensor<16x128256xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg35: tensor<8x32x16xbf16> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg36: tensor<248x128256xf32> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg37: tensor<248x1xf32> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg38: tensor<248x2xi32> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg39: tensor<248xf32> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg40: tensor<8xf32> loc("jit(training_step)/jit(main)/pjit"(#loc286)), %arg41: tensor<f32> loc("jit(training_step)/jit(main)/pjit"(#loc286))) -> (tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x8192x16xbf16>, tensor<16x16x2048xbf16>, tensor<2048x16xbf16>, tensor<16x128256xbf16>) {
    %0 = stablehlo.negate %arg41 : tensor<f32> loc(#loc384)
    %cst = stablehlo.constant dense<8.000000e+00> : tensor<f32> loc(#loc292)
    %1 = stablehlo.divide %0, %cst : tensor<f32> loc(#loc385)
    %2 = stablehlo.broadcast_in_dim %1, dims = [] : (tensor<f32>) -> tensor<8xf32> loc(#loc386)
    %3 = stablehlo.divide %2, %arg40 : tensor<8xf32> loc(#loc385)
    %4 = stablehlo.broadcast_in_dim %3, dims = [0] : (tensor<8xf32>) -> tensor<8x31xf32> loc(#loc386)
    %5 = stablehlo.reshape %4 : (tensor<8x31xf32>) -> tensor<248xf32> loc(#loc387)
    %6 = stablehlo.multiply %5, %arg39 : tensor<248xf32> loc(#loc388)
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc292)
    %7 = stablehlo.broadcast_in_dim %cst_0, dims = [] : (tensor<f32>) -> tensor<248x128256xf32> loc(#loc389)
    %8 = "stablehlo.scatter"(%7, %arg38, %6) <{indices_are_sorted = false, scatter_dimension_numbers = #stablehlo.scatter<inserted_window_dims = [0, 1], scatter_dims_to_operand_dims = [0, 1], index_vector_dim = 1>, unique_indices = false}> ({
    ^bb0(%arg42: tensor<f32> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/scatter-add"(#loc318)), %arg43: tensor<f32> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/scatter-add"(#loc318))):
      %54 = stablehlo.add %arg42, %arg43 : tensor<f32> loc(#loc391)
      stablehlo.return %54 : tensor<f32> loc(#loc390)
    }) : (tensor<248x128256xf32>, tensor<248x2xi32>, tensor<248xf32>) -> tensor<248x128256xf32> loc(#loc390)
    %9 = call @log_softmax_3(%arg36, %arg37, %8) : (tensor<248x128256xf32>, tensor<248x1xf32>, tensor<248x128256xf32>) -> tensor<248x128256xf32> loc(#loc392)
    %10 = stablehlo.reshape %9 : (tensor<248x128256xf32>) -> tensor<8x31x128256xf32> loc(#loc393)
    %11 = stablehlo.convert %10 : (tensor<8x31x128256xf32>) -> tensor<8x31x128256xbf16> loc(#loc394)
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc292)
    %12 = stablehlo.pad %11, %cst_1, low = [0, 0, 0], high = [0, 1, 0], interior = [0, 0, 0] : (tensor<8x31x128256xbf16>, tensor<bf16>) -> tensor<8x32x128256xbf16> loc(#loc326)
    %cst_2 = stablehlo.constant dense<6.250000e-02> : tensor<bf16> loc(#loc292)
    %13 = stablehlo.broadcast_in_dim %cst_2, dims = [] : (tensor<bf16>) -> tensor<8x32x128256xbf16> loc(#loc441)
    %14 = stablehlo.multiply %12, %13 : tensor<8x32x128256xbf16> loc(#loc441)
    %15 = stablehlo.dot_general %14, %arg35, contracting_dims = [0, 1] x [0, 1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x128256xbf16>, tensor<8x32x16xbf16>) -> tensor<128256x16xbf16> loc(#loc442)
    %16 = stablehlo.transpose %15, dims = [1, 0] : (tensor<128256x16xbf16>) -> tensor<16x128256xbf16> loc(#loc443)
    %17 = stablehlo.dot_general %14, %arg34, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x128256xbf16>, tensor<16x128256xbf16>) -> tensor<8x32x16xbf16> loc(#loc442)
    %18 = stablehlo.dot_general %17, %arg32, contracting_dims = [0, 1] x [0, 1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<8x32x2048xbf16>) -> tensor<16x2048xbf16> loc(#loc442)
    %19 = stablehlo.transpose %18, dims = [1, 0] : (tensor<16x2048xbf16>) -> tensor<2048x16xbf16> loc(#loc443)
    %20 = stablehlo.dot_general %17, %arg33, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<2048x16xbf16>) -> tensor<8x32x2048xbf16> loc(#loc442)
    %21 = stablehlo.dot_general %12, %arg31, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x128256xbf16>, tensor<2048x128256xbf16>) -> tensor<8x32x2048xbf16> loc(#loc444)
    %22 = stablehlo.add %20, %21 : tensor<8x32x2048xbf16> loc(#loc445)
    %23 = stablehlo.broadcast_in_dim %arg0, dims = [0, 1, 2] : (tensor<1x1x2048xbf16>) -> tensor<8x32x2048xbf16> loc(#loc512)
    %24 = stablehlo.multiply %23, %22 : tensor<8x32x2048xbf16> loc(#loc512)
    %25 = stablehlo.multiply %arg28, %24 : tensor<8x32x2048xbf16> loc(#loc513)
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc514)
    %26 = stablehlo.reduce(%25 init: %cst_3) applies stablehlo.add across dimensions = [2] : (tensor<8x32x2048xbf16>, tensor<bf16>) -> tensor<8x32xbf16> loc(#loc514)
    %27 = stablehlo.reshape %26 : (tensor<8x32xbf16>) -> tensor<8x32x1xbf16> loc(#loc515)
    %28 = stablehlo.multiply %27, %arg30 : tensor<8x32x1xbf16> loc(#loc513)
    %29 = stablehlo.convert %28 : (tensor<8x32x1xbf16>) -> tensor<8x32x1xf32> loc(#loc516)
    %cst_4 = stablehlo.constant dense<2.048000e+03> : tensor<f32> loc(#loc292)
    %30 = stablehlo.broadcast_in_dim %cst_4, dims = [] : (tensor<f32>) -> tensor<8x32x1xf32> loc(#loc517)
    %31 = stablehlo.divide %29, %30 : tensor<8x32x1xf32> loc(#loc517)
    %cst_5 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc518)
    %32 = stablehlo.reduce(%31 init: %cst_5) applies stablehlo.add across dimensions = [2] : (tensor<8x32x1xf32>, tensor<f32>) -> tensor<8x32xf32> loc(#loc518)
    %33 = stablehlo.broadcast_in_dim %32, dims = [0, 1] : (tensor<8x32xf32>) -> tensor<8x32x2048xf32> loc(#loc519)
    %34 = stablehlo.convert %33 : (tensor<8x32x2048xf32>) -> tensor<8x32x2048xbf16> loc(#loc516)
    %35 = stablehlo.multiply %34, %arg29 : tensor<8x32x2048xbf16> loc(#loc520)
    %36 = stablehlo.broadcast_in_dim %arg27, dims = [0, 1, 2] : (tensor<8x32x1xbf16>) -> tensor<8x32x2048xbf16> loc(#loc513)
    %37 = stablehlo.multiply %24, %36 : tensor<8x32x2048xbf16> loc(#loc513)
    %38 = stablehlo.add %35, %37 : tensor<8x32x2048xbf16> loc(#loc521)
    %cst_6 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc446)
    %39 = stablehlo.broadcast_in_dim %cst_6, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc447)
    %cst_7 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc446)
    %40 = stablehlo.broadcast_in_dim %cst_7, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc447)
    %cst_8 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc446)
    %41 = stablehlo.broadcast_in_dim %cst_8, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc447)
    %cst_9 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc446)
    %42 = stablehlo.broadcast_in_dim %cst_9, dims = [] : (tensor<bf16>) -> tensor<16x16x512xbf16> loc(#loc447)
    %cst_10 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc446)
    %43 = stablehlo.broadcast_in_dim %cst_10, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc447)
    %cst_11 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc446)
    %44 = stablehlo.broadcast_in_dim %cst_11, dims = [] : (tensor<bf16>) -> tensor<16x16x512xbf16> loc(#loc447)
    %cst_12 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc446)
    %45 = stablehlo.broadcast_in_dim %cst_12, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc447)
    %cst_13 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc446)
    %46 = stablehlo.broadcast_in_dim %cst_13, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc447)
    %cst_14 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc446)
    %47 = stablehlo.broadcast_in_dim %cst_14, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc447)
    %cst_15 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc446)
    %48 = stablehlo.broadcast_in_dim %cst_15, dims = [] : (tensor<bf16>) -> tensor<16x16x8192xbf16> loc(#loc447)
    %cst_16 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc446)
    %49 = stablehlo.broadcast_in_dim %cst_16, dims = [] : (tensor<bf16>) -> tensor<16x2048x16xbf16> loc(#loc447)
    %cst_17 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc446)
    %50 = stablehlo.broadcast_in_dim %cst_17, dims = [] : (tensor<bf16>) -> tensor<16x16x8192xbf16> loc(#loc447)
    %cst_18 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc446)
    %51 = stablehlo.broadcast_in_dim %cst_18, dims = [] : (tensor<bf16>) -> tensor<16x8192x16xbf16> loc(#loc447)
    %cst_19 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc446)
    %52 = stablehlo.broadcast_in_dim %cst_19, dims = [] : (tensor<bf16>) -> tensor<16x16x2048xbf16> loc(#loc447)
    %c = stablehlo.constant dense<0> : tensor<i32> loc(#loc448)
    %53:42 = stablehlo.while(%iterArg = %arg2, %iterArg_20 = %arg3, %iterArg_21 = %arg4, %iterArg_22 = %arg5, %iterArg_23 = %arg6, %iterArg_24 = %arg7, %iterArg_25 = %arg8, %iterArg_26 = %arg9, %iterArg_27 = %arg10, %iterArg_28 = %arg11, %iterArg_29 = %arg12, %iterArg_30 = %arg13, %iterArg_31 = %arg14, %iterArg_32 = %arg15, %iterArg_33 = %arg16, %iterArg_34 = %arg17, %iterArg_35 = %arg18, %iterArg_36 = %arg19, %iterArg_37 = %arg20, %iterArg_38 = %arg21, %iterArg_39 = %arg22, %iterArg_40 = %arg23, %iterArg_41 = %arg24, %iterArg_42 = %arg25, %iterArg_43 = %arg26, %iterArg_44 = %arg1, %iterArg_45 = %c, %iterArg_46 = %38, %iterArg_47 = %39, %iterArg_48 = %40, %iterArg_49 = %41, %iterArg_50 = %42, %iterArg_51 = %43, %iterArg_52 = %44, %iterArg_53 = %45, %iterArg_54 = %46, %iterArg_55 = %47, %iterArg_56 = %48, %iterArg_57 = %49, %iterArg_58 = %50, %iterArg_59 = %51, %iterArg_60 = %52) : tensor<16x2048xf32>, tensor<16x2048x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x512x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x512x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x32xf32>, tensor<16x2048x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x2048xf32>, tensor<16x8192x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x8192x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x2048x8192xbf16>, tensor<16x8192x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x8x32x2048xbf16>, tensor<8x32xi32>, tensor<i32>, tensor<8x32x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x8192x16xbf16>, tensor<16x16x2048xbf16>
     cond {
      %c_61 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %54 = stablehlo.compare  LT, %iterArg_45, %c_61,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc450)
      stablehlo.return %54 : tensor<i1> loc(#loc449)
    } do {
      %c_61 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %54 = stablehlo.subtract %c_61, %iterArg_45 : tensor<i32> loc(#loc451)
      %c_62 = stablehlo.constant dense<1> : tensor<i32> loc(#loc449)
      %55 = stablehlo.subtract %54, %c_62 : tensor<i32> loc(#loc451)
      %c_63 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %56 = stablehlo.compare  LT, %55, %c_63,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %57 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_64 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %58 = stablehlo.add %57, %c_64 : tensor<i32> loc(#loc454)
      %59 = stablehlo.select %56, %58, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_65 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %60 = stablehlo.dynamic_slice %iterArg, %59, %c_65, sizes = [1, 2048] : (tensor<16x2048xf32>, tensor<i32>, tensor<i32>) -> tensor<1x2048xf32> loc(#loc456)
      %61 = stablehlo.reshape %60 : (tensor<1x2048xf32>) -> tensor<2048xf32> loc(#loc457)
      %c_66 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %62 = stablehlo.compare  LT, %55, %c_66,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %63 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_67 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %64 = stablehlo.add %63, %c_67 : tensor<i32> loc(#loc454)
      %65 = stablehlo.select %62, %64, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_68 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_69 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %66 = stablehlo.dynamic_slice %iterArg_20, %65, %c_68, %c_69, sizes = [1, 2048, 2048] : (tensor<16x2048x2048xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x2048x2048xbf16> loc(#loc456)
      %67 = stablehlo.reshape %66 : (tensor<1x2048x2048xbf16>) -> tensor<2048x2048xbf16> loc(#loc457)
      %c_70 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %68 = stablehlo.compare  LT, %55, %c_70,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %69 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_71 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %70 = stablehlo.add %69, %c_71 : tensor<i32> loc(#loc454)
      %71 = stablehlo.select %68, %70, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_72 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_73 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %72 = stablehlo.dynamic_slice %iterArg_21, %71, %c_72, %c_73, sizes = [1, 2048, 16] : (tensor<16x2048x16xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x2048x16xbf16> loc(#loc456)
      %73 = stablehlo.reshape %72 : (tensor<1x2048x16xbf16>) -> tensor<2048x16xbf16> loc(#loc457)
      %c_74 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %74 = stablehlo.compare  LT, %55, %c_74,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %75 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_75 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %76 = stablehlo.add %75, %c_75 : tensor<i32> loc(#loc454)
      %77 = stablehlo.select %74, %76, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_76 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_77 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %78 = stablehlo.dynamic_slice %iterArg_22, %77, %c_76, %c_77, sizes = [1, 16, 2048] : (tensor<16x16x2048xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x16x2048xbf16> loc(#loc456)
      %79 = stablehlo.reshape %78 : (tensor<1x16x2048xbf16>) -> tensor<16x2048xbf16> loc(#loc457)
      %c_78 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %80 = stablehlo.compare  LT, %55, %c_78,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %81 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_79 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %82 = stablehlo.add %81, %c_79 : tensor<i32> loc(#loc454)
      %83 = stablehlo.select %80, %82, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_80 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_81 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %84 = stablehlo.dynamic_slice %iterArg_23, %83, %c_80, %c_81, sizes = [1, 512, 2048] : (tensor<16x512x2048xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x512x2048xbf16> loc(#loc456)
      %85 = stablehlo.reshape %84 : (tensor<1x512x2048xbf16>) -> tensor<512x2048xbf16> loc(#loc457)
      %c_82 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %86 = stablehlo.compare  LT, %55, %c_82,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %87 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_83 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %88 = stablehlo.add %87, %c_83 : tensor<i32> loc(#loc454)
      %89 = stablehlo.select %86, %88, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_84 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_85 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %90 = stablehlo.dynamic_slice %iterArg_24, %89, %c_84, %c_85, sizes = [1, 2048, 16] : (tensor<16x2048x16xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x2048x16xbf16> loc(#loc456)
      %91 = stablehlo.reshape %90 : (tensor<1x2048x16xbf16>) -> tensor<2048x16xbf16> loc(#loc457)
      %c_86 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %92 = stablehlo.compare  LT, %55, %c_86,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %93 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_87 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %94 = stablehlo.add %93, %c_87 : tensor<i32> loc(#loc454)
      %95 = stablehlo.select %92, %94, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_88 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_89 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %96 = stablehlo.dynamic_slice %iterArg_25, %95, %c_88, %c_89, sizes = [1, 16, 512] : (tensor<16x16x512xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x16x512xbf16> loc(#loc456)
      %97 = stablehlo.reshape %96 : (tensor<1x16x512xbf16>) -> tensor<16x512xbf16> loc(#loc457)
      %c_90 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %98 = stablehlo.compare  LT, %55, %c_90,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %99 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_91 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %100 = stablehlo.add %99, %c_91 : tensor<i32> loc(#loc454)
      %101 = stablehlo.select %98, %100, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_92 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_93 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %102 = stablehlo.dynamic_slice %iterArg_26, %101, %c_92, %c_93, sizes = [1, 512, 2048] : (tensor<16x512x2048xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x512x2048xbf16> loc(#loc456)
      %103 = stablehlo.reshape %102 : (tensor<1x512x2048xbf16>) -> tensor<512x2048xbf16> loc(#loc457)
      %c_94 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %104 = stablehlo.compare  LT, %55, %c_94,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %105 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_95 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %106 = stablehlo.add %105, %c_95 : tensor<i32> loc(#loc454)
      %107 = stablehlo.select %104, %106, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_96 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_97 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %108 = stablehlo.dynamic_slice %iterArg_27, %107, %c_96, %c_97, sizes = [1, 2048, 16] : (tensor<16x2048x16xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x2048x16xbf16> loc(#loc456)
      %109 = stablehlo.reshape %108 : (tensor<1x2048x16xbf16>) -> tensor<2048x16xbf16> loc(#loc457)
      %c_98 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %110 = stablehlo.compare  LT, %55, %c_98,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %111 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_99 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %112 = stablehlo.add %111, %c_99 : tensor<i32> loc(#loc454)
      %113 = stablehlo.select %110, %112, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_100 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_101 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %114 = stablehlo.dynamic_slice %iterArg_28, %113, %c_100, %c_101, sizes = [1, 16, 512] : (tensor<16x16x512xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x16x512xbf16> loc(#loc456)
      %115 = stablehlo.reshape %114 : (tensor<1x16x512xbf16>) -> tensor<16x512xbf16> loc(#loc457)
      %c_102 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %116 = stablehlo.compare  LT, %55, %c_102,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %117 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_103 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %118 = stablehlo.add %117, %c_103 : tensor<i32> loc(#loc454)
      %119 = stablehlo.select %116, %118, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_104 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %120 = stablehlo.dynamic_slice %iterArg_29, %119, %c_104, sizes = [1, 32] : (tensor<16x32xf32>, tensor<i32>, tensor<i32>) -> tensor<1x32xf32> loc(#loc456)
      %121 = stablehlo.reshape %120 : (tensor<1x32xf32>) -> tensor<32xf32> loc(#loc457)
      %c_105 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %122 = stablehlo.compare  LT, %55, %c_105,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %123 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_106 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %124 = stablehlo.add %123, %c_106 : tensor<i32> loc(#loc454)
      %125 = stablehlo.select %122, %124, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_107 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_108 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %126 = stablehlo.dynamic_slice %iterArg_30, %125, %c_107, %c_108, sizes = [1, 2048, 2048] : (tensor<16x2048x2048xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x2048x2048xbf16> loc(#loc456)
      %127 = stablehlo.reshape %126 : (tensor<1x2048x2048xbf16>) -> tensor<2048x2048xbf16> loc(#loc457)
      %c_109 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %128 = stablehlo.compare  LT, %55, %c_109,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %129 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_110 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %130 = stablehlo.add %129, %c_110 : tensor<i32> loc(#loc454)
      %131 = stablehlo.select %128, %130, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_111 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_112 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %132 = stablehlo.dynamic_slice %iterArg_31, %131, %c_111, %c_112, sizes = [1, 2048, 16] : (tensor<16x2048x16xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x2048x16xbf16> loc(#loc456)
      %133 = stablehlo.reshape %132 : (tensor<1x2048x16xbf16>) -> tensor<2048x16xbf16> loc(#loc457)
      %c_113 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %134 = stablehlo.compare  LT, %55, %c_113,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %135 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_114 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %136 = stablehlo.add %135, %c_114 : tensor<i32> loc(#loc454)
      %137 = stablehlo.select %134, %136, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_115 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_116 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %138 = stablehlo.dynamic_slice %iterArg_32, %137, %c_115, %c_116, sizes = [1, 16, 2048] : (tensor<16x16x2048xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x16x2048xbf16> loc(#loc456)
      %139 = stablehlo.reshape %138 : (tensor<1x16x2048xbf16>) -> tensor<16x2048xbf16> loc(#loc457)
      %c_117 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %140 = stablehlo.compare  LT, %55, %c_117,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %141 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_118 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %142 = stablehlo.add %141, %c_118 : tensor<i32> loc(#loc454)
      %143 = stablehlo.select %140, %142, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_119 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %144 = stablehlo.dynamic_slice %iterArg_33, %143, %c_119, sizes = [1, 2048] : (tensor<16x2048xf32>, tensor<i32>, tensor<i32>) -> tensor<1x2048xf32> loc(#loc456)
      %145 = stablehlo.reshape %144 : (tensor<1x2048xf32>) -> tensor<2048xf32> loc(#loc457)
      %c_120 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %146 = stablehlo.compare  LT, %55, %c_120,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %147 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_121 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %148 = stablehlo.add %147, %c_121 : tensor<i32> loc(#loc454)
      %149 = stablehlo.select %146, %148, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_122 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_123 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %150 = stablehlo.dynamic_slice %iterArg_34, %149, %c_122, %c_123, sizes = [1, 8192, 2048] : (tensor<16x8192x2048xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x8192x2048xbf16> loc(#loc456)
      %151 = stablehlo.reshape %150 : (tensor<1x8192x2048xbf16>) -> tensor<8192x2048xbf16> loc(#loc457)
      %c_124 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %152 = stablehlo.compare  LT, %55, %c_124,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %153 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_125 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %154 = stablehlo.add %153, %c_125 : tensor<i32> loc(#loc454)
      %155 = stablehlo.select %152, %154, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_126 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_127 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %156 = stablehlo.dynamic_slice %iterArg_35, %155, %c_126, %c_127, sizes = [1, 2048, 16] : (tensor<16x2048x16xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x2048x16xbf16> loc(#loc456)
      %157 = stablehlo.reshape %156 : (tensor<1x2048x16xbf16>) -> tensor<2048x16xbf16> loc(#loc457)
      %c_128 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %158 = stablehlo.compare  LT, %55, %c_128,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %159 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_129 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %160 = stablehlo.add %159, %c_129 : tensor<i32> loc(#loc454)
      %161 = stablehlo.select %158, %160, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_130 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_131 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %162 = stablehlo.dynamic_slice %iterArg_36, %161, %c_130, %c_131, sizes = [1, 16, 8192] : (tensor<16x16x8192xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x16x8192xbf16> loc(#loc456)
      %163 = stablehlo.reshape %162 : (tensor<1x16x8192xbf16>) -> tensor<16x8192xbf16> loc(#loc457)
      %c_132 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %164 = stablehlo.compare  LT, %55, %c_132,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %165 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_133 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %166 = stablehlo.add %165, %c_133 : tensor<i32> loc(#loc454)
      %167 = stablehlo.select %164, %166, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_134 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_135 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %168 = stablehlo.dynamic_slice %iterArg_37, %167, %c_134, %c_135, sizes = [1, 8192, 2048] : (tensor<16x8192x2048xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x8192x2048xbf16> loc(#loc456)
      %169 = stablehlo.reshape %168 : (tensor<1x8192x2048xbf16>) -> tensor<8192x2048xbf16> loc(#loc457)
      %c_136 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %170 = stablehlo.compare  LT, %55, %c_136,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %171 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_137 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %172 = stablehlo.add %171, %c_137 : tensor<i32> loc(#loc454)
      %173 = stablehlo.select %170, %172, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_138 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_139 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %174 = stablehlo.dynamic_slice %iterArg_38, %173, %c_138, %c_139, sizes = [1, 2048, 16] : (tensor<16x2048x16xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x2048x16xbf16> loc(#loc456)
      %175 = stablehlo.reshape %174 : (tensor<1x2048x16xbf16>) -> tensor<2048x16xbf16> loc(#loc457)
      %c_140 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %176 = stablehlo.compare  LT, %55, %c_140,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %177 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_141 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %178 = stablehlo.add %177, %c_141 : tensor<i32> loc(#loc454)
      %179 = stablehlo.select %176, %178, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_142 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_143 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %180 = stablehlo.dynamic_slice %iterArg_39, %179, %c_142, %c_143, sizes = [1, 16, 8192] : (tensor<16x16x8192xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x16x8192xbf16> loc(#loc456)
      %181 = stablehlo.reshape %180 : (tensor<1x16x8192xbf16>) -> tensor<16x8192xbf16> loc(#loc457)
      %c_144 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %182 = stablehlo.compare  LT, %55, %c_144,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %183 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_145 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %184 = stablehlo.add %183, %c_145 : tensor<i32> loc(#loc454)
      %185 = stablehlo.select %182, %184, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_146 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_147 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %186 = stablehlo.dynamic_slice %iterArg_40, %185, %c_146, %c_147, sizes = [1, 2048, 8192] : (tensor<16x2048x8192xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x2048x8192xbf16> loc(#loc456)
      %187 = stablehlo.reshape %186 : (tensor<1x2048x8192xbf16>) -> tensor<2048x8192xbf16> loc(#loc457)
      %c_148 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %188 = stablehlo.compare  LT, %55, %c_148,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %189 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_149 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %190 = stablehlo.add %189, %c_149 : tensor<i32> loc(#loc454)
      %191 = stablehlo.select %188, %190, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_150 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_151 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %192 = stablehlo.dynamic_slice %iterArg_41, %191, %c_150, %c_151, sizes = [1, 8192, 16] : (tensor<16x8192x16xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x8192x16xbf16> loc(#loc456)
      %193 = stablehlo.reshape %192 : (tensor<1x8192x16xbf16>) -> tensor<8192x16xbf16> loc(#loc457)
      %c_152 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %194 = stablehlo.compare  LT, %55, %c_152,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %195 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_153 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %196 = stablehlo.add %195, %c_153 : tensor<i32> loc(#loc454)
      %197 = stablehlo.select %194, %196, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_154 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_155 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %198 = stablehlo.dynamic_slice %iterArg_42, %197, %c_154, %c_155, sizes = [1, 16, 2048] : (tensor<16x16x2048xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x16x2048xbf16> loc(#loc456)
      %199 = stablehlo.reshape %198 : (tensor<1x16x2048xbf16>) -> tensor<16x2048xbf16> loc(#loc457)
      %c_156 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %200 = stablehlo.compare  LT, %55, %c_156,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %201 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_157 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %202 = stablehlo.add %201, %c_157 : tensor<i32> loc(#loc454)
      %203 = stablehlo.select %200, %202, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_158 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_159 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_160 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %204 = stablehlo.dynamic_slice %iterArg_43, %203, %c_158, %c_159, %c_160, sizes = [1, 8, 32, 2048] : (tensor<16x8x32x2048xbf16>, tensor<i32>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x8x32x2048xbf16> loc(#loc456)
      %205 = stablehlo.reshape %204 : (tensor<1x8x32x2048xbf16>) -> tensor<8x32x2048xbf16> loc(#loc457)
      %206:15 = func.call @None_4(%iterArg_44, %iterArg_46, %61, %67, %73, %79, %85, %91, %97, %103, %109, %115, %121, %127, %133, %139, %145, %151, %157, %163, %169, %175, %181, %187, %193, %199, %205) : (tensor<8x32xi32>, tensor<8x32x2048xbf16>, tensor<2048xf32>, tensor<2048x2048xbf16>, tensor<2048x16xbf16>, tensor<16x2048xbf16>, tensor<512x2048xbf16>, tensor<2048x16xbf16>, tensor<16x512xbf16>, tensor<512x2048xbf16>, tensor<2048x16xbf16>, tensor<16x512xbf16>, tensor<32xf32>, tensor<2048x2048xbf16>, tensor<2048x16xbf16>, tensor<16x2048xbf16>, tensor<2048xf32>, tensor<8192x2048xbf16>, tensor<2048x16xbf16>, tensor<16x8192xbf16>, tensor<8192x2048xbf16>, tensor<2048x16xbf16>, tensor<16x8192xbf16>, tensor<2048x8192xbf16>, tensor<8192x16xbf16>, tensor<16x2048xbf16>, tensor<8x32x2048xbf16>) -> (tensor<8x32x2048xbf16>, tensor<2048x16xbf16>, tensor<16x2048xbf16>, tensor<2048x16xbf16>, tensor<16x512xbf16>, tensor<2048x16xbf16>, tensor<16x512xbf16>, tensor<2048x16xbf16>, tensor<16x2048xbf16>, tensor<2048x16xbf16>, tensor<16x8192xbf16>, tensor<2048x16xbf16>, tensor<16x8192xbf16>, tensor<8192x16xbf16>, tensor<16x2048xbf16>) loc(#loc458)
      %207 = stablehlo.broadcast_in_dim %206#1, dims = [1, 2] : (tensor<2048x16xbf16>) -> tensor<1x2048x16xbf16> loc(#loc459)
      %c_161 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %208 = stablehlo.compare  LT, %55, %c_161,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %209 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_162 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %210 = stablehlo.add %209, %c_162 : tensor<i32> loc(#loc454)
      %211 = stablehlo.select %208, %210, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_163 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_164 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %212 = stablehlo.dynamic_update_slice %iterArg_47, %207, %211, %c_163, %c_164 : (tensor<16x2048x16xbf16>, tensor<1x2048x16xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<16x2048x16xbf16> loc(#loc460)
      %213 = stablehlo.broadcast_in_dim %206#2, dims = [1, 2] : (tensor<16x2048xbf16>) -> tensor<1x16x2048xbf16> loc(#loc459)
      %c_165 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %214 = stablehlo.compare  LT, %55, %c_165,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %215 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_166 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %216 = stablehlo.add %215, %c_166 : tensor<i32> loc(#loc454)
      %217 = stablehlo.select %214, %216, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_167 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_168 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %218 = stablehlo.dynamic_update_slice %iterArg_48, %213, %217, %c_167, %c_168 : (tensor<16x16x2048xbf16>, tensor<1x16x2048xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<16x16x2048xbf16> loc(#loc460)
      %219 = stablehlo.broadcast_in_dim %206#3, dims = [1, 2] : (tensor<2048x16xbf16>) -> tensor<1x2048x16xbf16> loc(#loc459)
      %c_169 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %220 = stablehlo.compare  LT, %55, %c_169,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %221 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_170 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %222 = stablehlo.add %221, %c_170 : tensor<i32> loc(#loc454)
      %223 = stablehlo.select %220, %222, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_171 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_172 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %224 = stablehlo.dynamic_update_slice %iterArg_49, %219, %223, %c_171, %c_172 : (tensor<16x2048x16xbf16>, tensor<1x2048x16xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<16x2048x16xbf16> loc(#loc460)
      %225 = stablehlo.broadcast_in_dim %206#4, dims = [1, 2] : (tensor<16x512xbf16>) -> tensor<1x16x512xbf16> loc(#loc459)
      %c_173 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %226 = stablehlo.compare  LT, %55, %c_173,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %227 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_174 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %228 = stablehlo.add %227, %c_174 : tensor<i32> loc(#loc454)
      %229 = stablehlo.select %226, %228, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_175 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_176 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %230 = stablehlo.dynamic_update_slice %iterArg_50, %225, %229, %c_175, %c_176 : (tensor<16x16x512xbf16>, tensor<1x16x512xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<16x16x512xbf16> loc(#loc460)
      %231 = stablehlo.broadcast_in_dim %206#5, dims = [1, 2] : (tensor<2048x16xbf16>) -> tensor<1x2048x16xbf16> loc(#loc459)
      %c_177 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %232 = stablehlo.compare  LT, %55, %c_177,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %233 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_178 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %234 = stablehlo.add %233, %c_178 : tensor<i32> loc(#loc454)
      %235 = stablehlo.select %232, %234, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_179 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_180 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %236 = stablehlo.dynamic_update_slice %iterArg_51, %231, %235, %c_179, %c_180 : (tensor<16x2048x16xbf16>, tensor<1x2048x16xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<16x2048x16xbf16> loc(#loc460)
      %237 = stablehlo.broadcast_in_dim %206#6, dims = [1, 2] : (tensor<16x512xbf16>) -> tensor<1x16x512xbf16> loc(#loc459)
      %c_181 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %238 = stablehlo.compare  LT, %55, %c_181,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %239 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_182 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %240 = stablehlo.add %239, %c_182 : tensor<i32> loc(#loc454)
      %241 = stablehlo.select %238, %240, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_183 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_184 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %242 = stablehlo.dynamic_update_slice %iterArg_52, %237, %241, %c_183, %c_184 : (tensor<16x16x512xbf16>, tensor<1x16x512xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<16x16x512xbf16> loc(#loc460)
      %243 = stablehlo.broadcast_in_dim %206#7, dims = [1, 2] : (tensor<2048x16xbf16>) -> tensor<1x2048x16xbf16> loc(#loc459)
      %c_185 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %244 = stablehlo.compare  LT, %55, %c_185,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %245 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_186 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %246 = stablehlo.add %245, %c_186 : tensor<i32> loc(#loc454)
      %247 = stablehlo.select %244, %246, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_187 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_188 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %248 = stablehlo.dynamic_update_slice %iterArg_53, %243, %247, %c_187, %c_188 : (tensor<16x2048x16xbf16>, tensor<1x2048x16xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<16x2048x16xbf16> loc(#loc460)
      %249 = stablehlo.broadcast_in_dim %206#8, dims = [1, 2] : (tensor<16x2048xbf16>) -> tensor<1x16x2048xbf16> loc(#loc459)
      %c_189 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %250 = stablehlo.compare  LT, %55, %c_189,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %251 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_190 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %252 = stablehlo.add %251, %c_190 : tensor<i32> loc(#loc454)
      %253 = stablehlo.select %250, %252, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_191 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_192 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %254 = stablehlo.dynamic_update_slice %iterArg_54, %249, %253, %c_191, %c_192 : (tensor<16x16x2048xbf16>, tensor<1x16x2048xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<16x16x2048xbf16> loc(#loc460)
      %255 = stablehlo.broadcast_in_dim %206#9, dims = [1, 2] : (tensor<2048x16xbf16>) -> tensor<1x2048x16xbf16> loc(#loc459)
      %c_193 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %256 = stablehlo.compare  LT, %55, %c_193,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %257 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_194 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %258 = stablehlo.add %257, %c_194 : tensor<i32> loc(#loc454)
      %259 = stablehlo.select %256, %258, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_195 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_196 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %260 = stablehlo.dynamic_update_slice %iterArg_55, %255, %259, %c_195, %c_196 : (tensor<16x2048x16xbf16>, tensor<1x2048x16xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<16x2048x16xbf16> loc(#loc460)
      %261 = stablehlo.broadcast_in_dim %206#10, dims = [1, 2] : (tensor<16x8192xbf16>) -> tensor<1x16x8192xbf16> loc(#loc459)
      %c_197 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %262 = stablehlo.compare  LT, %55, %c_197,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %263 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_198 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %264 = stablehlo.add %263, %c_198 : tensor<i32> loc(#loc454)
      %265 = stablehlo.select %262, %264, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_199 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_200 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %266 = stablehlo.dynamic_update_slice %iterArg_56, %261, %265, %c_199, %c_200 : (tensor<16x16x8192xbf16>, tensor<1x16x8192xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<16x16x8192xbf16> loc(#loc460)
      %267 = stablehlo.broadcast_in_dim %206#11, dims = [1, 2] : (tensor<2048x16xbf16>) -> tensor<1x2048x16xbf16> loc(#loc459)
      %c_201 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %268 = stablehlo.compare  LT, %55, %c_201,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %269 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_202 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %270 = stablehlo.add %269, %c_202 : tensor<i32> loc(#loc454)
      %271 = stablehlo.select %268, %270, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_203 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_204 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %272 = stablehlo.dynamic_update_slice %iterArg_57, %267, %271, %c_203, %c_204 : (tensor<16x2048x16xbf16>, tensor<1x2048x16xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<16x2048x16xbf16> loc(#loc460)
      %273 = stablehlo.broadcast_in_dim %206#12, dims = [1, 2] : (tensor<16x8192xbf16>) -> tensor<1x16x8192xbf16> loc(#loc459)
      %c_205 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %274 = stablehlo.compare  LT, %55, %c_205,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %275 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_206 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %276 = stablehlo.add %275, %c_206 : tensor<i32> loc(#loc454)
      %277 = stablehlo.select %274, %276, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_207 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_208 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %278 = stablehlo.dynamic_update_slice %iterArg_58, %273, %277, %c_207, %c_208 : (tensor<16x16x8192xbf16>, tensor<1x16x8192xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<16x16x8192xbf16> loc(#loc460)
      %279 = stablehlo.broadcast_in_dim %206#13, dims = [1, 2] : (tensor<8192x16xbf16>) -> tensor<1x8192x16xbf16> loc(#loc459)
      %c_209 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %280 = stablehlo.compare  LT, %55, %c_209,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %281 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_210 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %282 = stablehlo.add %281, %c_210 : tensor<i32> loc(#loc454)
      %283 = stablehlo.select %280, %282, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_211 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_212 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %284 = stablehlo.dynamic_update_slice %iterArg_59, %279, %283, %c_211, %c_212 : (tensor<16x8192x16xbf16>, tensor<1x8192x16xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<16x8192x16xbf16> loc(#loc460)
      %285 = stablehlo.broadcast_in_dim %206#14, dims = [1, 2] : (tensor<16x2048xbf16>) -> tensor<1x16x2048xbf16> loc(#loc459)
      %c_213 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %286 = stablehlo.compare  LT, %55, %c_213,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc452)
      %287 = stablehlo.convert %55 : tensor<i32> loc(#loc453)
      %c_214 = stablehlo.constant dense<16> : tensor<i32> loc(#loc449)
      %288 = stablehlo.add %287, %c_214 : tensor<i32> loc(#loc454)
      %289 = stablehlo.select %286, %288, %55 : tensor<i1>, tensor<i32> loc(#loc455)
      %c_215 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %c_216 = stablehlo.constant dense<0> : tensor<i32> loc(#loc449)
      %290 = stablehlo.dynamic_update_slice %iterArg_60, %285, %289, %c_215, %c_216 : (tensor<16x16x2048xbf16>, tensor<1x16x2048xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<16x16x2048xbf16> loc(#loc460)
      %c_217 = stablehlo.constant dense<1> : tensor<i32> loc(#loc449)
      %291 = stablehlo.add %iterArg_45, %c_217 : tensor<i32> loc(#loc454)
      stablehlo.return %iterArg, %iterArg_20, %iterArg_21, %iterArg_22, %iterArg_23, %iterArg_24, %iterArg_25, %iterArg_26, %iterArg_27, %iterArg_28, %iterArg_29, %iterArg_30, %iterArg_31, %iterArg_32, %iterArg_33, %iterArg_34, %iterArg_35, %iterArg_36, %iterArg_37, %iterArg_38, %iterArg_39, %iterArg_40, %iterArg_41, %iterArg_42, %iterArg_43, %iterArg_44, %291, %206#0, %212, %218, %224, %230, %236, %242, %248, %254, %260, %266, %272, %278, %284, %290 : tensor<16x2048xf32>, tensor<16x2048x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x512x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x512x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x32xf32>, tensor<16x2048x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x2048xf32>, tensor<16x8192x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x8192x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x2048x8192xbf16>, tensor<16x8192x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x8x32x2048xbf16>, tensor<8x32xi32>, tensor<i32>, tensor<8x32x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x8192x16xbf16>, tensor<16x16x2048xbf16> loc(#loc449)
    } loc(#loc449)
    return %53#28, %53#29, %53#30, %53#31, %53#32, %53#33, %53#34, %53#35, %53#36, %53#37, %53#38, %53#39, %53#40, %53#41, %19, %16 : tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x512xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x2048xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x2048x16xbf16>, tensor<16x16x8192xbf16>, tensor<16x8192x16xbf16>, tensor<16x16x2048xbf16>, tensor<2048x16xbf16>, tensor<16x128256xbf16> loc(#loc292)
  } loc(#loc292)
  func.func private @log_softmax_3(%arg0: tensor<248x128256xf32> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/pjit"(#loc317)), %arg1: tensor<248x1xf32> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/pjit"(#loc317)), %arg2: tensor<248x128256xf32> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/pjit"(#loc317))) -> tensor<248x128256xf32> {
    %0 = stablehlo.negate %arg2 : tensor<248x128256xf32> loc(#loc395)
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc396)
    %1 = stablehlo.reduce(%0 init: %cst) applies stablehlo.add across dimensions = [1] : (tensor<248x128256xf32>, tensor<f32>) -> tensor<248xf32> loc(#loc396)
    %2 = stablehlo.reshape %1 : (tensor<248xf32>) -> tensor<248x1xf32> loc(#loc397)
    %3 = stablehlo.divide %2, %arg1 : tensor<248x1xf32> loc(#loc398)
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc396)
    %4 = stablehlo.reduce(%3 init: %cst_0) applies stablehlo.add across dimensions = [1] : (tensor<248x1xf32>, tensor<f32>) -> tensor<248xf32> loc(#loc396)
    %5 = stablehlo.broadcast_in_dim %4, dims = [0] : (tensor<248xf32>) -> tensor<248x128256xf32> loc(#loc399)
    %6 = stablehlo.multiply %5, %arg0 : tensor<248x128256xf32> loc(#loc400)
    %7 = stablehlo.add %arg2, %6 : tensor<248x128256xf32> loc(#loc401)
    return %7 : tensor<248x128256xf32> loc(#loc392)
  } loc(#loc392)
  func.func private @None_4(%arg0: tensor<8x32xi32> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg1: tensor<8x32x2048xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg2: tensor<2048xf32> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg3: tensor<2048x2048xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg4: tensor<2048x16xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg5: tensor<16x2048xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg6: tensor<512x2048xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg7: tensor<2048x16xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg8: tensor<16x512xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg9: tensor<512x2048xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg10: tensor<2048x16xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg11: tensor<16x512xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg12: tensor<32xf32> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg13: tensor<2048x2048xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg14: tensor<2048x16xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg15: tensor<16x2048xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg16: tensor<2048xf32> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg17: tensor<8192x2048xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg18: tensor<2048x16xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg19: tensor<16x8192xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg20: tensor<8192x2048xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg21: tensor<2048x16xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg22: tensor<16x8192xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg23: tensor<2048x8192xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg24: tensor<8192x16xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg25: tensor<16x2048xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336)), %arg26: tensor<8x32x2048xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/closed_call"(#loc336))) -> (tensor<8x32x2048xbf16>, tensor<2048x16xbf16>, tensor<16x2048xbf16>, tensor<2048x16xbf16>, tensor<16x512xbf16>, tensor<2048x16xbf16>, tensor<16x512xbf16>, tensor<2048x16xbf16>, tensor<16x2048xbf16>, tensor<2048x16xbf16>, tensor<16x8192xbf16>, tensor<2048x16xbf16>, tensor<16x8192xbf16>, tensor<8192x16xbf16>, tensor<16x2048xbf16>) {
    %0:27 = stablehlo.optimization_barrier %arg2, %arg3, %arg4, %arg5, %arg6, %arg7, %arg8, %arg9, %arg10, %arg11, %arg12, %arg13, %arg14, %arg15, %arg16, %arg17, %arg18, %arg19, %arg20, %arg21, %arg22, %arg23, %arg24, %arg25, %arg26, %arg0, %arg1 : tensor<2048xf32>, tensor<2048x2048xbf16>, tensor<2048x16xbf16>, tensor<16x2048xbf16>, tensor<512x2048xbf16>, tensor<2048x16xbf16>, tensor<16x512xbf16>, tensor<512x2048xbf16>, tensor<2048x16xbf16>, tensor<16x512xbf16>, tensor<32xf32>, tensor<2048x2048xbf16>, tensor<2048x16xbf16>, tensor<16x2048xbf16>, tensor<2048xf32>, tensor<8192x2048xbf16>, tensor<2048x16xbf16>, tensor<16x8192xbf16>, tensor<8192x2048xbf16>, tensor<2048x16xbf16>, tensor<16x8192xbf16>, tensor<2048x8192xbf16>, tensor<8192x16xbf16>, tensor<16x2048xbf16>, tensor<8x32x2048xbf16>, tensor<8x32xi32>, tensor<8x32x2048xbf16> loc(#loc549)
    %1 = stablehlo.multiply %0#24, %0#24 : tensor<8x32x2048xbf16> loc(#loc739)
    %2 = call @integer_pow_5(%0#24) : (tensor<8x32x2048xbf16>) -> tensor<8x32x2048xbf16> loc(#loc739)
    %cst = stablehlo.constant dense<2.000000e+00> : tensor<bf16> loc(#loc549)
    %3 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<bf16>) -> tensor<8x32x2048xbf16> loc(#loc740)
    %4 = stablehlo.multiply %3, %2 : tensor<8x32x2048xbf16> loc(#loc740)
    %5 = stablehlo.convert %1 : (tensor<8x32x2048xbf16>) -> tensor<8x32x2048xf32> loc(#loc741)
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc742)
    %6 = stablehlo.reduce(%5 init: %cst_0) applies stablehlo.add across dimensions = [2] : (tensor<8x32x2048xf32>, tensor<f32>) -> tensor<8x32xf32> loc(#loc742)
    %7 = stablehlo.broadcast_in_dim %6, dims = [0, 1] : (tensor<8x32xf32>) -> tensor<8x32x1xf32> loc(#loc743)
    %cst_1 = stablehlo.constant dense<2.048000e+03> : tensor<f32> loc(#loc549)
    %8 = stablehlo.broadcast_in_dim %cst_1, dims = [] : (tensor<f32>) -> tensor<8x32x1xf32> loc(#loc744)
    %9 = stablehlo.divide %7, %8 : tensor<8x32x1xf32> loc(#loc744)
    %10 = stablehlo.convert %9 : (tensor<8x32x1xf32>) -> tensor<8x32x1xbf16> loc(#loc741)
    %cst_2 = stablehlo.constant dense<1.001360e-05> : tensor<bf16> loc(#loc549)
    %11 = stablehlo.broadcast_in_dim %cst_2, dims = [] : (tensor<bf16>) -> tensor<8x32x1xbf16> loc(#loc745)
    %12 = stablehlo.add %10, %11 : tensor<8x32x1xbf16> loc(#loc745)
    %13 = stablehlo.rsqrt %12 : tensor<8x32x1xbf16> loc(#loc746)
    %14 = stablehlo.divide %13, %12 : tensor<8x32x1xbf16> loc(#loc747)
    %cst_3 = stablehlo.constant dense<-5.000000e-01> : tensor<bf16> loc(#loc549)
    %15 = stablehlo.broadcast_in_dim %cst_3, dims = [] : (tensor<bf16>) -> tensor<8x32x1xbf16> loc(#loc748)
    %16 = stablehlo.multiply %15, %14 : tensor<8x32x1xbf16> loc(#loc748)
    %17 = stablehlo.broadcast_in_dim %13, dims = [0, 1, 2] : (tensor<8x32x1xbf16>) -> tensor<8x32x2048xbf16> loc(#loc748)
    %18 = stablehlo.multiply %0#24, %17 : tensor<8x32x2048xbf16> loc(#loc748)
    %19 = stablehlo.convert %0#0 : (tensor<2048xf32>) -> tensor<2048xbf16> loc(#loc749)
    %20 = stablehlo.broadcast_in_dim %19, dims = [2] : (tensor<2048xbf16>) -> tensor<1x1x2048xbf16> loc(#loc750)
    %21 = stablehlo.broadcast_in_dim %20, dims = [0, 1, 2] : (tensor<1x1x2048xbf16>) -> tensor<8x32x2048xbf16> loc(#loc751)
    %22 = stablehlo.multiply %21, %18 : tensor<8x32x2048xbf16> loc(#loc751)
    %23 = stablehlo.transpose %0#1, dims = [1, 0] : (tensor<2048x2048xbf16>) -> tensor<2048x2048xbf16> loc(#loc752)
    %24 = stablehlo.dot_general %22, %23, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x2048xbf16>) -> tensor<8x32x2048xbf16> loc(#loc753)
    %25 = stablehlo.dot_general %22, %0#2, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x16xbf16>) -> tensor<8x32x16xbf16> loc(#loc754)
    %26 = stablehlo.dot_general %25, %0#3, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<16x2048xbf16>) -> tensor<8x32x2048xbf16> loc(#loc754)
    %cst_4 = stablehlo.constant dense<6.250000e-02> : tensor<bf16> loc(#loc549)
    %27 = stablehlo.broadcast_in_dim %cst_4, dims = [] : (tensor<bf16>) -> tensor<8x32x2048xbf16> loc(#loc755)
    %28 = stablehlo.multiply %26, %27 : tensor<8x32x2048xbf16> loc(#loc755)
    %29 = stablehlo.add %24, %28 : tensor<8x32x2048xbf16> loc(#loc756)
    %30 = stablehlo.transpose %0#4, dims = [1, 0] : (tensor<512x2048xbf16>) -> tensor<2048x512xbf16> loc(#loc757)
    %31 = stablehlo.dot_general %22, %30, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x512xbf16>) -> tensor<8x32x512xbf16> loc(#loc758)
    %32 = stablehlo.dot_general %22, %0#5, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x16xbf16>) -> tensor<8x32x16xbf16> loc(#loc759)
    %33 = stablehlo.dot_general %32, %0#6, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<16x512xbf16>) -> tensor<8x32x512xbf16> loc(#loc759)
    %cst_5 = stablehlo.constant dense<6.250000e-02> : tensor<bf16> loc(#loc549)
    %34 = stablehlo.broadcast_in_dim %cst_5, dims = [] : (tensor<bf16>) -> tensor<8x32x512xbf16> loc(#loc760)
    %35 = stablehlo.multiply %33, %34 : tensor<8x32x512xbf16> loc(#loc760)
    %36 = stablehlo.add %31, %35 : tensor<8x32x512xbf16> loc(#loc761)
    %37 = stablehlo.transpose %0#7, dims = [1, 0] : (tensor<512x2048xbf16>) -> tensor<2048x512xbf16> loc(#loc762)
    %38 = stablehlo.dot_general %22, %37, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x512xbf16>) -> tensor<8x32x512xbf16> loc(#loc763)
    %39 = stablehlo.dot_general %22, %0#8, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x16xbf16>) -> tensor<8x32x16xbf16> loc(#loc764)
    %40 = stablehlo.dot_general %39, %0#9, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<16x512xbf16>) -> tensor<8x32x512xbf16> loc(#loc764)
    %cst_6 = stablehlo.constant dense<6.250000e-02> : tensor<bf16> loc(#loc549)
    %41 = stablehlo.broadcast_in_dim %cst_6, dims = [] : (tensor<bf16>) -> tensor<8x32x512xbf16> loc(#loc765)
    %42 = stablehlo.multiply %40, %41 : tensor<8x32x512xbf16> loc(#loc765)
    %43 = stablehlo.add %38, %42 : tensor<8x32x512xbf16> loc(#loc766)
    %44 = stablehlo.reshape %29 : (tensor<8x32x2048xbf16>) -> tensor<8x32x32x64xbf16> loc(#loc767)
    %45 = stablehlo.transpose %44, dims = [0, 2, 1, 3] : (tensor<8x32x32x64xbf16>) -> tensor<8x32x32x64xbf16> loc(#loc768)
    %46 = stablehlo.reshape %36 : (tensor<8x32x512xbf16>) -> tensor<8x32x8x64xbf16> loc(#loc769)
    %47 = stablehlo.transpose %46, dims = [0, 2, 1, 3] : (tensor<8x32x8x64xbf16>) -> tensor<8x8x32x64xbf16> loc(#loc770)
    %48 = stablehlo.reshape %43 : (tensor<8x32x512xbf16>) -> tensor<8x32x8x64xbf16> loc(#loc771)
    %49 = stablehlo.transpose %48, dims = [0, 2, 1, 3] : (tensor<8x32x8x64xbf16>) -> tensor<8x8x32x64xbf16> loc(#loc772)
    %50 = stablehlo.convert %0#25 : (tensor<8x32xi32>) -> tensor<8x32xf32> loc(#loc773)
    %51 = stablehlo.reshape %50 : (tensor<8x32xf32>) -> tensor<8x32x1xf32> loc(#loc774)
    %52 = stablehlo.broadcast_in_dim %0#10, dims = [2] : (tensor<32xf32>) -> tensor<1x1x32xf32> loc(#loc775)
    %53 = stablehlo.broadcast_in_dim %51, dims = [0, 1, 2] : (tensor<8x32x1xf32>) -> tensor<8x32x32xf32> loc(#loc776)
    %54 = stablehlo.broadcast_in_dim %52, dims = [0, 1, 2] : (tensor<1x1x32xf32>) -> tensor<8x32x32xf32> loc(#loc776)
    %55 = stablehlo.multiply %53, %54 : tensor<8x32x32xf32> loc(#loc776)
    %56 = stablehlo.concatenate %55, %55, dim = 2 : (tensor<8x32x32xf32>, tensor<8x32x32xf32>) -> tensor<8x32x64xf32> loc(#loc777)
    %57 = stablehlo.cosine %56 : tensor<8x32x64xf32> loc(#loc778)
    %58 = stablehlo.sine %56 : tensor<8x32x64xf32> loc(#loc779)
    %59 = stablehlo.broadcast_in_dim %57, dims = [0, 2, 3] : (tensor<8x32x64xf32>) -> tensor<8x1x32x64xf32> loc(#loc780)
    %60 = stablehlo.broadcast_in_dim %58, dims = [0, 2, 3] : (tensor<8x32x64xf32>) -> tensor<8x1x32x64xf32> loc(#loc781)
    %61 = stablehlo.convert %45 : (tensor<8x32x32x64xbf16>) -> tensor<8x32x32x64xf32> loc(#loc782)
    %62 = stablehlo.broadcast_in_dim %59, dims = [0, 1, 2, 3] : (tensor<8x1x32x64xf32>) -> tensor<8x32x32x64xf32> loc(#loc783)
    %63 = stablehlo.multiply %61, %62 : tensor<8x32x32x64xf32> loc(#loc783)
    %64 = stablehlo.slice %45 [0:8, 0:32, 0:32, 0:32] : (tensor<8x32x32x64xbf16>) -> tensor<8x32x32x32xbf16> loc(#loc784)
    %65 = stablehlo.slice %45 [0:8, 0:32, 0:32, 32:64] : (tensor<8x32x32x64xbf16>) -> tensor<8x32x32x32xbf16> loc(#loc784)
    %66 = stablehlo.negate %65 : tensor<8x32x32x32xbf16> loc(#loc785)
    %67 = stablehlo.concatenate %66, %64, dim = 3 : (tensor<8x32x32x32xbf16>, tensor<8x32x32x32xbf16>) -> tensor<8x32x32x64xbf16> loc(#loc786)
    %68 = stablehlo.convert %67 : (tensor<8x32x32x64xbf16>) -> tensor<8x32x32x64xf32> loc(#loc782)
    %69 = stablehlo.broadcast_in_dim %60, dims = [0, 1, 2, 3] : (tensor<8x1x32x64xf32>) -> tensor<8x32x32x64xf32> loc(#loc783)
    %70 = stablehlo.multiply %68, %69 : tensor<8x32x32x64xf32> loc(#loc783)
    %71 = stablehlo.add %63, %70 : tensor<8x32x32x64xf32> loc(#loc787)
    %72 = stablehlo.convert %47 : (tensor<8x8x32x64xbf16>) -> tensor<8x8x32x64xf32> loc(#loc788)
    %73 = stablehlo.broadcast_in_dim %59, dims = [0, 1, 2, 3] : (tensor<8x1x32x64xf32>) -> tensor<8x8x32x64xf32> loc(#loc789)
    %74 = stablehlo.multiply %72, %73 : tensor<8x8x32x64xf32> loc(#loc789)
    %75 = stablehlo.slice %47 [0:8, 0:8, 0:32, 0:32] : (tensor<8x8x32x64xbf16>) -> tensor<8x8x32x32xbf16> loc(#loc790)
    %76 = stablehlo.slice %47 [0:8, 0:8, 0:32, 32:64] : (tensor<8x8x32x64xbf16>) -> tensor<8x8x32x32xbf16> loc(#loc790)
    %77 = stablehlo.negate %76 : tensor<8x8x32x32xbf16> loc(#loc791)
    %78 = stablehlo.concatenate %77, %75, dim = 3 : (tensor<8x8x32x32xbf16>, tensor<8x8x32x32xbf16>) -> tensor<8x8x32x64xbf16> loc(#loc792)
    %79 = stablehlo.convert %78 : (tensor<8x8x32x64xbf16>) -> tensor<8x8x32x64xf32> loc(#loc788)
    %80 = stablehlo.broadcast_in_dim %60, dims = [0, 1, 2, 3] : (tensor<8x1x32x64xf32>) -> tensor<8x8x32x64xf32> loc(#loc789)
    %81 = stablehlo.multiply %79, %80 : tensor<8x8x32x64xf32> loc(#loc789)
    %82 = stablehlo.add %74, %81 : tensor<8x8x32x64xf32> loc(#loc793)
    %83 = stablehlo.broadcast_in_dim %82, dims = [0, 1, 3, 4] : (tensor<8x8x32x64xf32>) -> tensor<8x8x4x32x64xf32> loc(#loc794)
    %84 = stablehlo.reshape %83 : (tensor<8x8x4x32x64xf32>) -> tensor<8x32x32x64xf32> loc(#loc795)
    %85 = stablehlo.broadcast_in_dim %49, dims = [0, 1, 3, 4] : (tensor<8x8x32x64xbf16>) -> tensor<8x8x4x32x64xbf16> loc(#loc796)
    %86 = stablehlo.reshape %85 : (tensor<8x8x4x32x64xbf16>) -> tensor<8x32x32x64xbf16> loc(#loc797)
    %87 = stablehlo.dot_general %71, %84, batching_dims = [0, 1] x [0, 1], contracting_dims = [3] x [3], precision = [DEFAULT, DEFAULT] : (tensor<8x32x32x64xf32>, tensor<8x32x32x64xf32>) -> tensor<8x32x32x32xf32> loc(#loc798)
    %cst_7 = stablehlo.constant dense<6.400000e+01> : tensor<f32> loc(#loc549)
    %88 = stablehlo.sqrt %cst_7 : tensor<f32> loc(#loc799)
    %89 = stablehlo.convert %88 : tensor<f32> loc(#loc800)
    %90 = stablehlo.broadcast_in_dim %89, dims = [] : (tensor<f32>) -> tensor<8x32x32x32xf32> loc(#loc801)
    %91 = stablehlo.divide %87, %90 : tensor<8x32x32x32xf32> loc(#loc801)
    %cst_8 = stablehlo.constant dense<1.000000e+00> : tensor<f32> loc(#loc549)
    %92 = stablehlo.broadcast_in_dim %cst_8, dims = [] : (tensor<f32>) -> tensor<32x32xf32> loc(#loc802)
    %93 = call @tril_6(%92) : (tensor<32x32xf32>) -> tensor<32x32xf32> loc(#loc803)
    %94 = stablehlo.broadcast_in_dim %93, dims = [2, 3] : (tensor<32x32xf32>) -> tensor<1x1x32x32xf32> loc(#loc804)
    %cst_9 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc549)
    %95 = stablehlo.broadcast_in_dim %cst_9, dims = [] : (tensor<f32>) -> tensor<1x1x32x32xf32> loc(#loc805)
    %96 = stablehlo.compare  EQ, %94, %95,  FLOAT : (tensor<1x1x32x32xf32>, tensor<1x1x32x32xf32>) -> tensor<1x1x32x32xi1> loc(#loc805)
    %cst_10 = stablehlo.constant dense<0xFF800000> : tensor<f32> loc(#loc549)
    %97:2 = call @_where_7(%96, %cst_10, %91) : (tensor<1x1x32x32xi1>, tensor<f32>, tensor<8x32x32x32xf32>) -> (tensor<8x32x32x32xf32>, tensor<8x32x32x32xi1>) loc(#loc806)
    %cst_11 = stablehlo.constant dense<0xFF800000> : tensor<f32> loc(#loc807)
    %98 = stablehlo.reduce(%97#0 init: %cst_11) applies stablehlo.maximum across dimensions = [3] : (tensor<8x32x32x32xf32>, tensor<f32>) -> tensor<8x32x32xf32> loc(#loc807)
    %cst_12 = stablehlo.constant dense<0xFF800000> : tensor<f32> loc(#loc549)
    %99 = stablehlo.broadcast_in_dim %cst_12, dims = [] : (tensor<f32>) -> tensor<8x32x32xf32> loc(#loc808)
    %100 = stablehlo.maximum %99, %98 : tensor<8x32x32xf32> loc(#loc808)
    %101 = stablehlo.broadcast_in_dim %100, dims = [0, 1, 2] : (tensor<8x32x32xf32>) -> tensor<8x32x32x1xf32> loc(#loc809)
    %102 = stablehlo.broadcast_in_dim %101, dims = [0, 1, 2, 3] : (tensor<8x32x32x1xf32>) -> tensor<8x32x32x32xf32> loc(#loc810)
    %103 = stablehlo.subtract %97#0, %102 : tensor<8x32x32x32xf32> loc(#loc810)
    %104 = stablehlo.exponential %103 : tensor<8x32x32x32xf32> loc(#loc811)
    %cst_13 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc812)
    %105 = stablehlo.reduce(%104 init: %cst_13) applies stablehlo.add across dimensions = [3] : (tensor<8x32x32x32xf32>, tensor<f32>) -> tensor<8x32x32xf32> loc(#loc812)
    %106 = stablehlo.broadcast_in_dim %105, dims = [0, 1, 2] : (tensor<8x32x32xf32>) -> tensor<8x32x32x1xf32> loc(#loc809)
    %107 = stablehlo.broadcast_in_dim %106, dims = [0, 1, 2, 3] : (tensor<8x32x32x1xf32>) -> tensor<8x32x32x32xf32> loc(#loc813)
    %108 = stablehlo.divide %104, %107 : tensor<8x32x32x32xf32> loc(#loc813)
    %109 = call @integer_pow_8(%106) : (tensor<8x32x32x1xf32>) -> tensor<8x32x32x1xf32> loc(#loc814)
    %110 = stablehlo.convert %108 : tensor<8x32x32x32xf32> loc(#loc815)
    %111 = stablehlo.convert %86 : (tensor<8x32x32x64xbf16>) -> tensor<8x32x32x64xf32> loc(#loc815)
    %112 = stablehlo.dot_general %110, %111, batching_dims = [0, 1] x [0, 1], contracting_dims = [3] x [2], precision = [DEFAULT, DEFAULT] : (tensor<8x32x32x32xf32>, tensor<8x32x32x64xf32>) -> tensor<8x32x32x64xf32> loc(#loc815)
    %113 = stablehlo.transpose %112, dims = [0, 2, 1, 3] : (tensor<8x32x32x64xf32>) -> tensor<8x32x32x64xf32> loc(#loc816)
    %114 = stablehlo.reshape %113 : (tensor<8x32x32x64xf32>) -> tensor<8x32x2048xf32> loc(#loc817)
    %115 = stablehlo.convert %114 : (tensor<8x32x2048xf32>) -> tensor<8x32x2048xbf16> loc(#loc818)
    %116 = stablehlo.transpose %0#11, dims = [1, 0] : (tensor<2048x2048xbf16>) -> tensor<2048x2048xbf16> loc(#loc819)
    %117 = stablehlo.dot_general %115, %116, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x2048xbf16>) -> tensor<8x32x2048xbf16> loc(#loc820)
    %118 = stablehlo.dot_general %115, %0#12, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x16xbf16>) -> tensor<8x32x16xbf16> loc(#loc821)
    %119 = stablehlo.dot_general %118, %0#13, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<16x2048xbf16>) -> tensor<8x32x2048xbf16> loc(#loc821)
    %cst_14 = stablehlo.constant dense<6.250000e-02> : tensor<bf16> loc(#loc549)
    %120 = stablehlo.broadcast_in_dim %cst_14, dims = [] : (tensor<bf16>) -> tensor<8x32x2048xbf16> loc(#loc822)
    %121 = stablehlo.multiply %119, %120 : tensor<8x32x2048xbf16> loc(#loc822)
    %122 = stablehlo.add %117, %121 : tensor<8x32x2048xbf16> loc(#loc823)
    %123 = stablehlo.add %0#24, %122 : tensor<8x32x2048xbf16> loc(#loc824)
    %124 = stablehlo.multiply %123, %123 : tensor<8x32x2048xbf16> loc(#loc825)
    %125 = call @integer_pow_9(%123) : (tensor<8x32x2048xbf16>) -> tensor<8x32x2048xbf16> loc(#loc825)
    %cst_15 = stablehlo.constant dense<2.000000e+00> : tensor<bf16> loc(#loc549)
    %126 = stablehlo.broadcast_in_dim %cst_15, dims = [] : (tensor<bf16>) -> tensor<8x32x2048xbf16> loc(#loc826)
    %127 = stablehlo.multiply %126, %125 : tensor<8x32x2048xbf16> loc(#loc826)
    %128 = stablehlo.convert %124 : (tensor<8x32x2048xbf16>) -> tensor<8x32x2048xf32> loc(#loc827)
    %cst_16 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc828)
    %129 = stablehlo.reduce(%128 init: %cst_16) applies stablehlo.add across dimensions = [2] : (tensor<8x32x2048xf32>, tensor<f32>) -> tensor<8x32xf32> loc(#loc828)
    %130 = stablehlo.broadcast_in_dim %129, dims = [0, 1] : (tensor<8x32xf32>) -> tensor<8x32x1xf32> loc(#loc829)
    %cst_17 = stablehlo.constant dense<2.048000e+03> : tensor<f32> loc(#loc549)
    %131 = stablehlo.broadcast_in_dim %cst_17, dims = [] : (tensor<f32>) -> tensor<8x32x1xf32> loc(#loc830)
    %132 = stablehlo.divide %130, %131 : tensor<8x32x1xf32> loc(#loc830)
    %133 = stablehlo.convert %132 : (tensor<8x32x1xf32>) -> tensor<8x32x1xbf16> loc(#loc827)
    %cst_18 = stablehlo.constant dense<1.001360e-05> : tensor<bf16> loc(#loc549)
    %134 = stablehlo.broadcast_in_dim %cst_18, dims = [] : (tensor<bf16>) -> tensor<8x32x1xbf16> loc(#loc831)
    %135 = stablehlo.add %133, %134 : tensor<8x32x1xbf16> loc(#loc831)
    %136 = stablehlo.rsqrt %135 : tensor<8x32x1xbf16> loc(#loc832)
    %137 = stablehlo.divide %136, %135 : tensor<8x32x1xbf16> loc(#loc833)
    %cst_19 = stablehlo.constant dense<-5.000000e-01> : tensor<bf16> loc(#loc549)
    %138 = stablehlo.broadcast_in_dim %cst_19, dims = [] : (tensor<bf16>) -> tensor<8x32x1xbf16> loc(#loc834)
    %139 = stablehlo.multiply %138, %137 : tensor<8x32x1xbf16> loc(#loc834)
    %140 = stablehlo.broadcast_in_dim %136, dims = [0, 1, 2] : (tensor<8x32x1xbf16>) -> tensor<8x32x2048xbf16> loc(#loc834)
    %141 = stablehlo.multiply %123, %140 : tensor<8x32x2048xbf16> loc(#loc834)
    %142 = stablehlo.convert %0#14 : (tensor<2048xf32>) -> tensor<2048xbf16> loc(#loc835)
    %143 = stablehlo.broadcast_in_dim %142, dims = [2] : (tensor<2048xbf16>) -> tensor<1x1x2048xbf16> loc(#loc836)
    %144 = stablehlo.broadcast_in_dim %143, dims = [0, 1, 2] : (tensor<1x1x2048xbf16>) -> tensor<8x32x2048xbf16> loc(#loc837)
    %145 = stablehlo.multiply %144, %141 : tensor<8x32x2048xbf16> loc(#loc837)
    %146 = stablehlo.transpose %0#15, dims = [1, 0] : (tensor<8192x2048xbf16>) -> tensor<2048x8192xbf16> loc(#loc838)
    %147 = stablehlo.dot_general %145, %146, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x8192xbf16>) -> tensor<8x32x8192xbf16> loc(#loc839)
    %148 = stablehlo.dot_general %145, %0#16, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x16xbf16>) -> tensor<8x32x16xbf16> loc(#loc840)
    %149 = stablehlo.dot_general %148, %0#17, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<16x8192xbf16>) -> tensor<8x32x8192xbf16> loc(#loc840)
    %cst_20 = stablehlo.constant dense<6.250000e-02> : tensor<bf16> loc(#loc549)
    %150 = stablehlo.broadcast_in_dim %cst_20, dims = [] : (tensor<bf16>) -> tensor<8x32x8192xbf16> loc(#loc841)
    %151 = stablehlo.multiply %149, %150 : tensor<8x32x8192xbf16> loc(#loc841)
    %152 = stablehlo.add %147, %151 : tensor<8x32x8192xbf16> loc(#loc842)
    %153:3 = call @silu_10(%152) : (tensor<8x32x8192xbf16>) -> (tensor<8x32x8192xbf16>, tensor<8x32x8192xbf16>, tensor<8x32x8192xbf16>) loc(#loc843)
    %154 = stablehlo.transpose %0#18, dims = [1, 0] : (tensor<8192x2048xbf16>) -> tensor<2048x8192xbf16> loc(#loc838)
    %155 = stablehlo.dot_general %145, %154, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x8192xbf16>) -> tensor<8x32x8192xbf16> loc(#loc839)
    %156 = stablehlo.dot_general %145, %0#19, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x16xbf16>) -> tensor<8x32x16xbf16> loc(#loc840)
    %157 = stablehlo.dot_general %156, %0#20, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<16x8192xbf16>) -> tensor<8x32x8192xbf16> loc(#loc840)
    %cst_21 = stablehlo.constant dense<6.250000e-02> : tensor<bf16> loc(#loc549)
    %158 = stablehlo.broadcast_in_dim %cst_21, dims = [] : (tensor<bf16>) -> tensor<8x32x8192xbf16> loc(#loc841)
    %159 = stablehlo.multiply %157, %158 : tensor<8x32x8192xbf16> loc(#loc841)
    %160 = stablehlo.add %155, %159 : tensor<8x32x8192xbf16> loc(#loc842)
    %161 = stablehlo.multiply %153#0, %160 : tensor<8x32x8192xbf16> loc(#loc844)
    %162 = stablehlo.transpose %0#21, dims = [1, 0] : (tensor<2048x8192xbf16>) -> tensor<8192x2048xbf16> loc(#loc845)
    %163 = stablehlo.dot_general %161, %0#22, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<8x32x8192xbf16>, tensor<8192x16xbf16>) -> tensor<8x32x16xbf16> loc(#loc846)
    %cst_22 = stablehlo.constant dense<6.250000e-02> : tensor<bf16> loc(#loc549)
    %164 = stablehlo.broadcast_in_dim %cst_22, dims = [] : (tensor<bf16>) -> tensor<8x32x2048xbf16> loc(#loc847)
    %165 = stablehlo.multiply %0#26, %164 : tensor<8x32x2048xbf16> loc(#loc847)
    %166 = stablehlo.dot_general %165, %163, contracting_dims = [0, 1] x [0, 1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<8x32x16xbf16>) -> tensor<2048x16xbf16> loc(#loc848)
    %167 = stablehlo.transpose %166, dims = [1, 0] : (tensor<2048x16xbf16>) -> tensor<16x2048xbf16> loc(#loc849)
    %168 = stablehlo.dot_general %165, %0#23, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<16x2048xbf16>) -> tensor<8x32x16xbf16> loc(#loc848)
    %169 = stablehlo.dot_general %168, %161, contracting_dims = [0, 1] x [0, 1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<8x32x8192xbf16>) -> tensor<16x8192xbf16> loc(#loc848)
    %170 = stablehlo.transpose %169, dims = [1, 0] : (tensor<16x8192xbf16>) -> tensor<8192x16xbf16> loc(#loc849)
    %171 = stablehlo.dot_general %168, %0#22, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<8192x16xbf16>) -> tensor<8x32x8192xbf16> loc(#loc848)
    %172 = stablehlo.dot_general %0#26, %162, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<8192x2048xbf16>) -> tensor<8x32x8192xbf16> loc(#loc850)
    %173 = stablehlo.add %171, %172 : tensor<8x32x8192xbf16> loc(#loc851)
    %174 = stablehlo.multiply %153#0, %173 : tensor<8x32x8192xbf16> loc(#loc852)
    %cst_23 = stablehlo.constant dense<6.250000e-02> : tensor<bf16> loc(#loc549)
    %175 = stablehlo.broadcast_in_dim %cst_23, dims = [] : (tensor<bf16>) -> tensor<8x32x8192xbf16> loc(#loc853)
    %176 = stablehlo.multiply %174, %175 : tensor<8x32x8192xbf16> loc(#loc853)
    %177 = stablehlo.dot_general %176, %156, contracting_dims = [0, 1] x [0, 1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x8192xbf16>, tensor<8x32x16xbf16>) -> tensor<8192x16xbf16> loc(#loc854)
    %178 = stablehlo.transpose %177, dims = [1, 0] : (tensor<8192x16xbf16>) -> tensor<16x8192xbf16> loc(#loc855)
    %179 = stablehlo.dot_general %176, %0#20, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x8192xbf16>, tensor<16x8192xbf16>) -> tensor<8x32x16xbf16> loc(#loc854)
    %180 = stablehlo.dot_general %179, %145, contracting_dims = [0, 1] x [0, 1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<8x32x2048xbf16>) -> tensor<16x2048xbf16> loc(#loc854)
    %181 = stablehlo.transpose %180, dims = [1, 0] : (tensor<16x2048xbf16>) -> tensor<2048x16xbf16> loc(#loc855)
    %182 = stablehlo.dot_general %179, %0#19, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<2048x16xbf16>) -> tensor<8x32x2048xbf16> loc(#loc854)
    %183 = stablehlo.dot_general %174, %154, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x8192xbf16>, tensor<2048x8192xbf16>) -> tensor<8x32x2048xbf16> loc(#loc856)
    %184 = stablehlo.add %182, %183 : tensor<8x32x2048xbf16> loc(#loc857)
    %185 = stablehlo.multiply %173, %160 : tensor<8x32x8192xbf16> loc(#loc852)
    %186 = call @silu_11(%153#1, %152, %153#2, %185) : (tensor<8x32x8192xbf16>, tensor<8x32x8192xbf16>, tensor<8x32x8192xbf16>, tensor<8x32x8192xbf16>) -> tensor<8x32x8192xbf16> loc(#loc843)
    %cst_24 = stablehlo.constant dense<6.250000e-02> : tensor<bf16> loc(#loc549)
    %187 = stablehlo.broadcast_in_dim %cst_24, dims = [] : (tensor<bf16>) -> tensor<8x32x8192xbf16> loc(#loc853)
    %188 = stablehlo.multiply %186, %187 : tensor<8x32x8192xbf16> loc(#loc853)
    %189 = stablehlo.dot_general %188, %148, contracting_dims = [0, 1] x [0, 1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x8192xbf16>, tensor<8x32x16xbf16>) -> tensor<8192x16xbf16> loc(#loc854)
    %190 = stablehlo.transpose %189, dims = [1, 0] : (tensor<8192x16xbf16>) -> tensor<16x8192xbf16> loc(#loc855)
    %191 = stablehlo.dot_general %188, %0#17, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x8192xbf16>, tensor<16x8192xbf16>) -> tensor<8x32x16xbf16> loc(#loc854)
    %192 = stablehlo.dot_general %191, %145, contracting_dims = [0, 1] x [0, 1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<8x32x2048xbf16>) -> tensor<16x2048xbf16> loc(#loc854)
    %193 = stablehlo.transpose %192, dims = [1, 0] : (tensor<16x2048xbf16>) -> tensor<2048x16xbf16> loc(#loc855)
    %194 = stablehlo.dot_general %191, %0#16, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<2048x16xbf16>) -> tensor<8x32x2048xbf16> loc(#loc854)
    %195 = stablehlo.add %184, %194 : tensor<8x32x2048xbf16> loc(#loc858)
    %196 = stablehlo.dot_general %186, %146, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x8192xbf16>, tensor<2048x8192xbf16>) -> tensor<8x32x2048xbf16> loc(#loc856)
    %197 = stablehlo.add %195, %196 : tensor<8x32x2048xbf16> loc(#loc857)
    %198 = stablehlo.broadcast_in_dim %143, dims = [0, 1, 2] : (tensor<1x1x2048xbf16>) -> tensor<8x32x2048xbf16> loc(#loc859)
    %199 = stablehlo.multiply %198, %197 : tensor<8x32x2048xbf16> loc(#loc859)
    %200 = stablehlo.multiply %123, %199 : tensor<8x32x2048xbf16> loc(#loc860)
    %cst_25 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc861)
    %201 = stablehlo.reduce(%200 init: %cst_25) applies stablehlo.add across dimensions = [2] : (tensor<8x32x2048xbf16>, tensor<bf16>) -> tensor<8x32xbf16> loc(#loc861)
    %202 = stablehlo.reshape %201 : (tensor<8x32xbf16>) -> tensor<8x32x1xbf16> loc(#loc862)
    %203 = stablehlo.multiply %202, %139 : tensor<8x32x1xbf16> loc(#loc860)
    %204 = stablehlo.convert %203 : (tensor<8x32x1xbf16>) -> tensor<8x32x1xf32> loc(#loc863)
    %cst_26 = stablehlo.constant dense<2.048000e+03> : tensor<f32> loc(#loc549)
    %205 = stablehlo.broadcast_in_dim %cst_26, dims = [] : (tensor<f32>) -> tensor<8x32x1xf32> loc(#loc864)
    %206 = stablehlo.divide %204, %205 : tensor<8x32x1xf32> loc(#loc864)
    %cst_27 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc865)
    %207 = stablehlo.reduce(%206 init: %cst_27) applies stablehlo.add across dimensions = [2] : (tensor<8x32x1xf32>, tensor<f32>) -> tensor<8x32xf32> loc(#loc865)
    %208 = stablehlo.broadcast_in_dim %207, dims = [0, 1] : (tensor<8x32xf32>) -> tensor<8x32x2048xf32> loc(#loc866)
    %209 = stablehlo.convert %208 : (tensor<8x32x2048xf32>) -> tensor<8x32x2048xbf16> loc(#loc863)
    %210 = stablehlo.multiply %209, %127 : tensor<8x32x2048xbf16> loc(#loc867)
    %211 = stablehlo.add %0#26, %210 : tensor<8x32x2048xbf16> loc(#loc868)
    %212 = stablehlo.broadcast_in_dim %136, dims = [0, 1, 2] : (tensor<8x32x1xbf16>) -> tensor<8x32x2048xbf16> loc(#loc860)
    %213 = stablehlo.multiply %199, %212 : tensor<8x32x2048xbf16> loc(#loc860)
    %214 = stablehlo.add %211, %213 : tensor<8x32x2048xbf16> loc(#loc869)
    %cst_28 = stablehlo.constant dense<6.250000e-02> : tensor<bf16> loc(#loc549)
    %215 = stablehlo.broadcast_in_dim %cst_28, dims = [] : (tensor<bf16>) -> tensor<8x32x2048xbf16> loc(#loc870)
    %216 = stablehlo.multiply %214, %215 : tensor<8x32x2048xbf16> loc(#loc870)
    %217 = stablehlo.dot_general %216, %118, contracting_dims = [0, 1] x [0, 1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<8x32x16xbf16>) -> tensor<2048x16xbf16> loc(#loc871)
    %218 = stablehlo.transpose %217, dims = [1, 0] : (tensor<2048x16xbf16>) -> tensor<16x2048xbf16> loc(#loc872)
    %219 = stablehlo.dot_general %216, %0#13, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<16x2048xbf16>) -> tensor<8x32x16xbf16> loc(#loc871)
    %220 = stablehlo.dot_general %219, %115, contracting_dims = [0, 1] x [0, 1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<8x32x2048xbf16>) -> tensor<16x2048xbf16> loc(#loc871)
    %221 = stablehlo.transpose %220, dims = [1, 0] : (tensor<16x2048xbf16>) -> tensor<2048x16xbf16> loc(#loc872)
    %222 = stablehlo.dot_general %219, %0#12, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<2048x16xbf16>) -> tensor<8x32x2048xbf16> loc(#loc871)
    %223 = stablehlo.dot_general %214, %116, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x2048xbf16>) -> tensor<8x32x2048xbf16> loc(#loc873)
    %224 = stablehlo.add %222, %223 : tensor<8x32x2048xbf16> loc(#loc874)
    %225 = stablehlo.convert %224 : (tensor<8x32x2048xbf16>) -> tensor<8x32x2048xf32> loc(#loc875)
    %226 = stablehlo.reshape %225 : (tensor<8x32x2048xf32>) -> tensor<8x32x32x64xf32> loc(#loc876)
    %227 = stablehlo.transpose %226, dims = [0, 2, 1, 3] : (tensor<8x32x32x64xf32>) -> tensor<8x32x32x64xf32> loc(#loc877)
    %228 = stablehlo.dot_general %227, %108, batching_dims = [0, 1] x [0, 1], contracting_dims = [2] x [2], precision = [DEFAULT, DEFAULT] : (tensor<8x32x32x64xf32>, tensor<8x32x32x32xf32>) -> tensor<8x32x64x32xf32> loc(#loc878)
    %229 = stablehlo.transpose %228, dims = [0, 1, 3, 2] : (tensor<8x32x64x32xf32>) -> tensor<8x32x32x64xf32> loc(#loc879)
    %230 = stablehlo.convert %229 : (tensor<8x32x32x64xf32>) -> tensor<8x32x32x64xbf16> loc(#loc880)
    %231 = stablehlo.reshape %230 : (tensor<8x32x32x64xbf16>) -> tensor<8x8x4x32x64xbf16> loc(#loc881)
    %cst_29 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc882)
    %232 = stablehlo.reduce(%231 init: %cst_29) applies stablehlo.add across dimensions = [2] : (tensor<8x8x4x32x64xbf16>, tensor<bf16>) -> tensor<8x8x32x64xbf16> loc(#loc882)
    %233 = stablehlo.transpose %232, dims = [0, 2, 1, 3] : (tensor<8x8x32x64xbf16>) -> tensor<8x32x8x64xbf16> loc(#loc883)
    %234 = stablehlo.reshape %233 : (tensor<8x32x8x64xbf16>) -> tensor<8x32x512xbf16> loc(#loc884)
    %cst_30 = stablehlo.constant dense<6.250000e-02> : tensor<bf16> loc(#loc549)
    %235 = stablehlo.broadcast_in_dim %cst_30, dims = [] : (tensor<bf16>) -> tensor<8x32x512xbf16> loc(#loc885)
    %236 = stablehlo.multiply %234, %235 : tensor<8x32x512xbf16> loc(#loc885)
    %237 = stablehlo.dot_general %236, %39, contracting_dims = [0, 1] x [0, 1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x512xbf16>, tensor<8x32x16xbf16>) -> tensor<512x16xbf16> loc(#loc886)
    %238 = stablehlo.transpose %237, dims = [1, 0] : (tensor<512x16xbf16>) -> tensor<16x512xbf16> loc(#loc887)
    %239 = stablehlo.dot_general %236, %0#9, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x512xbf16>, tensor<16x512xbf16>) -> tensor<8x32x16xbf16> loc(#loc886)
    %240 = stablehlo.dot_general %239, %22, contracting_dims = [0, 1] x [0, 1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<8x32x2048xbf16>) -> tensor<16x2048xbf16> loc(#loc886)
    %241 = stablehlo.transpose %240, dims = [1, 0] : (tensor<16x2048xbf16>) -> tensor<2048x16xbf16> loc(#loc887)
    %242 = stablehlo.dot_general %239, %0#8, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<2048x16xbf16>) -> tensor<8x32x2048xbf16> loc(#loc886)
    %243 = stablehlo.dot_general %234, %37, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x512xbf16>, tensor<2048x512xbf16>) -> tensor<8x32x2048xbf16> loc(#loc888)
    %244 = stablehlo.add %242, %243 : tensor<8x32x2048xbf16> loc(#loc889)
    %245 = stablehlo.convert %227 : tensor<8x32x32x64xf32> loc(#loc878)
    %246 = stablehlo.convert %86 : (tensor<8x32x32x64xbf16>) -> tensor<8x32x32x64xf32> loc(#loc878)
    %247 = stablehlo.dot_general %245, %246, batching_dims = [0, 1] x [0, 1], contracting_dims = [3] x [3], precision = [DEFAULT, DEFAULT] : (tensor<8x32x32x64xf32>, tensor<8x32x32x64xf32>) -> tensor<8x32x32x32xf32> loc(#loc878)
    %248 = stablehlo.broadcast_in_dim %109, dims = [0, 1, 2, 3] : (tensor<8x32x32x1xf32>) -> tensor<8x32x32x32xf32> loc(#loc890)
    %249 = stablehlo.multiply %247, %248 : tensor<8x32x32x32xf32> loc(#loc890)
    %250 = stablehlo.multiply %249, %104 : tensor<8x32x32x32xf32> loc(#loc890)
    %cst_31 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc891)
    %251 = stablehlo.reduce(%250 init: %cst_31) applies stablehlo.add across dimensions = [3] : (tensor<8x32x32x32xf32>, tensor<f32>) -> tensor<8x32x32xf32> loc(#loc891)
    %252 = stablehlo.reshape %251 : (tensor<8x32x32xf32>) -> tensor<8x32x32x1xf32> loc(#loc892)
    %253 = stablehlo.negate %252 : tensor<8x32x32x1xf32> loc(#loc893)
    %cst_32 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc891)
    %254 = stablehlo.reduce(%253 init: %cst_32) applies stablehlo.add across dimensions = [3] : (tensor<8x32x32x1xf32>, tensor<f32>) -> tensor<8x32x32xf32> loc(#loc891)
    %255 = stablehlo.broadcast_in_dim %254, dims = [0, 1, 2] : (tensor<8x32x32xf32>) -> tensor<8x32x32x32xf32> loc(#loc894)
    %256 = stablehlo.broadcast_in_dim %106, dims = [0, 1, 2, 3] : (tensor<8x32x32x1xf32>) -> tensor<8x32x32x32xf32> loc(#loc895)
    %257 = stablehlo.divide %247, %256 : tensor<8x32x32x32xf32> loc(#loc895)
    %258 = stablehlo.add %255, %257 : tensor<8x32x32x32xf32> loc(#loc896)
    %259 = stablehlo.multiply %258, %104 : tensor<8x32x32x32xf32> loc(#loc890)
    %260 = call @_where_12(%97#1, %259) : (tensor<8x32x32x32xi1>, tensor<8x32x32x32xf32>) -> tensor<8x32x32x32xf32> loc(#loc806)
    %261 = stablehlo.broadcast_in_dim %89, dims = [] : (tensor<f32>) -> tensor<8x32x32x32xf32> loc(#loc897)
    %262 = stablehlo.divide %260, %261 : tensor<8x32x32x32xf32> loc(#loc897)
    %263 = stablehlo.dot_general %262, %71, batching_dims = [0, 1] x [0, 1], contracting_dims = [2] x [2], precision = [DEFAULT, DEFAULT] : (tensor<8x32x32x32xf32>, tensor<8x32x32x64xf32>) -> tensor<8x32x32x64xf32> loc(#loc898)
    %264 = stablehlo.reshape %263 : (tensor<8x32x32x64xf32>) -> tensor<8x8x4x32x64xf32> loc(#loc899)
    %cst_33 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc900)
    %265 = stablehlo.reduce(%264 init: %cst_33) applies stablehlo.add across dimensions = [2] : (tensor<8x8x4x32x64xf32>, tensor<f32>) -> tensor<8x8x32x64xf32> loc(#loc900)
    %266 = stablehlo.broadcast_in_dim %60, dims = [0, 1, 2, 3] : (tensor<8x1x32x64xf32>) -> tensor<8x8x32x64xf32> loc(#loc901)
    %267 = stablehlo.multiply %265, %266 : tensor<8x8x32x64xf32> loc(#loc901)
    %268 = stablehlo.convert %267 : (tensor<8x8x32x64xf32>) -> tensor<8x8x32x64xbf16> loc(#loc902)
    %269 = stablehlo.slice %268 [0:8, 0:8, 0:32, 0:32] : (tensor<8x8x32x64xbf16>) -> tensor<8x8x32x32xbf16> loc(#loc903)
    %270 = stablehlo.slice %268 [0:8, 0:8, 0:32, 32:64] : (tensor<8x8x32x64xbf16>) -> tensor<8x8x32x32xbf16> loc(#loc903)
    %cst_34 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc549)
    %271 = stablehlo.pad %270, %cst_34, low = [0, 0, 0, 0], high = [0, 0, 0, 32], interior = [0, 0, 0, 0] : (tensor<8x8x32x32xbf16>, tensor<bf16>) -> tensor<8x8x32x64xbf16> loc(#loc904)
    %272 = stablehlo.negate %269 : tensor<8x8x32x32xbf16> loc(#loc905)
    %cst_35 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc549)
    %273 = stablehlo.pad %272, %cst_35, low = [0, 0, 0, 32], high = [0, 0, 0, 0], interior = [0, 0, 0, 0] : (tensor<8x8x32x32xbf16>, tensor<bf16>) -> tensor<8x8x32x64xbf16> loc(#loc904)
    %274 = stablehlo.add %271, %273 : tensor<8x8x32x64xbf16> loc(#loc906)
    %275 = stablehlo.broadcast_in_dim %59, dims = [0, 1, 2, 3] : (tensor<8x1x32x64xf32>) -> tensor<8x8x32x64xf32> loc(#loc901)
    %276 = stablehlo.multiply %265, %275 : tensor<8x8x32x64xf32> loc(#loc901)
    %277 = stablehlo.convert %276 : (tensor<8x8x32x64xf32>) -> tensor<8x8x32x64xbf16> loc(#loc902)
    %278 = stablehlo.add %274, %277 : tensor<8x8x32x64xbf16> loc(#loc907)
    %279 = stablehlo.transpose %278, dims = [0, 2, 1, 3] : (tensor<8x8x32x64xbf16>) -> tensor<8x32x8x64xbf16> loc(#loc908)
    %280 = stablehlo.reshape %279 : (tensor<8x32x8x64xbf16>) -> tensor<8x32x512xbf16> loc(#loc909)
    %cst_36 = stablehlo.constant dense<6.250000e-02> : tensor<bf16> loc(#loc549)
    %281 = stablehlo.broadcast_in_dim %cst_36, dims = [] : (tensor<bf16>) -> tensor<8x32x512xbf16> loc(#loc910)
    %282 = stablehlo.multiply %280, %281 : tensor<8x32x512xbf16> loc(#loc910)
    %283 = stablehlo.dot_general %282, %32, contracting_dims = [0, 1] x [0, 1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x512xbf16>, tensor<8x32x16xbf16>) -> tensor<512x16xbf16> loc(#loc911)
    %284 = stablehlo.transpose %283, dims = [1, 0] : (tensor<512x16xbf16>) -> tensor<16x512xbf16> loc(#loc912)
    %285 = stablehlo.dot_general %282, %0#6, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x512xbf16>, tensor<16x512xbf16>) -> tensor<8x32x16xbf16> loc(#loc911)
    %286 = stablehlo.dot_general %285, %22, contracting_dims = [0, 1] x [0, 1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<8x32x2048xbf16>) -> tensor<16x2048xbf16> loc(#loc911)
    %287 = stablehlo.transpose %286, dims = [1, 0] : (tensor<16x2048xbf16>) -> tensor<2048x16xbf16> loc(#loc912)
    %288 = stablehlo.dot_general %285, %0#5, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<2048x16xbf16>) -> tensor<8x32x2048xbf16> loc(#loc911)
    %289 = stablehlo.add %244, %288 : tensor<8x32x2048xbf16> loc(#loc913)
    %290 = stablehlo.dot_general %280, %30, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x512xbf16>, tensor<2048x512xbf16>) -> tensor<8x32x2048xbf16> loc(#loc914)
    %291 = stablehlo.add %289, %290 : tensor<8x32x2048xbf16> loc(#loc915)
    %292 = stablehlo.dot_general %262, %84, batching_dims = [0, 1] x [0, 1], contracting_dims = [3] x [2], precision = [DEFAULT, DEFAULT] : (tensor<8x32x32x32xf32>, tensor<8x32x32x64xf32>) -> tensor<8x32x32x64xf32> loc(#loc898)
    %293 = stablehlo.broadcast_in_dim %60, dims = [0, 1, 2, 3] : (tensor<8x1x32x64xf32>) -> tensor<8x32x32x64xf32> loc(#loc916)
    %294 = stablehlo.multiply %292, %293 : tensor<8x32x32x64xf32> loc(#loc916)
    %295 = stablehlo.convert %294 : (tensor<8x32x32x64xf32>) -> tensor<8x32x32x64xbf16> loc(#loc917)
    %296 = stablehlo.slice %295 [0:8, 0:32, 0:32, 0:32] : (tensor<8x32x32x64xbf16>) -> tensor<8x32x32x32xbf16> loc(#loc918)
    %297 = stablehlo.slice %295 [0:8, 0:32, 0:32, 32:64] : (tensor<8x32x32x64xbf16>) -> tensor<8x32x32x32xbf16> loc(#loc918)
    %cst_37 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc549)
    %298 = stablehlo.pad %297, %cst_37, low = [0, 0, 0, 0], high = [0, 0, 0, 32], interior = [0, 0, 0, 0] : (tensor<8x32x32x32xbf16>, tensor<bf16>) -> tensor<8x32x32x64xbf16> loc(#loc919)
    %299 = stablehlo.negate %296 : tensor<8x32x32x32xbf16> loc(#loc920)
    %cst_38 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc549)
    %300 = stablehlo.pad %299, %cst_38, low = [0, 0, 0, 32], high = [0, 0, 0, 0], interior = [0, 0, 0, 0] : (tensor<8x32x32x32xbf16>, tensor<bf16>) -> tensor<8x32x32x64xbf16> loc(#loc919)
    %301 = stablehlo.add %298, %300 : tensor<8x32x32x64xbf16> loc(#loc921)
    %302 = stablehlo.broadcast_in_dim %59, dims = [0, 1, 2, 3] : (tensor<8x1x32x64xf32>) -> tensor<8x32x32x64xf32> loc(#loc916)
    %303 = stablehlo.multiply %292, %302 : tensor<8x32x32x64xf32> loc(#loc916)
    %304 = stablehlo.convert %303 : (tensor<8x32x32x64xf32>) -> tensor<8x32x32x64xbf16> loc(#loc917)
    %305 = stablehlo.add %301, %304 : tensor<8x32x32x64xbf16> loc(#loc922)
    %306 = stablehlo.transpose %305, dims = [0, 2, 1, 3] : (tensor<8x32x32x64xbf16>) -> tensor<8x32x32x64xbf16> loc(#loc923)
    %307 = stablehlo.reshape %306 : (tensor<8x32x32x64xbf16>) -> tensor<8x32x2048xbf16> loc(#loc924)
    %cst_39 = stablehlo.constant dense<6.250000e-02> : tensor<bf16> loc(#loc549)
    %308 = stablehlo.broadcast_in_dim %cst_39, dims = [] : (tensor<bf16>) -> tensor<8x32x2048xbf16> loc(#loc925)
    %309 = stablehlo.multiply %307, %308 : tensor<8x32x2048xbf16> loc(#loc925)
    %310 = stablehlo.dot_general %309, %25, contracting_dims = [0, 1] x [0, 1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<8x32x16xbf16>) -> tensor<2048x16xbf16> loc(#loc926)
    %311 = stablehlo.transpose %310, dims = [1, 0] : (tensor<2048x16xbf16>) -> tensor<16x2048xbf16> loc(#loc927)
    %312 = stablehlo.dot_general %309, %0#3, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<16x2048xbf16>) -> tensor<8x32x16xbf16> loc(#loc926)
    %313 = stablehlo.dot_general %312, %22, contracting_dims = [0, 1] x [0, 1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<8x32x2048xbf16>) -> tensor<16x2048xbf16> loc(#loc926)
    %314 = stablehlo.transpose %313, dims = [1, 0] : (tensor<16x2048xbf16>) -> tensor<2048x16xbf16> loc(#loc927)
    %315 = stablehlo.dot_general %312, %0#2, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x16xbf16>, tensor<2048x16xbf16>) -> tensor<8x32x2048xbf16> loc(#loc926)
    %316 = stablehlo.add %291, %315 : tensor<8x32x2048xbf16> loc(#loc928)
    %317 = stablehlo.dot_general %307, %23, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<8x32x2048xbf16>, tensor<2048x2048xbf16>) -> tensor<8x32x2048xbf16> loc(#loc929)
    %318 = stablehlo.add %316, %317 : tensor<8x32x2048xbf16> loc(#loc930)
    %319 = stablehlo.broadcast_in_dim %20, dims = [0, 1, 2] : (tensor<1x1x2048xbf16>) -> tensor<8x32x2048xbf16> loc(#loc931)
    %320 = stablehlo.multiply %319, %318 : tensor<8x32x2048xbf16> loc(#loc931)
    %321 = stablehlo.multiply %0#24, %320 : tensor<8x32x2048xbf16> loc(#loc932)
    %cst_40 = stablehlo.constant dense<0.000000e+00> : tensor<bf16> loc(#loc933)
    %322 = stablehlo.reduce(%321 init: %cst_40) applies stablehlo.add across dimensions = [2] : (tensor<8x32x2048xbf16>, tensor<bf16>) -> tensor<8x32xbf16> loc(#loc933)
    %323 = stablehlo.reshape %322 : (tensor<8x32xbf16>) -> tensor<8x32x1xbf16> loc(#loc934)
    %324 = stablehlo.multiply %323, %16 : tensor<8x32x1xbf16> loc(#loc932)
    %325 = stablehlo.convert %324 : (tensor<8x32x1xbf16>) -> tensor<8x32x1xf32> loc(#loc935)
    %cst_41 = stablehlo.constant dense<2.048000e+03> : tensor<f32> loc(#loc549)
    %326 = stablehlo.broadcast_in_dim %cst_41, dims = [] : (tensor<f32>) -> tensor<8x32x1xf32> loc(#loc936)
    %327 = stablehlo.divide %325, %326 : tensor<8x32x1xf32> loc(#loc936)
    %cst_42 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc937)
    %328 = stablehlo.reduce(%327 init: %cst_42) applies stablehlo.add across dimensions = [2] : (tensor<8x32x1xf32>, tensor<f32>) -> tensor<8x32xf32> loc(#loc937)
    %329 = stablehlo.broadcast_in_dim %328, dims = [0, 1] : (tensor<8x32xf32>) -> tensor<8x32x2048xf32> loc(#loc938)
    %330 = stablehlo.convert %329 : (tensor<8x32x2048xf32>) -> tensor<8x32x2048xbf16> loc(#loc935)
    %331 = stablehlo.multiply %330, %4 : tensor<8x32x2048xbf16> loc(#loc939)
    %332 = stablehlo.add %214, %331 : tensor<8x32x2048xbf16> loc(#loc940)
    %333 = stablehlo.broadcast_in_dim %13, dims = [0, 1, 2] : (tensor<8x32x1xbf16>) -> tensor<8x32x2048xbf16> loc(#loc932)
    %334 = stablehlo.multiply %320, %333 : tensor<8x32x2048xbf16> loc(#loc932)
    %335 = stablehlo.add %332, %334 : tensor<8x32x2048xbf16> loc(#loc941)
    return %335, %314, %311, %287, %284, %241, %238, %221, %218, %193, %190, %181, %178, %170, %167 : tensor<8x32x2048xbf16>, tensor<2048x16xbf16>, tensor<16x2048xbf16>, tensor<2048x16xbf16>, tensor<16x512xbf16>, tensor<2048x16xbf16>, tensor<16x512xbf16>, tensor<2048x16xbf16>, tensor<16x2048xbf16>, tensor<2048x16xbf16>, tensor<16x8192xbf16>, tensor<2048x16xbf16>, tensor<16x8192xbf16>, tensor<8192x16xbf16>, tensor<16x2048xbf16> loc(#loc458)
  } loc(#loc458)
  func.func private @integer_pow_5(%arg0: tensor<8x32x2048xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/integer_pow"(#loc567))) -> tensor<8x32x2048xbf16> {
    return %arg0 : tensor<8x32x2048xbf16> loc(#loc739)
  } loc(#loc739)
  func.func private @tril_6(%arg0: tensor<32x32xf32> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/pjit"(#loc562))) -> tensor<32x32xf32> {
    %0 = stablehlo.iota dim = 0 : tensor<32x32xi32> loc(#loc942)
    %c = stablehlo.constant dense<0> : tensor<i32> loc(#loc803)
    %1 = stablehlo.broadcast_in_dim %c, dims = [] : (tensor<i32>) -> tensor<32x32xi32> loc(#loc943)
    %2 = stablehlo.add %0, %1 : tensor<32x32xi32> loc(#loc943)
    %3 = stablehlo.iota dim = 1 : tensor<32x32xi32> loc(#loc942)
    %4 = stablehlo.compare  GE, %2, %3,  SIGNED : (tensor<32x32xi32>, tensor<32x32xi32>) -> tensor<32x32xi1> loc(#loc944)
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc803)
    %5 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<32x32xf32> loc(#loc945)
    %6 = stablehlo.select %4, %arg0, %5 : tensor<32x32xi1>, tensor<32x32xf32> loc(#loc946)
    return %6 : tensor<32x32xf32> loc(#loc803)
  } loc(#loc803)
  func.func private @_where_7(%arg0: tensor<1x1x32x32xi1> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/pjit"(#loc564)), %arg1: tensor<f32> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/pjit"(#loc564)), %arg2: tensor<8x32x32x32xf32> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/pjit"(#loc564))) -> (tensor<8x32x32x32xf32>, tensor<8x32x32x32xi1>) {
    %0 = stablehlo.convert %arg1 : tensor<f32> loc(#loc947)
    %1 = stablehlo.broadcast_in_dim %arg0, dims = [0, 1, 2, 3] : (tensor<1x1x32x32xi1>) -> tensor<8x32x32x32xi1> loc(#loc948)
    %2 = stablehlo.broadcast_in_dim %0, dims = [] : (tensor<f32>) -> tensor<8x32x32x32xf32> loc(#loc948)
    %3 = stablehlo.select %1, %2, %arg2 : tensor<8x32x32x32xi1>, tensor<8x32x32x32xf32> loc(#loc949)
    return %3, %1 : tensor<8x32x32x32xf32>, tensor<8x32x32x32xi1> loc(#loc806)
  } loc(#loc806)
  func.func private @integer_pow_8(%arg0: tensor<8x32x32x1xf32> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/integer_pow"(#loc592))) -> tensor<8x32x32x1xf32> {
    %0 = stablehlo.multiply %arg0, %arg0 : tensor<8x32x32x1xf32> loc(#loc950)
    %cst = stablehlo.constant dense<1.000000e+00> : tensor<f32> loc(#loc814)
    %1 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<8x32x32x1xf32> loc(#loc809)
    %2 = stablehlo.divide %1, %0 : tensor<8x32x32x1xf32> loc(#loc813)
    return %2 : tensor<8x32x32x1xf32> loc(#loc814)
  } loc(#loc814)
  func.func private @integer_pow_9(%arg0: tensor<8x32x2048xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/integer_pow"(#loc606))) -> tensor<8x32x2048xbf16> {
    return %arg0 : tensor<8x32x2048xbf16> loc(#loc825)
  } loc(#loc825)
  func.func private @silu_10(%arg0: tensor<8x32x8192xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/pjit"(#loc611))) -> (tensor<8x32x8192xbf16>, tensor<8x32x8192xbf16>, tensor<8x32x8192xbf16>) {
    %0 = stablehlo.negate %arg0 : tensor<8x32x8192xbf16> loc(#loc951)
    %1 = stablehlo.exponential %0 : tensor<8x32x8192xbf16> loc(#loc952)
    %cst = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc953)
    %2 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<bf16>) -> tensor<8x32x8192xbf16> loc(#loc954)
    %3 = stablehlo.add %2, %1 : tensor<8x32x8192xbf16> loc(#loc954)
    %cst_0 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc953)
    %4 = stablehlo.broadcast_in_dim %cst_0, dims = [] : (tensor<bf16>) -> tensor<8x32x8192xbf16> loc(#loc955)
    %5 = stablehlo.divide %4, %3 : tensor<8x32x8192xbf16> loc(#loc955)
    %cst_1 = stablehlo.constant dense<1.000000e+00> : tensor<bf16> loc(#loc843)
    %6 = stablehlo.broadcast_in_dim %cst_1, dims = [] : (tensor<bf16>) -> tensor<8x32x8192xbf16> loc(#loc956)
    %7 = stablehlo.subtract %6, %5 : tensor<8x32x8192xbf16> loc(#loc956)
    %8 = stablehlo.multiply %5, %7 : tensor<8x32x8192xbf16> loc(#loc957)
    %9 = stablehlo.multiply %arg0, %5 : tensor<8x32x8192xbf16> loc(#loc957)
    return %9, %5, %8 : tensor<8x32x8192xbf16>, tensor<8x32x8192xbf16>, tensor<8x32x8192xbf16> loc(#loc843)
  } loc(#loc843)
  func.func private @silu_11(%arg0: tensor<8x32x8192xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/pjit"(#loc611)), %arg1: tensor<8x32x8192xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/pjit"(#loc611)), %arg2: tensor<8x32x8192xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/pjit"(#loc611)), %arg3: tensor<8x32x8192xbf16> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/pjit"(#loc611))) -> tensor<8x32x8192xbf16> {
    %0 = stablehlo.multiply %arg1, %arg3 : tensor<8x32x8192xbf16> loc(#loc957)
    %1 = stablehlo.multiply %0, %arg2 : tensor<8x32x8192xbf16> loc(#loc957)
    %2 = stablehlo.multiply %arg3, %arg0 : tensor<8x32x8192xbf16> loc(#loc957)
    %3 = stablehlo.add %1, %2 : tensor<8x32x8192xbf16> loc(#loc958)
    return %3 : tensor<8x32x8192xbf16> loc(#loc843)
  } loc(#loc843)
  func.func private @_where_12(%arg0: tensor<8x32x32x32xi1> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/pjit"(#loc564)), %arg1: tensor<8x32x32x32xf32> loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/pjit"(#loc564))) -> tensor<8x32x32x32xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc806)
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<8x32x32x32xf32> loc(#loc948)
    %1 = stablehlo.select %arg0, %0, %arg1 : tensor<8x32x32x32xi1>, tensor<8x32x32x32xf32> loc(#loc949)
    return %1 : tensor<8x32x32x32xf32> loc(#loc806)
  } loc(#loc806)
  func.func private @integer_pow_13(%arg0: tensor<16x2048x16xbf16> loc("jit(training_step)/jit(main)/integer_pow"(#loc525))) -> tensor<16x2048x16xbf16> {
    return %arg0 : tensor<16x2048x16xbf16> loc(#loc552)
  } loc(#loc552)
  func.func private @integer_pow_14(%arg0: tensor<16x16x2048xbf16> loc("jit(training_step)/jit(main)/integer_pow"(#loc525))) -> tensor<16x16x2048xbf16> {
    return %arg0 : tensor<16x16x2048xbf16> loc(#loc552)
  } loc(#loc552)
  func.func private @integer_pow_15(%arg0: tensor<16x2048x16xbf16> loc("jit(training_step)/jit(main)/integer_pow"(#loc525))) -> tensor<16x2048x16xbf16> {
    return %arg0 : tensor<16x2048x16xbf16> loc(#loc552)
  } loc(#loc552)
  func.func private @integer_pow_16(%arg0: tensor<16x16x512xbf16> loc("jit(training_step)/jit(main)/integer_pow"(#loc525))) -> tensor<16x16x512xbf16> {
    return %arg0 : tensor<16x16x512xbf16> loc(#loc552)
  } loc(#loc552)
  func.func private @integer_pow_17(%arg0: tensor<16x2048x16xbf16> loc("jit(training_step)/jit(main)/integer_pow"(#loc525))) -> tensor<16x2048x16xbf16> {
    return %arg0 : tensor<16x2048x16xbf16> loc(#loc552)
  } loc(#loc552)
  func.func private @integer_pow_18(%arg0: tensor<16x16x512xbf16> loc("jit(training_step)/jit(main)/integer_pow"(#loc525))) -> tensor<16x16x512xbf16> {
    return %arg0 : tensor<16x16x512xbf16> loc(#loc552)
  } loc(#loc552)
  func.func private @integer_pow_19(%arg0: tensor<16x2048x16xbf16> loc("jit(training_step)/jit(main)/integer_pow"(#loc525))) -> tensor<16x2048x16xbf16> {
    return %arg0 : tensor<16x2048x16xbf16> loc(#loc552)
  } loc(#loc552)
  func.func private @integer_pow_20(%arg0: tensor<16x16x2048xbf16> loc("jit(training_step)/jit(main)/integer_pow"(#loc525))) -> tensor<16x16x2048xbf16> {
    return %arg0 : tensor<16x16x2048xbf16> loc(#loc552)
  } loc(#loc552)
  func.func private @integer_pow_21(%arg0: tensor<16x2048x16xbf16> loc("jit(training_step)/jit(main)/integer_pow"(#loc525))) -> tensor<16x2048x16xbf16> {
    return %arg0 : tensor<16x2048x16xbf16> loc(#loc552)
  } loc(#loc552)
  func.func private @integer_pow_22(%arg0: tensor<16x16x8192xbf16> loc("jit(training_step)/jit(main)/integer_pow"(#loc525))) -> tensor<16x16x8192xbf16> {
    return %arg0 : tensor<16x16x8192xbf16> loc(#loc552)
  } loc(#loc552)
  func.func private @integer_pow_23(%arg0: tensor<16x2048x16xbf16> loc("jit(training_step)/jit(main)/integer_pow"(#loc525))) -> tensor<16x2048x16xbf16> {
    return %arg0 : tensor<16x2048x16xbf16> loc(#loc552)
  } loc(#loc552)
  func.func private @integer_pow_24(%arg0: tensor<16x16x8192xbf16> loc("jit(training_step)/jit(main)/integer_pow"(#loc525))) -> tensor<16x16x8192xbf16> {
    return %arg0 : tensor<16x16x8192xbf16> loc(#loc552)
  } loc(#loc552)
  func.func private @integer_pow_25(%arg0: tensor<16x8192x16xbf16> loc("jit(training_step)/jit(main)/integer_pow"(#loc525))) -> tensor<16x8192x16xbf16> {
    return %arg0 : tensor<16x8192x16xbf16> loc(#loc552)
  } loc(#loc552)
  func.func private @integer_pow_26(%arg0: tensor<16x16x2048xbf16> loc("jit(training_step)/jit(main)/integer_pow"(#loc525))) -> tensor<16x16x2048xbf16> {
    return %arg0 : tensor<16x16x2048xbf16> loc(#loc552)
  } loc(#loc552)
  func.func private @integer_pow_27(%arg0: tensor<2048x16xbf16> loc("jit(training_step)/jit(main)/integer_pow"(#loc525))) -> tensor<2048x16xbf16> {
    return %arg0 : tensor<2048x16xbf16> loc(#loc552)
  } loc(#loc552)
  func.func private @integer_pow_28(%arg0: tensor<16x128256xbf16> loc("jit(training_step)/jit(main)/integer_pow"(#loc525))) -> tensor<16x128256xbf16> {
    return %arg0 : tensor<16x128256xbf16> loc(#loc552)
  } loc(#loc552)
  func.func private @_where_29(%arg0: tensor<i1> loc("jit(training_step)/jit(main)/pjit"(#loc469)), %arg1: tensor<i32> loc("jit(training_step)/jit(main)/pjit"(#loc469)), %arg2: tensor<i32> loc("jit(training_step)/jit(main)/pjit"(#loc469))) -> tensor<i32> {
    %0 = stablehlo.select %arg0, %arg1, %arg2 : tensor<i1>, tensor<i32> loc(#loc550)
    return %0 : tensor<i32> loc(#loc529)
  } loc(#loc529)
} loc(#loc)
#loc = loc(unknown)
#loc69 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/optax/_src/numerics.py":45:0)
#loc70 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/optax/_src/linear_algebra.py":38:0)
#loc71 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/optax/transforms/_clipping.py":91:0)
#loc75 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/optax/_src/linear_algebra.py":37:0)
#loc76 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/optax/transforms/_clipping.py":96:0)
#loc77 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/optax/transforms/_clipping.py":100:0)
#loc78 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/optax/transforms/_clipping.py":102:0)
#loc82 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/optax/tree_utils/_tree_math.py":333:0)
#loc83 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/optax/tree_utils/_tree_math.py":343:0)
#loc84 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/optax/tree_utils/_tree_math.py":341:0)
#loc85 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/optax/_src/transform.py":285:0)
#loc88 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/optax/_src/transform.py":294:0)
#loc89 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/optax/_src/transform.py":298:0)
#loc90 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/optax/_src/transform.py":300:0)
#loc91 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/optax/_src/transform.py":299:0)
#loc92 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/optax/_src/transform.py":467:0)
#loc93 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/optax/_src/update.py":43:0)
#loc94 = loc("/opt/aws_neuronx_venv_pytorch_2_1/lib/python3.10/site-packages/optax/_src/update.py":41:0)
#loc95 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/trainer.py":218:0)
#loc100 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":596:0)
#loc101 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":220:0)
#loc102 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":379:0)
#loc108 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":224:0)
#loc109 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":400:0)
#loc110 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":398:0)
#loc112 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":405:0)
#loc116 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":260:0)
#loc117 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":261:0)
#loc118 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":183:0)
#loc119 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":648:0)
#loc120 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":190:0)
#loc121 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":191:0)
#loc122 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/trainer.py":176:0)
#loc123 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/trainer.py":177:0)
#loc124 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/trainer.py":479:0)
#loc126 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/trainer.py":482:0)
#loc127 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/trainer.py":484:0)
#loc128 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/trainer.py":486:0)
#loc129 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/trainer.py":487:0)
#loc130 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/trainer.py":488:0)
#loc133 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/trainer.py":492:0)
#loc134 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/trainer.py":494:0)
#loc135 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/trainer.py":495:0)
#loc137 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/trainer.py":498:0)
#loc138 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/trainer.py":499:0)
#loc141 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":365:0)
#loc142 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":369:0)
#loc143 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":371:0)
#loc144 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":355:0)
#loc145 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":386:0)
#loc146 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":228:0)
#loc147 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":231:0)
#loc148 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":234:0)
#loc149 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":382:0)
#loc150 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":360:0)
#loc151 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":361:0)
#loc152 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":235:0)
#loc153 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":383:0)
#loc154 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":366:0)
#loc155 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":372:0)
#loc156 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":374:0)
#loc157 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":356:0)
#loc158 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":391:0)
#loc160 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":367:0)
#loc161 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":375:0)
#loc162 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":377:0)
#loc163 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":394:0)
#loc164 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":421:0)
#loc165 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":422:0)
#loc166 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":180:0)
#loc167 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":426:0)
#loc168 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":540:0)
#loc171 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":483:0)
#loc172 = loc("/home/ubuntu/roadrunner-fork/src/felafax/trainer_engine/models/llama3/jax/model.py":545:0)
#loc176 = loc("abs_sq"(#loc69))
#loc177 = loc("<genexpr>"(#loc70))
#loc178 = loc("global_norm"(#loc70))
#loc179 = loc("update_fn"(#loc71))
#loc183 = loc("global_norm"(#loc75))
#loc184 = loc("update_fn"(#loc76))
#loc185 = loc("clip_fn"(#loc77))
#loc186 = loc("update_fn"(#loc78))
#loc190 = loc("orderth_norm"(#loc82))
#loc191 = loc("<lambda>"(#loc83))
#loc192 = loc("tree_update_moment_per_elem_norm"(#loc84))
#loc193 = loc("update_fn"(#loc85))
#loc196 = loc("update_fn"(#loc88))
#loc197 = loc("update_fn"(#loc89))
#loc198 = loc("<lambda>"(#loc90))
#loc199 = loc("update_fn"(#loc91))
#loc200 = loc("<lambda>"(#loc92))
#loc201 = loc("update_fn"(#loc92))
#loc202 = loc("<lambda>"(#loc93))
#loc203 = loc("apply_updates"(#loc94))
#loc204 = loc("training_step"(#loc95))
#loc209 = loc("__call__"(#loc100))
#loc210 = loc("__call__"(#loc101))
#loc211 = loc("__call__"(#loc102))
#loc217 = loc("__call__"(#loc108))
#loc218 = loc("__call__"(#loc109))
#loc219 = loc("__call__"(#loc110))
#loc221 = loc("__call__"(#loc112))
#loc225 = loc("__call__"(#loc116))
#loc226 = loc("__call__"(#loc117))
#loc227 = loc("__call__"(#loc118))
#loc228 = loc("__call__"(#loc119))
#loc229 = loc("__call__"(#loc120))
#loc230 = loc("__call__"(#loc121))
#loc231 = loc("forward"(#loc122))
#loc232 = loc("forward"(#loc123))
#loc233 = loc("_cross_entropy_loss_and_accuracy"(#loc124))
#loc235 = loc("_cross_entropy_loss_and_accuracy"(#loc126))
#loc236 = loc("_cross_entropy_loss_and_accuracy"(#loc127))
#loc237 = loc("_cross_entropy_loss_and_accuracy"(#loc128))
#loc238 = loc("_cross_entropy_loss_and_accuracy"(#loc129))
#loc239 = loc("_cross_entropy_loss_and_accuracy"(#loc130))
#loc242 = loc("_cross_entropy_loss_and_accuracy"(#loc133))
#loc243 = loc("_cross_entropy_loss_and_accuracy"(#loc134))
#loc244 = loc("_cross_entropy_loss_and_accuracy"(#loc135))
#loc246 = loc("_cross_entropy_loss_and_accuracy"(#loc137))
#loc247 = loc("_cross_entropy_loss_and_accuracy"(#loc138))
#loc250 = loc("__call__"(#loc141))
#loc251 = loc("__call__"(#loc142))
#loc252 = loc("__call__"(#loc143))
#loc253 = loc("jax_apply_rotary_pos_emb"(#loc144))
#loc254 = loc("__call__"(#loc145))
#loc255 = loc("__call__"(#loc146))
#loc256 = loc("__call__"(#loc147))
#loc257 = loc("__call__"(#loc148))
#loc258 = loc("__call__"(#loc149))
#loc259 = loc("jax_rotate_half"(#loc150))
#loc260 = loc("jax_rotate_half"(#loc151))
#loc261 = loc("__call__"(#loc152))
#loc262 = loc("__call__"(#loc153))
#loc263 = loc("__call__"(#loc154))
#loc264 = loc("__call__"(#loc155))
#loc265 = loc("__call__"(#loc156))
#loc266 = loc("jax_apply_rotary_pos_emb"(#loc157))
#loc267 = loc("__call__"(#loc158))
#loc269 = loc("__call__"(#loc160))
#loc270 = loc("__call__"(#loc161))
#loc271 = loc("__call__"(#loc162))
#loc272 = loc("__call__"(#loc163))
#loc273 = loc("__call__"(#loc164))
#loc274 = loc("__call__"(#loc165))
#loc275 = loc("__call__"(#loc166))
#loc276 = loc("__call__"(#loc167))
#loc277 = loc("__call__"(#loc168))
#loc280 = loc("__call__"(#loc171))
#loc281 = loc("__call__"(#loc172))
#loc283 = loc(callsite(#loc208 at #loc173))
#loc285 = loc(callsite(#loc207 at #loc208))
#loc288 = loc(callsite(#loc204 at #loc282))
#loc289 = loc(callsite(#loc207 at #loc283))
#loc291 = loc(callsite(#loc216 at #loc285))
#loc294 = loc(callsite(#loc203 at #loc288))
#loc296 = loc(callsite(#loc216 at #loc289))
#loc298 = loc(callsite(#loc231 at #loc286))
#loc299 = loc(callsite(#loc232 at #loc286))
#loc301 = loc(callsite(#loc215 at #loc291))
#loc302 = loc(callsite(#loc180 at #loc293))
#loc304 = loc(callsite(#loc202 at #loc294))
#loc306 = loc(callsite(#loc215 at #loc296))
#loc308 = loc(callsite(#loc228 at #loc295))
#loc309 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/slice"(#loc298))
#loc310 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/slice"(#loc299))
#loc311 = loc(callsite(#loc233 at #loc300))
#loc312 = loc(callsite(#loc235 at #loc300))
#loc313 = loc(callsite(#loc236 at #loc300))
#loc314 = loc(callsite(#loc237 at #loc300))
#loc315 = loc(callsite(#loc238 at #loc300))
#loc316 = loc(callsite(#loc239 at #loc300))
#loc319 = loc(callsite(#loc242 at #loc300))
#loc320 = loc(callsite(#loc243 at #loc300))
#loc321 = loc(callsite(#loc244 at #loc300))
#loc323 = loc(callsite(#loc246 at #loc300))
#loc324 = loc(callsite(#loc247 at #loc300))
#loc325 = loc(callsite(#loc214 at #loc301))
#loc326 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/pad"(#loc298))
#loc327 = loc(callsite(#loc179 at #loc302))
#loc328 = loc(callsite(#loc184 at #loc302))
#loc329 = loc(callsite(#loc186 at #loc302))
#loc331 = loc("jit(training_step)/jit(main)/add"(#loc304))
#loc333 = loc(callsite(#loc209 at #loc305))
#loc334 = loc(callsite(#loc214 at #loc306))
#loc338 = loc(callsite(#loc227 at #loc308))
#loc339 = loc(callsite(#loc229 at #loc308))
#loc340 = loc(callsite(#loc230 at #loc308))
#loc341 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/broadcast_in_dim"(#loc311))
#loc342 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/reduce_sum"(#loc312))
#loc343 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/max"(#loc312))
#loc344 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/convert_element_type"(#loc313))
#loc345 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/reshape"(#loc314))
#loc346 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/reshape"(#loc315))
#loc347 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/reshape"(#loc316))
#loc349 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/iota"(#loc318))
#loc350 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/lt"(#loc318))
#loc351 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/add"(#loc318))
#loc352 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/select_n"(#loc318))
#loc353 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/broadcast_in_dim"(#loc318))
#loc354 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/concatenate"(#loc318))
#loc355 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/gather"(#loc318))
#loc356 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/mul"(#loc319))
#loc357 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/reshape"(#loc320))
#loc358 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/reduce_sum"(#loc321))
#loc359 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/div"(#loc321))
#loc360 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/neg"(#loc321))
#loc362 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/eq"(#loc323))
#loc363 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/convert_element_type"(#loc323))
#loc364 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/mul"(#loc323))
#loc365 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/reduce_sum"(#loc324))
#loc366 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/div"(#loc324))
#loc367 = loc(callsite(#loc213 at #loc325))
#loc368 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(log_softmax)/reduce_max"(#loc317))
#loc369 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(log_softmax)/max"(#loc317))
#loc370 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(log_softmax)/broadcast_in_dim"(#loc317))
#loc371 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(log_softmax)/sub"(#loc317))
#loc372 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(log_softmax)/exp"(#loc317))
#loc373 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(log_softmax)/reduce_sum"(#loc317))
#loc374 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(log_softmax)/log"(#loc317))
#loc375 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/iota"(#loc322))
#loc377 = loc("/gt"(#loc322))
#loc378 = loc("/ne"(#loc322))
#loc379 = loc("/or"(#loc322))
#loc380 = loc("/eq"(#loc322))
#loc381 = loc("/lt"(#loc322))
#loc382 = loc("/and"(#loc322))
#loc383 = loc("/select_n"(#loc322))
#loc384 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/neg"(#loc321))
#loc385 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/div"(#loc321))
#loc386 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/broadcast_in_dim"(#loc321))
#loc387 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/reshape"(#loc320))
#loc388 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/mul"(#loc319))
#loc389 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/broadcast_in_dim"(#loc318))
#loc391 = loc("/add"(#loc318))
#loc393 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/reshape"(#loc314))
#loc394 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/convert_element_type"(#loc313))
#loc395 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/jit(log_softmax)/neg"(#loc317))
#loc396 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/jit(log_softmax)/reduce_sum"(#loc317))
#loc397 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/jit(log_softmax)/reshape"(#loc317))
#loc398 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/jit(log_softmax)/div"(#loc317))
#loc399 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/jit(log_softmax)/broadcast_in_dim"(#loc317))
#loc400 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/jit(log_softmax)/mul"(#loc317))
#loc401 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/jit(log_softmax)/add_any"(#loc317))
#loc402 = loc(callsite(#loc178 at #loc327))
#loc403 = loc(callsite(#loc183 at #loc327))
#loc404 = loc("jit(training_step)/jit(main)/lt"(#loc328))
#loc405 = loc(callsite(#loc185 at #loc329))
#loc407 = loc(callsite(#loc193 at #loc330))
#loc409 = loc(callsite(#loc196 at #loc330))
#loc410 = loc(callsite(#loc197 at #loc330))
#loc411 = loc(callsite(#loc199 at #loc330))
#loc412 = loc(callsite(#loc201 at #loc330))
#loc414 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/convert_element_type"(#loc333))
#loc415 = loc(callsite(#loc213 at #loc334))
#loc417 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/empty"(#loc336))
#loc418 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/broadcast_in_dim"(#loc336))
#loc419 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/scan"(#loc336))
#loc420 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while"(#loc336))
#loc421 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/cond/lt"(#loc336))
#loc422 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/lt"(#loc336))
#loc423 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/convert_element_type"(#loc336))
#loc424 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/add"(#loc336))
#loc425 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/select_n"(#loc336))
#loc426 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/dynamic_slice"(#loc336))
#loc427 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/squeeze"(#loc336))
#loc429 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/broadcast_in_dim"(#loc336))
#loc430 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/dynamic_update_slice"(#loc336))
#loc432 = loc(callsite(#loc225 at #loc337))
#loc433 = loc(callsite(#loc226 at #loc337))
#loc434 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/transpose"(#loc338))
#loc435 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/dot_general"(#loc338))
#loc436 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/dot_general"(#loc339))
#loc437 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/mul"(#loc339))
#loc438 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/add"(#loc340))
#loc439 = loc(callsite(#loc212 at #loc367))
#loc440 = loc(callsite(#loc215 at #loc336))
#loc441 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/mul"(#loc339))
#loc442 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/dot_general"(#loc339))
#loc443 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/transpose"(#loc339))
#loc444 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/dot_general"(#loc338))
#loc445 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/add_any"(#loc338))
#loc446 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/empty"(#loc336))
#loc447 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/broadcast_in_dim"(#loc336))
#loc448 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/scan"(#loc336))
#loc449 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while"(#loc336))
#loc450 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/cond/lt"(#loc336))
#loc451 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/sub"(#loc336))
#loc452 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/lt"(#loc336))
#loc453 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/convert_element_type"(#loc336))
#loc454 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/add"(#loc336))
#loc455 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/select_n"(#loc336))
#loc456 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/dynamic_slice"(#loc336))
#loc457 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/squeeze"(#loc336))
#loc459 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/broadcast_in_dim"(#loc336))
#loc460 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/dynamic_update_slice"(#loc336))
#loc461 = loc(callsite(#loc177 at #loc402))
#loc462 = loc("jit(training_step)/jit(main)/add"(#loc402))
#loc463 = loc("jit(training_step)/jit(main)/sqrt"(#loc403))
#loc464 = loc("jit(training_step)/jit(main)/div"(#loc405))
#loc465 = loc("jit(training_step)/jit(main)/mul"(#loc405))
#loc466 = loc("jit(training_step)/jit(main)/select_n"(#loc405))
#loc468 = loc(callsite(#loc192 at #loc407))
#loc470 = loc("jit(training_step)/jit(main)/convert_element_type"(#loc409))
#loc471 = loc("jit(training_step)/jit(main)/pow"(#loc409))
#loc472 = loc("jit(training_step)/jit(main)/sub"(#loc409))
#loc473 = loc("jit(training_step)/jit(main)/div"(#loc409))
#loc474 = loc("jit(training_step)/jit(main)/convert_element_type"(#loc410))
#loc475 = loc("jit(training_step)/jit(main)/pow"(#loc410))
#loc476 = loc("jit(training_step)/jit(main)/sub"(#loc410))
#loc477 = loc("jit(training_step)/jit(main)/div"(#loc410))
#loc478 = loc(callsite(#loc198 at #loc411))
#loc479 = loc(callsite(#loc200 at #loc412))
#loc481 = loc(callsite(#loc212 at #loc415))
#loc484 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/mul"(#loc431))
#loc485 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/convert_element_type"(#loc431))
#loc486 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/reduce_sum"(#loc431))
#loc487 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/broadcast_in_dim"(#loc431))
#loc488 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/div"(#loc431))
#loc489 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/add"(#loc432))
#loc490 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/rsqrt"(#loc432))
#loc491 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/div"(#loc432))
#loc492 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/mul"(#loc432))
#loc493 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/convert_element_type"(#loc433))
#loc494 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/broadcast_in_dim"(#loc433))
#loc495 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/mul"(#loc433))
#loc496 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(_take)/lt"(#loc413))
#loc497 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(_take)/add"(#loc413))
#loc499 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(_take)/broadcast_in_dim"(#loc413))
#loc500 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(_take)/gather"(#loc413))
#loc501 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(_take)/concatenate"(#loc413))
#loc502 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(_take)/select_n"(#loc413))
#loc503 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(_take)/sub"(#loc413))
#loc504 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(_take)/ge"(#loc413))
#loc505 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(_take)/le"(#loc413))
#loc506 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(_take)/and"(#loc413))
#loc507 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(_take)/reduce_and"(#loc413))
#loc508 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(_take)/jit(_where)/select_n"(#loc413))
#loc509 = loc(callsite(#loc254 at #loc439))
#loc510 = loc(callsite(#loc214 at #loc440))
#loc511 = loc(callsite(#loc279 at #loc415))
#loc512 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/mul"(#loc433))
#loc513 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/mul"(#loc432))
#loc514 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/reduce_sum"(#loc432))
#loc515 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/reshape"(#loc432))
#loc516 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/convert_element_type"(#loc431))
#loc517 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/div"(#loc431))
#loc518 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/reduce_sum"(#loc431))
#loc519 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/broadcast_in_dim"(#loc431))
#loc520 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/mul"(#loc431))
#loc521 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/add_any"(#loc432))
#loc522 = loc(callsite(#loc176 at #loc461))
#loc523 = loc("jit(training_step)/jit(main)/convert_element_type"(#loc461))
#loc524 = loc("jit(training_step)/jit(main)/reduce_sum"(#loc461))
#loc526 = loc(callsite(#loc191 at #loc468))
#loc527 = loc("jit(training_step)/jit(main)/lt"(#loc469))
#loc528 = loc("jit(training_step)/jit(main)/add"(#loc469))
#loc530 = loc("jit(training_step)/jit(main)/add"(#loc478))
#loc531 = loc("jit(training_step)/jit(main)/sqrt"(#loc478))
#loc532 = loc("jit(training_step)/jit(main)/div"(#loc478))
#loc533 = loc("jit(training_step)/jit(main)/mul"(#loc479))
#loc534 = loc(callsite(#loc211 at #loc481))
#loc538 = loc(callsite(#loc250 at #loc481))
#loc539 = loc(callsite(#loc254 at #loc481))
#loc540 = loc(callsite(#loc253 at #loc509))
#loc541 = loc(callsite(#loc263 at #loc481))
#loc542 = loc(callsite(#loc266 at #loc509))
#loc543 = loc(callsite(#loc269 at #loc481))
#loc544 = loc(callsite(#loc276 at #loc481))
#loc545 = loc(callsite(#loc213 at #loc510))
#loc546 = loc(callsite(#loc278 at #loc511))
#loc548 = loc(callsite(#loc280 at #loc511))
#loc549 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/remat2"(#loc510))
#loc550 = loc("jit(training_step)/jit(main)/jit(_where)/select_n"(#loc469))
#loc551 = loc("jit(training_step)/jit(main)/mul"(#loc522))
#loc553 = loc("jit(training_step)/jit(main)/mul"(#loc525))
#loc554 = loc("jit(training_step)/jit(main)/add"(#loc525))
#loc555 = loc(callsite(#loc190 at #loc526))
#loc556 = loc("jit(training_step)/jit(main)/mul"(#loc526))
#loc557 = loc("jit(training_step)/jit(main)/add"(#loc526))
#loc558 = loc(callsite(#loc210 at #loc534))
#loc559 = loc(callsite(#loc217 at #loc534))
#loc560 = loc(callsite(#loc218 at #loc535))
#loc561 = loc(callsite(#loc219 at #loc535))
#loc563 = loc(callsite(#loc221 at #loc535))
#loc565 = loc(callsite(#loc226 at #loc536))
#loc566 = loc(callsite(#loc226 at #loc537))
#loc568 = loc(callsite(#loc225 at #loc537))
#loc569 = loc(callsite(#loc227 at #loc538))
#loc570 = loc(callsite(#loc229 at #loc538))
#loc571 = loc(callsite(#loc230 at #loc538))
#loc572 = loc(callsite(#loc251 at #loc535))
#loc573 = loc(callsite(#loc252 at #loc535))
#loc574 = loc(callsite(#loc253 at #loc539))
#loc575 = loc(callsite(#loc255 at #loc534))
#loc576 = loc(callsite(#loc256 at #loc534))
#loc577 = loc(callsite(#loc257 at #loc534))
#loc578 = loc(callsite(#loc258 at #loc535))
#loc579 = loc(callsite(#loc259 at #loc540))
#loc580 = loc(callsite(#loc260 at #loc540))
#loc581 = loc(callsite(#loc261 at #loc534))
#loc582 = loc(callsite(#loc262 at #loc535))
#loc583 = loc(callsite(#loc227 at #loc541))
#loc584 = loc(callsite(#loc229 at #loc541))
#loc585 = loc(callsite(#loc230 at #loc541))
#loc586 = loc(callsite(#loc264 at #loc535))
#loc587 = loc(callsite(#loc265 at #loc535))
#loc588 = loc(callsite(#loc266 at #loc539))
#loc589 = loc(callsite(#loc259 at #loc542))
#loc590 = loc(callsite(#loc260 at #loc542))
#loc591 = loc(callsite(#loc267 at #loc535))
#loc593 = loc(callsite(#loc227 at #loc543))
#loc594 = loc(callsite(#loc229 at #loc543))
#loc595 = loc(callsite(#loc230 at #loc543))
#loc596 = loc(callsite(#loc270 at #loc535))
#loc597 = loc(callsite(#loc271 at #loc535))
#loc598 = loc(callsite(#loc272 at #loc535))
#loc599 = loc(callsite(#loc273 at #loc535))
#loc600 = loc(callsite(#loc274 at #loc535))
#loc601 = loc(callsite(#loc275 at #loc544))
#loc602 = loc(callsite(#loc227 at #loc544))
#loc603 = loc(callsite(#loc229 at #loc544))
#loc604 = loc(callsite(#loc230 at #loc544))
#loc605 = loc(callsite(#loc277 at #loc545))
#loc607 = loc(callsite(#loc225 at #loc536))
#loc608 = loc(callsite(#loc227 at #loc546))
#loc609 = loc(callsite(#loc229 at #loc546))
#loc610 = loc(callsite(#loc230 at #loc546))
#loc612 = loc(callsite(#loc227 at #loc548))
#loc613 = loc(callsite(#loc229 at #loc548))
#loc614 = loc(callsite(#loc230 at #loc548))
#loc615 = loc(callsite(#loc281 at #loc545))
#loc616 = loc("jit(training_step)/jit(main)/integer_pow"(#loc555))
#loc617 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/convert_element_type"(#loc558))
#loc618 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/reshape"(#loc559))
#loc619 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/sqrt"(#loc560))
#loc620 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/convert_element_type"(#loc561))
#loc621 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/broadcast_in_dim"(#loc562))
#loc623 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/broadcast_in_dim"(#loc563))
#loc624 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/eq"(#loc564))
#loc626 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(tril)/iota"(#loc562))
#loc627 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(tril)/add"(#loc562))
#loc628 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(tril)/ge"(#loc562))
#loc629 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(tril)/broadcast_in_dim"(#loc562))
#loc630 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(tril)/select_n"(#loc562))
#loc631 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(_where)/convert_element_type"(#loc564))
#loc632 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/jit(_where)/broadcast_in_dim"(#loc564))
#loc633 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/convert_element_type"(#loc565))
#loc634 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/broadcast_in_dim"(#loc565))
#loc635 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/convert_element_type"(#loc566))
#loc636 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/broadcast_in_dim"(#loc566))
#loc637 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/integer_pow"(#loc567))
#loc638 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/convert_element_type"(#loc567))
#loc639 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/reduce_sum"(#loc567))
#loc640 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/broadcast_in_dim"(#loc567))
#loc641 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/div"(#loc567))
#loc642 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/add"(#loc568))
#loc643 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/rsqrt"(#loc568))
#loc644 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/mul"(#loc568))
#loc645 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/mul"(#loc566))
#loc646 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/transpose"(#loc569))
#loc647 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/dot_general"(#loc569))
#loc648 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/dot_general"(#loc570))
#loc649 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/mul"(#loc570))
#loc650 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/add"(#loc571))
#loc651 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/reshape"(#loc572))
#loc652 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/transpose"(#loc573))
#loc653 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/convert_element_type"(#loc574))
#loc654 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/broadcast_in_dim"(#loc575))
#loc655 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/mul"(#loc575))
#loc656 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/concatenate"(#loc576))
#loc657 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/cos"(#loc577))
#loc658 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/broadcast_in_dim"(#loc578))
#loc659 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/mul"(#loc574))
#loc660 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/slice"(#loc579))
#loc661 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/neg"(#loc580))
#loc662 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/concatenate"(#loc580))
#loc663 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/sin"(#loc581))
#loc664 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/broadcast_in_dim"(#loc582))
#loc665 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/add"(#loc574))
#loc666 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/transpose"(#loc583))
#loc667 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/dot_general"(#loc583))
#loc668 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/dot_general"(#loc584))
#loc669 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/mul"(#loc584))
#loc670 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/add"(#loc585))
#loc671 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/reshape"(#loc586))
#loc672 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/transpose"(#loc587))
#loc673 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/convert_element_type"(#loc588))
#loc674 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/mul"(#loc588))
#loc675 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/slice"(#loc589))
#loc676 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/neg"(#loc590))
#loc677 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/concatenate"(#loc590))
#loc678 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/add"(#loc588))
#loc679 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/broadcast_in_dim"(#loc591))
#loc680 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/reshape"(#loc591))
#loc681 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/bhqd,bhkd->bhqk/dot_general"(#loc561))
#loc682 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/div"(#loc561))
#loc684 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/reduce_max"(#loc592))
#loc685 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/max"(#loc592))
#loc686 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/broadcast_in_dim"(#loc592))
#loc687 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/sub"(#loc592))
#loc688 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/exp"(#loc592))
#loc689 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/reduce_sum"(#loc592))
#loc690 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/div"(#loc592))
#loc691 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/transpose"(#loc593))
#loc692 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/dot_general"(#loc593))
#loc693 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/dot_general"(#loc594))
#loc694 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/mul"(#loc594))
#loc695 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/add"(#loc595))
#loc696 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/reshape"(#loc596))
#loc697 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/transpose"(#loc597))
#loc698 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/broadcast_in_dim"(#loc598))
#loc699 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/reshape"(#loc598))
#loc700 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/bhqk,bhkd->bhqd/dot_general"(#loc599))
#loc701 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/transpose"(#loc600))
#loc702 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/reshape"(#loc600))
#loc703 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/convert_element_type"(#loc601))
#loc704 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/transpose"(#loc602))
#loc705 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/dot_general"(#loc602))
#loc706 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/dot_general"(#loc603))
#loc707 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/mul"(#loc603))
#loc708 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/add"(#loc604))
#loc709 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/add"(#loc605))
#loc710 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/integer_pow"(#loc606))
#loc711 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/convert_element_type"(#loc606))
#loc712 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/reduce_sum"(#loc606))
#loc713 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/broadcast_in_dim"(#loc606))
#loc714 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/div"(#loc606))
#loc715 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/add"(#loc607))
#loc716 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/rsqrt"(#loc607))
#loc717 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/mul"(#loc607))
#loc718 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/mul"(#loc565))
#loc719 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/transpose"(#loc608))
#loc720 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/dot_general"(#loc608))
#loc721 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/dot_general"(#loc609))
#loc722 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/mul"(#loc609))
#loc723 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/add"(#loc610))
#loc725 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/mul"(#loc611))
#loc726 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/transpose"(#loc612))
#loc727 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/dot_general"(#loc612))
#loc728 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/dot_general"(#loc613))
#loc729 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/mul"(#loc613))
#loc730 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/add"(#loc614))
#loc731 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/add"(#loc615))
#loc732 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/jit(_where)/select_n"(#loc564))
#loc733 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/jit(silu)/neg"(#loc611))
#loc734 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/jit(silu)/exp"(#loc611))
#loc735 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/jit(silu)/logistic"(#loc611))
#loc736 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/jit(silu)/add"(#loc611))
#loc737 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/jit(silu)/div"(#loc611))
#loc738 = loc("jit(training_step)/jit(main)/jvp(jit(forward))/while/body/jit(silu)/mul"(#loc611))
#loc740 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/mul"(#loc567))
#loc741 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/convert_element_type"(#loc567))
#loc742 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/reduce_sum"(#loc567))
#loc743 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/broadcast_in_dim"(#loc567))
#loc744 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/div"(#loc567))
#loc745 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/add"(#loc568))
#loc746 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/rsqrt"(#loc568))
#loc747 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/div"(#loc568))
#loc748 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/mul"(#loc568))
#loc749 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/convert_element_type"(#loc566))
#loc750 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/broadcast_in_dim"(#loc566))
#loc751 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/mul"(#loc566))
#loc752 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/transpose"(#loc569))
#loc753 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/dot_general"(#loc569))
#loc754 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/dot_general"(#loc570))
#loc755 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/mul"(#loc570))
#loc756 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/add"(#loc571))
#loc757 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/transpose"(#loc583))
#loc758 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/dot_general"(#loc583))
#loc759 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/dot_general"(#loc584))
#loc760 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/mul"(#loc584))
#loc761 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/add"(#loc585))
#loc762 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/transpose"(#loc593))
#loc763 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/dot_general"(#loc593))
#loc764 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/dot_general"(#loc594))
#loc765 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/mul"(#loc594))
#loc766 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/add"(#loc595))
#loc767 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/reshape"(#loc572))
#loc768 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/transpose"(#loc573))
#loc769 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/reshape"(#loc586))
#loc770 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/transpose"(#loc587))
#loc771 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/reshape"(#loc596))
#loc772 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/transpose"(#loc597))
#loc773 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/convert_element_type"(#loc558))
#loc774 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/reshape"(#loc559))
#loc775 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/broadcast_in_dim"(#loc575))
#loc776 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/mul"(#loc575))
#loc777 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/concatenate"(#loc576))
#loc778 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/cos"(#loc577))
#loc779 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/sin"(#loc581))
#loc780 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/broadcast_in_dim"(#loc578))
#loc781 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/broadcast_in_dim"(#loc582))
#loc782 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/convert_element_type"(#loc574))
#loc783 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/mul"(#loc574))
#loc784 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/slice"(#loc579))
#loc785 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/neg"(#loc580))
#loc786 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/concatenate"(#loc580))
#loc787 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/add"(#loc574))
#loc788 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/convert_element_type"(#loc588))
#loc789 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/mul"(#loc588))
#loc790 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/slice"(#loc589))
#loc791 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/neg"(#loc590))
#loc792 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/concatenate"(#loc590))
#loc793 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/add"(#loc588))
#loc794 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/broadcast_in_dim"(#loc591))
#loc795 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/reshape"(#loc591))
#loc796 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/broadcast_in_dim"(#loc598))
#loc797 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/reshape"(#loc598))
#loc798 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/bhqd,bhkd->bhqk/dot_general"(#loc561))
#loc799 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/sqrt"(#loc560))
#loc800 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/convert_element_type"(#loc561))
#loc801 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/div"(#loc561))
#loc802 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/broadcast_in_dim"(#loc562))
#loc804 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/broadcast_in_dim"(#loc563))
#loc805 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/eq"(#loc564))
#loc807 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/reduce_max"(#loc592))
#loc808 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/max"(#loc592))
#loc809 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/broadcast_in_dim"(#loc592))
#loc810 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/sub"(#loc592))
#loc811 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/exp"(#loc592))
#loc812 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/reduce_sum"(#loc592))
#loc813 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/div"(#loc592))
#loc815 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/bhqk,bhkd->bhqd/dot_general"(#loc599))
#loc816 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/transpose"(#loc600))
#loc817 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/reshape"(#loc600))
#loc818 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/convert_element_type"(#loc601))
#loc819 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/transpose"(#loc602))
#loc820 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/dot_general"(#loc602))
#loc821 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/dot_general"(#loc603))
#loc822 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/mul"(#loc603))
#loc823 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/add"(#loc604))
#loc824 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/add"(#loc605))
#loc826 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/mul"(#loc606))
#loc827 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/convert_element_type"(#loc606))
#loc828 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/reduce_sum"(#loc606))
#loc829 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/broadcast_in_dim"(#loc606))
#loc830 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/div"(#loc606))
#loc831 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/add"(#loc607))
#loc832 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/rsqrt"(#loc607))
#loc833 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/div"(#loc607))
#loc834 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/mul"(#loc607))
#loc835 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/convert_element_type"(#loc565))
#loc836 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/broadcast_in_dim"(#loc565))
#loc837 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/mul"(#loc565))
#loc838 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/transpose"(#loc608))
#loc839 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/dot_general"(#loc608))
#loc840 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/dot_general"(#loc609))
#loc841 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/mul"(#loc609))
#loc842 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/add"(#loc610))
#loc844 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/mul"(#loc611))
#loc845 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/transpose"(#loc612))
#loc846 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/dot_general"(#loc613))
#loc847 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/mul"(#loc613))
#loc848 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/dot_general"(#loc613))
#loc849 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/transpose"(#loc613))
#loc850 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/dot_general"(#loc612))
#loc851 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/add_any"(#loc612))
#loc852 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/mul"(#loc611))
#loc853 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/mul"(#loc609))
#loc854 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/dot_general"(#loc609))
#loc855 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/transpose"(#loc609))
#loc856 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/dot_general"(#loc608))
#loc857 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/add_any"(#loc608))
#loc858 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/add_any"(#loc609))
#loc859 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/mul"(#loc565))
#loc860 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/mul"(#loc607))
#loc861 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/reduce_sum"(#loc607))
#loc862 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/reshape"(#loc607))
#loc863 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/convert_element_type"(#loc606))
#loc864 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/div"(#loc606))
#loc865 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/reduce_sum"(#loc606))
#loc866 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/broadcast_in_dim"(#loc606))
#loc867 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/mul"(#loc606))
#loc868 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/add_any"(#loc606))
#loc869 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/add_any"(#loc607))
#loc870 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/mul"(#loc603))
#loc871 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/dot_general"(#loc603))
#loc872 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/transpose"(#loc603))
#loc873 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/dot_general"(#loc602))
#loc874 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/add_any"(#loc602))
#loc875 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/convert_element_type"(#loc601))
#loc876 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/reshape"(#loc600))
#loc877 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/transpose"(#loc600))
#loc878 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/bhqk,bhkd->bhqd/dot_general"(#loc599))
#loc879 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/bhqk,bhkd->bhqd/transpose"(#loc599))
#loc880 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/bhqk,bhkd->bhqd/convert_element_type"(#loc599))
#loc881 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/reshape"(#loc598))
#loc882 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/reduce_sum"(#loc598))
#loc883 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/transpose"(#loc597))
#loc884 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/reshape"(#loc596))
#loc885 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/mul"(#loc594))
#loc886 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/dot_general"(#loc594))
#loc887 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/transpose"(#loc594))
#loc888 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/dot_general"(#loc593))
#loc889 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/add_any"(#loc593))
#loc890 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/mul"(#loc592))
#loc891 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/reduce_sum"(#loc592))
#loc892 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/reshape"(#loc592))
#loc893 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/neg"(#loc592))
#loc894 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/broadcast_in_dim"(#loc592))
#loc895 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/div"(#loc592))
#loc896 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/add_any"(#loc592))
#loc897 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/div"(#loc561))
#loc898 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/bhqd,bhkd->bhqk/dot_general"(#loc561))
#loc899 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/reshape"(#loc591))
#loc900 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/reduce_sum"(#loc591))
#loc901 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/mul"(#loc588))
#loc902 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/convert_element_type"(#loc588))
#loc903 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/slice"(#loc590))
#loc904 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/pad"(#loc589))
#loc905 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/neg"(#loc590))
#loc906 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/add_any"(#loc589))
#loc907 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/add_any"(#loc588))
#loc908 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/transpose"(#loc587))
#loc909 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/reshape"(#loc586))
#loc910 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/mul"(#loc584))
#loc911 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/dot_general"(#loc584))
#loc912 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/transpose"(#loc584))
#loc913 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/add_any"(#loc584))
#loc914 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/dot_general"(#loc583))
#loc915 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/add_any"(#loc583))
#loc916 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/mul"(#loc574))
#loc917 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/convert_element_type"(#loc574))
#loc918 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/slice"(#loc580))
#loc919 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/pad"(#loc579))
#loc920 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/neg"(#loc580))
#loc921 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/add_any"(#loc579))
#loc922 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/add_any"(#loc574))
#loc923 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/transpose"(#loc573))
#loc924 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/reshape"(#loc572))
#loc925 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/mul"(#loc570))
#loc926 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/dot_general"(#loc570))
#loc927 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/transpose"(#loc570))
#loc928 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/add_any"(#loc570))
#loc929 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/dot_general"(#loc569))
#loc930 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/add_any"(#loc569))
#loc931 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/mul"(#loc566))
#loc932 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/mul"(#loc568))
#loc933 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/reduce_sum"(#loc568))
#loc934 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/reshape"(#loc568))
#loc935 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/convert_element_type"(#loc567))
#loc936 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/div"(#loc567))
#loc937 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/reduce_sum"(#loc567))
#loc938 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/broadcast_in_dim"(#loc567))
#loc939 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/mul"(#loc567))
#loc940 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/add_any"(#loc567))
#loc941 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/add_any"(#loc568))
#loc942 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/jit(tril)/iota"(#loc562))
#loc943 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/jit(tril)/add"(#loc562))
#loc944 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/jit(tril)/ge"(#loc562))
#loc945 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/jit(tril)/broadcast_in_dim"(#loc562))
#loc946 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/jit(tril)/select_n"(#loc562))
#loc947 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/jit(_where)/convert_element_type"(#loc564))
#loc948 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/jit(_where)/broadcast_in_dim"(#loc564))
#loc949 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/jit(_where)/select_n"(#loc564))
#loc950 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/mul"(#loc592))
#loc951 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/jit(silu)/neg"(#loc611))
#loc952 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/jit(silu)/exp"(#loc611))
#loc953 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/jit(silu)/logistic"(#loc611))
#loc954 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/jit(silu)/add"(#loc611))
#loc955 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/jit(silu)/div"(#loc611))
#loc956 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/jit(silu)/sub"(#loc611))
#loc957 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/jit(silu)/mul"(#loc611))
#loc958 = loc("jit(training_step)/jit(main)/transpose(jvp(jit(forward)))/while/body/checkpoint/rematted_computation/jit(silu)/add_any"(#loc611))
